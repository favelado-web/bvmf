<!DOCTYPE html>
<!-- saved from url=(0039)https://statusinvest.com.br/acoes/itsa4 -->
<html lang="pt-br">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="version" content="2.0.698.ERFTJH">

    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="robots" content="index,follow">
    <meta name="publisher" content="statusinvest.com.br">
    <title>ITSA4 - ITAUSA PN: cotação e indicadores</title>
    <link rel="icon" sizes="48x48" href="https://statusinvest.com.br/img/favicon/favicon-48x48.png">
    <link rel="icon" sizes="192x192" href="https://statusinvest.com.br/img/favicon/android-chrome-192x192.png">
    <link rel="icon" sizes="32x32" href="https://statusinvest.com.br/img/favicon/favicon-32x32.png">
    <link rel="apple-touch-icon" sizes="180x180" href="https://statusinvest.com.br/img/favicon/apple-touch-icon.png">
    <link rel="mask-icon" href="https://statusinvest.com.br/img/favicon/safari-pinned-tab.svg" color="#00598a">
    <meta name="msapplication-TileColor" content="#2b5797">
    <meta name="description"
        content="ITSA4 - ITAUSA, veja seus indicadores fundamentalista, variação, índices relacionados e mais! Tudo que o investidor precisa para tomar a melhor decisão">
    <link rel="canonical" href="https://statusinvest.com.br/acoes/itsa4">

    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="@statusInvestBR">
    <meta name="twitter:creator" content="@statusInvestBR">
    <meta property="twitter:title" content="ITSA4 - ITAUSA PN: cotação e indicadores">
    <meta property="twitter:image" content="https://statusinvest.com.br/img/logo/default-shared.png">

    <meta name="facebook-domain-verification" content="26xe53xuof8d5wn6fpanz7hfca7wzj">
    <meta property="og:title" itemprop="name" content="ITSA4 - ITAUSA PN: cotação e indicadores">
    <meta property="og:headline" itemprop="headline" content="ITSA4 - ITAUSA PN: cotação e indicadores">
    <meta property="og:description" itemprop="description"
        content="ITSA4 - ITAUSA, veja seus indicadores fundamentalista, variação, índices relacionados e mais! Tudo que o investidor precisa para tomar a melhor decisão">
    <meta property="og:url" itemprop="url" content="https://statusinvest.com.br/acoes/itsa4">
    <meta property="og:type" content="website">
    <meta property="og:image" content="https://statusinvest.com.br/img/logo/default-shared.png" itemprop="image">
    <meta property="og:locale" content="pt_BR">

    <meta name="theme-color" content="#00598a">

    <meta name="msapplication-navbutton-color" content="#00598a">

    <meta name="apple-mobile-web-app-status-bar-style" content="#00598a">
    <meta name="google-signin-client_id"
        content="889966620321-sqt7ofb2gaas63trjhi5hg3tt2i121e0.apps.googleusercontent.com">
    <script async="" src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/gtm.js.download"></script>
    <script type="application/ld+json">
        {
        "@context": "http://schema.org",
        "@type": "Organization",
        "@id": "https://statusinvest.com.br/#organization",
        "legalName": "Status Invest",
        "name": "Status Invest",
        "description": "Veja o fluxo de caixa, DRE, calendário de eventos, dividendos, índices, ou seja, uma análise completa das ações e FIIs que você tem na sua carreira",
        "url": "https://statusinvest.com.br",
        "logo": {
        "@type": "ImageObject",
        "@id": "https://statusinvest.com.br/#logo",
        "url": "https://statusinvest.com.br/img/logo/ldj_logo.jpg",
        "width": "500",
        "height": "500",
        "caption": "Status Invest"
        },
        "sameAs": [
        "https://www.facebook.com/statusinvestbr/",
        "https://www.instagram.com/status.invest/",
        "https://twitter.com/statusInvestBR"
        ]
        }
    </script>
    <script type="application/ld+json" class="yoast-schema-graph yoast-schema-graph--main">
        {
        "@context": "https://schema.org",
        "@graph": [
        {
        "@type": "Organization",
        "@id": "https://statusinvest.com.br/#organization",
        "name": "Status Invest",
        "url": "https://statusinvest.com.br",
        "sameAs": [
        "https://www.facebook.com/statusinvestbr/",
        "https://www.instagram.com/status.invest/",
        "https://twitter.com/statusInvestBR"
        ],
        "logo": {
        "@type": "ImageObject",
        "@id": "https://statusinvest.com.br/#logo",
        "url": "https://statusinvest.com.br/img/logo/ldj_logo.jpg",
        "width": "500",
        "height": "500",
        "caption": "Status Invest"
        },
        "image": {
        "@id": "https://statusinvest.com.br/#logo"
        }
        },
        {
        "@type": "WebSite",
        "@id": "https://statusinvest.com.br/#website",
        "url": "https://statusinvest.com.br",
        "name": "Status Invest",
        "publisher": {
        "@id": "https://statusinvest.com.br/#organization",
        "name": "Status Invest",
        "logo": {
        "@type": "ImageObject",
        "url": "https://statusinvest.com.br/img/logo/ldj_logo.jpg",
        "width": "500",
        "height": "500",
        "caption": "Status Invest"
        }
        }
        },
        {
        "@type": "WebPage",
        "@id": "https://statusinvest.com.br/#webpage",
        "url": "https://statusinvest.com.br",
        "inLanguage": "pt-BR",
        "name": "Status Invest",
        "isPartOf": {
        "@id": "https://statusinvest.com.br/#website"
        },
        "about": {
        "@id": "https://statusinvest.com.br/#organization"
        },
        "primaryImageOfPage": {
        "@id": "https://statusinvest.com.br/#primaryimage"
        }
        }
        ]
        }
    </script>
    <script type="application/ld+json">

        {
        "@context": "https://schema.org",
        "@type": "Article",
        "dateModified":"2023-01-06",
        "datePublished":"2019-01-01",
        "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://statusinvest.com.br/article/article-title"
        },
        "headline": "ITSA4 - ITAUSA PN: cota&#xE7;&#xE3;o e indicadores",
        "image": {
        "@type": "ImageObject",
        "url": "https://statusinvest.com.br/img/company/cover/345.jpg?v=8",
        "width": 600,
        "height": 200
        },
        "author": {
        "@id": "https://statusinvest.com.br/#organization"
        },
        "publisher": {
        "@id": "https://statusinvest.com.br/#organization",
        "name": "Status Invest",
        "logo": {
        "@type": "ImageObject",
        "url": "https://statusinvest.com.br/img/logo/ldj_logo.jpg",
        "width": "500",
        "height": "500",
        "caption": "Status Invest"
        }
        },
        "mentions": [
        {
        "@type": "Corporation",
        "name": "ITAUSA",
        "tickerSymbol": "BVMF: ITSA4",
        "url": "http://statusinvest.com.br/acoes/itsa4"
        }
        ],
        "description": "ITSA4 - ITAUSA, veja seus indicadores fundamentalista, variação, índices relacionados e mais! Tudo que o investidor precisa para tomar a melhor decisão"
        }
    </script>
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "VideoObject",
      "name": "ITSA4: DIVIDENDOS DE ITAÚSA SÃO BAIXOS? #shorts",
      "description": "ITSA4: DIVIDENDOS DE ITAÚSA SÃO BAIXOS? #shorts [Ebook gratuito] Guia Completo: ...",
      "thumbnailUrl": [
        "https://i.ytimg.com/vi/q5YtZ0aGbog/hqdefault.jpg"
       ],
      "uploadDate": "2022-12-01T00:30:12&#x2B;00:00",
      "embedUrl": "https://www.youtube.com/embed/q5YtZ0aGbog?rel=0"
    }
    </script>
    <style>
        .container {
            margin: 0 auto;
            margin-right: auto;
            margin-left: auto;
            padding-right: 15px;
            padding-left: 15px;
            max-width: 1280px;
            width: 100%;
        }

        @media(min-width:576px) {
            .container {
                max-width: 540px;
            }
        }

        @media(min-width:768px) {
            .container {
                max-width: 720px;
            }
        }

        @media(min-width:992px) {
            .container {
                max-width: 960px;
            }
        }

        @media(min-width:1200px) {
            .container {
                max-width: 1140px;
            }
        }

        .d-inline-block {
            display: inline-block !important;
        }

        .d-block {
            display: block !important;
        }

        .d-none {
            display: none !important;
        }

        .d-flex {
            display: flex !important;
        }

        @media(min-width:425px) {
            .d-xs-inline-block {
                display: inline-block !important;
            }

            .d-xs-block {
                display: block !important;
            }

            .d-xs-none {
                display: none !important;
            }

            .d-xs-flex {
                display: flex !important;
            }
        }

        @media(min-width:576px) {
            .d-sm-inline-block {
                display: inline-block !important;
            }

            .d-sm-block {
                display: block !important;
            }

            .d-sm-none {
                display: none !important;
            }

            .d-sm-flex {
                display: flex !important;
            }
        }

        @media(min-width:768px) {
            .d-md-inline-block {
                display: inline-block !important;
            }

            .d-md-block {
                display: block !important;
            }

            .d-md-none {
                display: none !important;
            }

            .d-md-flex {
                display: flex !important;
            }
        }

        @media(min-width:992px) {
            .d-lg-inline-block {
                display: inline-block !important;
            }

            .d-lg-block {
                display: block !important;
            }

            .d-lg-none {
                display: none !important;
            }

            .d-lg-flex {
                display: flex !important;
            }
        }

        @media(min-width:1200px) {
            .d-xl-inline-block {
                display: inline-block !important;
            }

            .d-xl-block {
                display: block !important;
            }

            .d-xl-none {
                display: none !important;
            }

            .d-xl-flex {
                display: flex !important;
            }
        }

        .d-flex {
            flex-direction: row;
        }

        .align-items-center {
            align-items: center;
        }

        .align-items-start {
            align-items: flex-start;
        }

        .align-items-end {
            align-items: flex-end;
        }

        .justify-center {
            justify-content: center;
        }

        .justify-between {
            justify-content: space-between !important;
        }

        .justify-around {
            justify-content: space-around !important;
        }

        .justify-start {
            justify-content: flex-start !important;
        }

        .justify-end {
            justify-content: flex-end !important;
        }

        @media(min-width:425px) {
            .justify-xs-between {
                justify-content: space-between !important;
            }

            .justify-xs-around {
                justify-content: space-around !important;
            }

            .justify-xs-start {
                justify-content: flex-start !important;
            }

            .justify-xs-end {
                justify-content: flex-end !important;
            }
        }

        @media(min-width:576px) {
            .justify-sm-between {
                justify-content: space-between !important;
            }

            .justify-sm-around {
                justify-content: space-around !important;
            }

            .justify-sm-start {
                justify-content: flex-start !important;
            }

            .justify-sm-end {
                justify-content: flex-end !important;
            }
        }

        @media(min-width:768px) {
            .justify-md-between {
                justify-content: space-between !important;
            }

            .justify-md-around {
                justify-content: space-around !important;
            }

            .justify-md-start {
                justify-content: flex-start !important;
            }

            .justify-md-end {
                justify-content: flex-end !important;
            }
        }

        @media(min-width:992px) {
            .justify-lg-between {
                justify-content: space-between !important;
            }

            .justify-lg-around {
                justify-content: space-around !important;
            }

            .justify-lg-start {
                justify-content: flex-start !important;
            }

            .justify-lg-end {
                justify-content: flex-end !important;
            }
        }

        @media(min-width:1200px) {
            .justify-xl-between {
                justify-content: space-between !important;
            }

            .justify-xl-around {
                justify-content: space-around !important;
            }

            .justify-xl-start {
                justify-content: flex-start !important;
            }

            .justify-xl-end {
                justify-content: flex-end !important;
            }
        }

        .flex-column {
            flex-direction: column !important;
        }

        .flex-row {
            flex-direction: row !important;
        }

        @media(min-width:425px) {
            .flex-xs-column {
                flex-direction: column !important;
            }

            .flex-xs-row {
                flex-direction: row !important;
            }
        }

        @media(min-width:576px) {
            .flex-sm-column {
                flex-direction: column !important;
            }

            .flex-sm-row {
                flex-direction: row !important;
            }
        }

        @media(min-width:768px) {
            .flex-md-column {
                flex-direction: column !important;
            }

            .flex-md-row {
                flex-direction: row !important;
            }
        }

        @media(min-width:992px) {
            .flex-lg-column {
                flex-direction: column !important;
            }

            .flex-lg-row {
                flex-direction: row !important;
            }
        }

        @media(min-width:1200px) {
            .flex-xl-column {
                flex-direction: column !important;
            }

            .flex-xl-row {
                flex-direction: row !important;
            }
        }

        .flex-wrap {
            flex-wrap: wrap !important;
        }

        .flex-nowrap {
            flex-wrap: nowrap !important;
        }

        @media(min-width:425px) {
            .flex-xs-wrap {
                flex-wrap: wrap !important;
            }

            .flex-xs-nowrap {
                flex-wrap: nowrap !important;
            }
        }

        @media(min-width:576px) {
            .flex-sm-wrap {
                flex-wrap: wrap !important;
            }

            .flex-sm-nowrap {
                flex-wrap: nowrap !important;
            }
        }

        @media(min-width:768px) {
            .flex-md-wrap {
                flex-wrap: wrap !important;
            }

            .flex-md-nowrap {
                flex-wrap: nowrap !important;
            }
        }

        @media(min-width:992px) {
            .flex-lg-wrap {
                flex-wrap: wrap !important;
            }

            .flex-lg-nowrap {
                flex-wrap: nowrap !important;
            }
        }

        @media(min-width:1200px) {
            .flex-xl-wrap {
                flex-wrap: wrap !important;
            }

            .flex-xl-nowrap {
                flex-wrap: nowrap !important;
            }
        }

        .flex-order--1 {
            order: -1 !important;
        }

        .flex-order-0 {
            order: 0 !important;
        }

        .flex-order-1 {
            order: 1 !important;
        }

        .flex-order-2 {
            order: 2 !important;
        }

        @media(min-width:425px) {
            .flex-xs-order--1 {
                order: -1 !important;
            }

            .flex-xs-order-0 {
                order: 0 !important;
            }

            .flex-xs-order-1 {
                order: 1 !important;
            }

            .flex-xs-order-2 {
                order: 2 !important;
            }
        }

        @media(min-width:576px) {
            .flex-sm-order--1 {
                order: -1 !important;
            }

            .flex-sm-order-0 {
                order: 0 !important;
            }

            .flex-sm-order-1 {
                order: 1 !important;
            }

            .flex-sm-order-2 {
                order: 2 !important;
            }
        }

        @media(min-width:768px) {
            .flex-md-order--1 {
                order: -1 !important;
            }

            .flex-md-order-0 {
                order: 0 !important;
            }

            .flex-md-order-1 {
                order: 1 !important;
            }

            .flex-md-order-2 {
                order: 2 !important;
            }
        }

        @media(min-width:992px) {
            .flex-lg-order--1 {
                order: -1 !important;
            }

            .flex-lg-order-0 {
                order: 0 !important;
            }

            .flex-lg-order-1 {
                order: 1 !important;
            }

            .flex-lg-order-2 {
                order: 2 !important;
            }
        }

        @media(min-width:1200px) {
            .flex-xl-order--1 {
                order: -1 !important;
            }

            .flex-xl-order-0 {
                order: 0 !important;
            }

            .flex-xl-order-1 {
                order: 1 !important;
            }

            .flex-xl-order-2 {
                order: 2 !important;
            }
        }

        html {
            height: 100%;
            font-size: 14px;
        }
    </style>
    <style>
        nav {
            color: #fff;
            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 1px -2px rgba(0, 0, 0, .12), 0 1px 5px 0 rgba(0, 0, 0, .2);
            background-color: #26a69a;
            width: 100%;
            height: 56px;
            line-height: 56px;
        }

        nav.nav-extended {
            height: auto;
        }

        nav.nav-extended .nav-wrapper {
            min-height: 56px;
            height: auto;
        }

        nav.nav-extended .nav-content {
            position: relative;
            line-height: normal;
        }

        nav a {
            color: #fff;
        }

        nav i,
        nav [class^=mdi-],
        nav [class*=mdi-],
        nav i.material-icons {
            display: block;
            font-size: 24px;
            height: 56px;
            line-height: 56px;
        }

        nav .nav-wrapper {
            position: relative;
            height: 100%;
        }

        @media only screen and (min-width:993px) {
            nav a.sidenav-trigger {
                display: none;
            }
        }

        nav .sidenav-trigger {
            float: left;
            position: relative;
            z-index: 1;
            height: 56px;
            margin: 0 18px;
        }

        nav .sidenav-trigger i {
            height: 56px;
            line-height: 56px;
        }

        nav ul {
            margin: 0;
        }

        nav ul li {
            transition: background-color .3s;
            float: left;
            padding: 0;
        }

        nav ul li.active {
            background-color: rgba(0, 0, 0, .1);
        }

        nav ul a {
            transition: background-color .3s;
            font-size: 1rem;
            color: #fff;
            display: block;
            padding: 0 15px;
            cursor: pointer;
        }

        nav ul a.btn,
        nav ul a.btn-large,
        nav ul a.btn-flat,
        nav ul a.btn-floating {
            margin-top: -2px;
            margin-left: 15px;
            margin-right: 15px;
        }

        nav ul a.btn>.material-icons,
        nav ul a.btn-large>.material-icons,
        nav ul a.btn-flat>.material-icons,
        nav ul a.btn-floating>.material-icons {
            height: inherit;
            line-height: inherit;
        }

        nav ul a:hover {
            background-color: rgba(0, 0, 0, .1);
        }

        nav ul.left {
            float: left;
        }

        nav form {
            height: 100%;
        }

        .navbar-fixed {
            position: relative;
            height: 56px;
            z-index: 997;
        }

        .navbar-fixed nav {
            position: fixed;
        }

        @media only screen and (min-width:601px) {
            nav.nav-extended .nav-wrapper {
                min-height: 64px;
            }

            nav,
            nav .nav-wrapper i,
            nav a.sidenav-trigger,
            nav a.sidenav-trigger i {
                height: 64px;
                line-height: 64px;
            }

            .navbar-fixed {
                height: 64px;
            }
        }

        body #main-nav-nav .main-dropdown-menu,
        body #main-nav-nav .login-view,
        body #main-nav-nav .navbar-brand img,
        body #main-nav-nav i,
        body #main-nav-nav {
            transition: .3s all linear;
            transition: .3s all cubic-bezier(.65, .05, .36, 1);
        }

        body.hidevalues .btn-hide-values {
            background-color: #d64000;
        }

        body.hidevalues .btn-hide-values i {
            color: #fff;
        }

        body.main-nav-small {
            padding-top: 50px;
        }

        body.main-nav-small #main-nav-nav .btn-hide-values {
            left: 65px;
            height: 35px;
            line-height: 30px;
            top: 10px;
            width: 35px;
            line-height: initial;
            transform: initial;
        }

        body.main-nav-small #main-nav-nav {
            height: 50px;
            line-height: 50px;
            box-shadow: 0 8px 10px -5px rgba(0, 0, 0, 0);
            box-shadow: 0 8px 10px -5px rgba(0, 0, 0, .7);
        }

        body.main-nav-small #main-nav-nav.no-shadow {
            box-shadow: none;
        }

        body.main-nav-small #main-nav-nav i {
            height: 50px;
            line-height: 50px;
        }

        body.main-nav-small #main-nav-nav .user-view {
            height: 50px;
        }

        body.main-nav-small #main-nav-nav .navbar-brand img {
            margin-top: 5px;
            height: 40px;
            width: 50px;
        }

        body.main-nav-small #main-nav-nav .dropdown-content.menu-dropdown {
            top: 40px !important;
        }

        body.main-nav-small #main-nav-nav .main-dropdown-menu {
            top: 30px !important;
        }

        body.main-nav-small #main-nav-nav .main-dropdown-menu.showing {
            top: 40px !important;
        }

        body.main-nav-small #main-nav-nav .login-view {
            height: 50px;
        }

        @media(min-width:576px) {
            body.main-nav-small #main-nav-nav .div-currency-wallet .btn-currency-wallet {
                margin-top: 5px;
            }

            body.main-nav-small #main-nav-nav .btn-notification .pulsing {
                bottom: .5rem;
                right: .6rem;
            }

            body.main-nav-small #main-nav-nav .btn-notification .sync {
                bottom: .3rem;
                right: .1rem;
            }
        }

        body #main-nav-nav {
            box-shadow: none;
            text-transform: uppercase;
            position: relative;
            z-index: 10;
            height: 60px;
            line-height: 60px;
            top: 0;
            position: fixed;
        }

        body #main-nav-nav ul.navbar-nav li {
            margin-right: .4rem;
        }

        body #main-nav-nav ul.navbar-nav li:last-of-type {
            margin-right: 0;
        }

        body #main-nav-nav ul.navbar-nav li>a {
            padding-left: .3rem;
            padding-right: .3rem;
        }

        @media(min-width:768px) {
            body #main-nav-nav ul.navbar-nav li>a {
                font-size: .9rem;
            }
        }

        @media(min-width:992px) {
            body #main-nav-nav ul.navbar-nav li>a {
                padding-left: .6rem;
                padding-right: .6rem;
            }
        }

        @media(min-width:1200px) {
            body #main-nav-nav ul.navbar-nav li>a {
                font-size: 1rem;
                padding-left: .8rem;
                padding-right: .8rem;
            }
        }

        body #main-nav-nav i {
            height: 60px;
            line-height: 60px;
        }

        body #main-nav-nav i.right {
            margin-left: 0;
            width: 10px;
            left: -1px;
            font-size: 1rem;
            padding: 0;
            position: relative;
        }

        body #main-nav-nav .menu-dropdown i {
            height: initial;
            line-height: initial;
            margin-right: .3rem;
            font-size: 1.5rem;
            margin-top: .1rem;
        }

        body #main-nav-nav .navbar-brand {
            margin-right: 2rem;
            line-height: 0;
        }

        body #main-nav-nav .navbar-brand img {
            margin-top: 10px;
            height: 40px;
            width: 50px;
        }

        body #main-nav-nav .btn-hide-values {
            display: none;
            position: absolute;
            left: 90px;
            height: 40px;
            line-height: 40px;
            top: 50%;
            border-radius: 100px;
            width: 40px;
            padding: 0 !important;
            line-height: initial;
            transform: translateY(-50%);
            transition: .3s all linear;
        }

        body #main-nav-nav .btn-hide-values i {
            line-height: initial;
            height: initial !important;
        }

        body #main-nav-nav .btn-login {
            margin-left: 1rem;
        }

        body #main-nav-nav .user-view {
            height: 60px;
        }

        body #main-nav-nav .user-view .apresentacao {
            text-align: right;
            min-width: 180px;
            max-width: 180px;
        }

        body #main-nav-nav .user-view .avatar {
            width: 30px;
            height: 30px;
            background-color: #444;
            background-position: center center;
            background-size: cover;
            border-radius: 5px;
            margin: auto;
        }

        body #main-nav-nav .user-view .avatar i {
            margin-left: -.3rem;
        }

        body #main-nav-nav .login-view {
            height: 60px;
        }

        body #main-nav-nav .dropdown-content.menu-dropdown {
            min-width: 250px;
            top: 60px !important;
            position: absolute;
            right: 0 !important;
            z-index: 100;
            left: initial !important;
            transition: .3s top linear;
            transition: .3s top cubic-bezier(.65, .05, .36, 1);
        }

        body #main-nav-nav .dropdown-content.menu-dropdown.w-small {
            min-width: 200px;
        }

        body #main-nav-nav .dropdown-content.menu-dropdown a.novo:before {
            top: 34px;
        }

        body #main-nav-nav .main-dropdown-menu {
            left: auto !important;
            width: 200px !important;
            right: 0;
            top: 40px !important;
            opacity: 0;
            visibility: hidden;
        }

        body #main-nav-nav .main-dropdown-menu.showing {
            opacity: 1;
            visibility: visible;
            top: 50px !important;
        }

        body #main-nav-nav .main-dropdown-menu li {
            min-height: initial;
            line-height: initial;
        }

        body #main-nav-nav .main-dropdown-menu li li>a {
            padding: 5px 16px;
        }

        body #main-nav-nav .main-dropdown-menu .sub-menu>a {
            padding-bottom: 0;
            font-weight: 900;
            font-size: 1rem;
        }

        body #main-nav-nav .main-dropdown-menu .sub-menu ul {
            display: table;
            width: 100%;
            border-bottom: 1px solid #c8c8c8;
        }

        body #main-nav-nav .main-dropdown-menu .sub-menu ul a {
            padding-top: 10px;
            padding-bottom: 10px;
            line-height: 10px;
        }

        body #main-nav-nav .btn-main-menu.btn-show-left-menu+.main-dropdown-menu {
            display: none !important;
        }

        body #main-nav-nav .div-currency-wallet {
            margin-right: -21px;
        }

        body #main-nav-nav .div-currency-wallet #currencyWalletDropdown {
            top: 50px !important;
        }

        body #main-nav-nav .div-currency-wallet #currencyWalletDropdown .optgroup:not(.divider) {
            line-height: initial;
            min-height: 2rem;
        }

        body #main-nav-nav .div-currency-wallet #currencyWalletDropdown a {
            padding-left: 1rem;
        }

        body #main-nav-nav .div-currency-wallet .btn-currency-wallet {
            transition: .1s all linear;
            padding: 0 4px;
            background-color: #04ab94;
            color: #fff;
            min-width: 53px;
        }

        body #main-nav-nav .div-currency-wallet .btn-currency-wallet .currency {
            letter-spacing: -.1rem;
        }

        body #main-nav-nav .div-currency-wallet .btn-currency-wallet .material-icons {
            width: 10px;
            font-size: 1rem;
        }

        body #main-nav-nav .div-currency-wallet .div-currencyWallet-cover {
            position: absolute;
            width: 100%;
            height: 100%;
            z-index: 3;
            background-color: rgba(255, 255, 255, .2);
            cursor: pointer;
        }

        body #main-nav-nav .btn-notification {
            position: relative;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            z-index: 2;
        }

        body #main-nav-nav .btn-notification:before {
            content: "";
            position: fixed;
            visibility: hidden;
            opacity: 0;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: -1;
            -moz-transition: .2s all linear;
            -o-transition: .2s all linear;
            -webkit-transition: .2s all linear;
            transition: .2s all linear;
        }

        body #main-nav-nav .btn-notification.is-active .not-active {
            display: none;
        }

        body #main-nav-nav .btn-notification.is-active .active {
            display: block;
        }

        body #main-nav-nav .btn-notification.is-active .pulsing {
            visibility: visible;
            opacity: 1;
            transition: .2s all linear;
        }

        body #main-nav-nav .btn-notification.is-entrega .not-active {
            display: none;
        }

        body #main-nav-nav .btn-notification.is-entrega .active {
            display: block;
        }

        body #main-nav-nav .btn-notification.is-entrega .pulsing {
            visibility: visible;
            opacity: 1;
            transition: .2s all linear;
        }

        body #main-nav-nav .btn-notification.is-sync .sync {
            visibility: visible;
            opacity: 1;
        }

        body #main-nav-nav .btn-notification.is-open:before {
            visibility: visible;
            opacity: 1;
        }

        body #main-nav-nav .btn-notification.is-open+.popover-notification {
            margin-top: -5px;
            visibility: visible;
            opacity: 1;
        }

        body #main-nav-nav .btn-notification .not-active {
            display: block;
        }

        body #main-nav-nav .btn-notification .active {
            display: none;
        }

        body #main-nav-nav .btn-notification .sync {
            visibility: hidden;
            opacity: 0;
            line-height: initial;
            font-size: 14px;
            width: 14px;
            height: 14px;
            position: absolute;
            bottom: .8rem;
            right: -.1rem;
            border-radius: 40px;
            transition: .2s opacity linear;
            -webkit-animation: rotation 2s infinite linear;
            box-sizing: content-box;
            padding: 2px;
        }

        body #main-nav-nav .btn-notification .pulsing {
            visibility: hidden;
            opacity: 0;
            display: block;
            width: 10px;
            height: 10px;
            position: absolute;
            bottom: 1rem;
            right: .3rem;
            border-radius: 10px;
        }

        body #main-nav-nav .popover-notification {
            visibility: hidden;
            opacity: 0;
            line-height: initial;
            margin-top: -10px;
            position: absolute;
            width: 310px;
            margin-left: 5px;
            transform: translatex(-50%);
            padding: 0;
            -moz-transition: .2s all linear;
            -o-transition: .2s all linear;
            -webkit-transition: .2s all linear;
            transition: .2s all linear;
            position: absolute;
            z-index: 3;
        }

        body #main-nav-nav .popover-notification>div {
            overflow: hidden;
            border: 1px solid #adadad;
        }

        body #main-nav-nav .popover-notification>div .wallet i,
        body #main-nav-nav .popover-notification>div .approvals i {
            line-height: initial;
            height: initial;
        }

        body #main-nav-nav .popover-notification a {
            position: relative;
            z-index: 1;
        }

        body #main-nav-nav .popover-notification .wallet-processing {
            font-size: .9rem;
        }

        body #main-nav-nav .popover-notification .wallet-processed {
            font-size: .9rem;
        }

        body #main-nav-nav .popover-notification .popover-arrow {
            width: 15px;
            height: 15px;
            position: absolute;
            left: 54%;
            top: -2px;
            transform: rotate(45deg) translateX(-50%);
            border-left: 1px solid #adadad;
            border-top: 1px solid #adadad;
            z-index: 1;
        }

        body #main-nav-nav .popover-notification .steps {
            position: relative;
            overflow: hidden;
            margin-top: .2rem;
        }

        body #main-nav-nav .popover-notification .steps:before {
            content: "";
            border-bottom: 2px solid #a0a0a0;
            position: absolute;
            left: 0;
            right: 0;
            top: 5px;
        }

        body #main-nav-nav .popover-notification .steps:after {
            content: "";
            border-bottom: 2px solid #04ab94;
            position: absolute;
            right: 100%;
            width: 100%;
            top: 5px;
        }

        body #main-nav-nav .popover-notification .steps span {
            display: block;
            width: 12px;
            height: 12px;
            border-radius: 50px;
            z-index: 1;
        }

        body #main-nav-nav .popover-notification .steps.to-step-0:after {
            right: 75%;
            border-bottom: 2px solid #d64000;
        }

        body #main-nav-nav .popover-notification .steps.to-step-1:after {
            right: 25%;
            border-bottom: 2px solid #d64000;
        }

        body #main-nav-nav .popover-notification .steps.to-step-2:after {
            right: 0%;
        }

        body #main-nav-nav .novo {
            position: relative;
        }

        body #main-nav-nav .novo:before {
            content: "novo";
            position: absolute;
            font-size: .4rem;
            font-weight: 700;
            background-color: #d64000;
            color: #fff;
            display: block;
            line-height: initial;
            min-height: initial;
            max-height: initial;
            height: initial;
            padding: .1rem .3rem;
            border-radius: .3rem;
        }

        body #main-nav-nav .novo.nav-link:before,
        body #main-nav-nav .novo.dropdown-trigger:before {
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            top: 50%;
            margin-top: 10px;
        }

        body #main-nav-nav .novo.dropdown-item:before {
            top: 1.4rem;
            right: 1rem;
            font-size: .5rem;
        }

        body #main-nav-nav #internacionalDropdown {
            min-width: 280px;
        }

        body #main-nav-nav #internacionalDropdown li {
            min-height: 30px;
        }

        body #main-nav-nav #internacionalDropdown li a {
            font-size: 16px;
            line-height: 18px;
            padding: 10px 16px;
        }

        body #main-nav-nav #internacionalDropdown li.mercado a {
            font-size: 1rem;
            line-height: 1.6rem;
            font-weight: 700;
            border: 0;
        }

        body #main-nav-nav #internacionalDropdown li.mercado .img-flag {
            width: 16px;
            height: 16px;
            background-size: contain;
            background-repeat: no-repeat;
        }

        body #main-nav-nav #internacionalDropdown li.mercado i.material-icons {
            font-size: 1.2rem;
        }

        body #main-nav-nav #internacionalDropdown li.sub-menu {
            border-bottom: 1px solid #ccc;
            padding: .5rem 0;
        }

        body #main-nav-nav #internacionalDropdown li.sub-menu:hover {
            background-color: initial;
            cursor: default;
        }

        body #main-nav-nav #internacionalDropdown li.sub-menu li:last-of-type a {
            border: 0;
        }

        body #main-nav-nav #internacionalDropdown li.sub-menu>a {
            font-weight: 900;
            padding-bottom: 0;
            padding-top: 0;
            font-size: .9rem;
            color: #d64000;
            border: 0;
        }

        body #main-nav-nav #internacionalDropdown li.sub-menu>a:hover {
            background-color: initial;
            cursor: default;
        }

        @media(min-width:576px) {
            body #main-nav-nav {
                height: 70px;
                line-height: 70px;
            }

            body #main-nav-nav ul.navbar-nav li {
                margin-right: 0;
            }

            body #main-nav-nav i {
                height: 70px;
                line-height: 70px;
            }

            body #main-nav-nav .navbar-brand img {
                margin-top: 5px;
                height: 60px;
                width: 75px;
            }

            body #main-nav-nav .user-view {
                height: 70px;
            }

            body #main-nav-nav .user-view .avatar {
                width: 40px;
                height: 40px;
            }

            body #main-nav-nav .login-view {
                height: 70px;
            }

            body #main-nav-nav .div-currency-wallet .div-currencyWallet-cover {
                height: 40px;
                bottom: 0;
                border-radius: 6px;
            }

            body #main-nav-nav .btn-notification .pulsing {
                bottom: 1.5rem;
                right: .6rem;
            }

            body #main-nav-nav .btn-notification .sync {
                bottom: 1.3rem;
                right: .1rem;
            }

            body #main-nav-nav .div-currency-wallet .btn-currency-wallet {
                height: 40px;
                margin-top: 15px;
                border-radius: .5rem;
            }
        }

        @media(min-width:768px) {
            body #main-nav-nav .user-login-view {
                width: 280px;
            }
        }

        @media(min-width:992px) {
            body #main-nav-nav .user-login-view {
                width: 200px;
            }

            body #main-nav-nav .user-view .apresentacao {
                min-width: 120px;
                max-width: 120px;
            }

            body #main-nav-nav .popover-notification {
                margin-left: 20px;
            }

            body #main-nav-nav .popover-notification .popover-arrow {
                left: 50%;
            }
        }

        @media(min-width:1200px) {
            body #main-nav-nav .user-login-view {
                width: 225px;
            }

            body #main-nav-nav .user-view .apresentacao {
                min-width: 150px;
                max-width: 150px;
            }
        }

        body #main-nav-nav {
            background: linear-gradient(-90deg, #00598a 0%, #04ab94 100%);
            background: linear-gradient(-90deg, rgba(0, 89, 138, .9) 0%, rgba(4, 171, 148, .9) 100%);
            color: #fff;
            background-color: transparent !important;
        }

        body #main-nav-nav a {
            color: #fff;
        }

        body #main-nav-nav ul a {
            color: #fff;
        }

        body #main-nav-nav .main-dropdown-menu a {
            color: #037e6d;
        }

        body #main-nav-nav .dropdown-content.menu-dropdown a {
            color: #037e6d;
        }

        body #main-nav-nav .main-dropdown-menu .sub-menu:hover {
            background-color: initial;
        }

        body #main-nav-nav .main-dropdown-menu .sub-menu>a {
            color: #5f5f5f;
        }

        body #main-header {
            position: relative;
        }

        body #main-header h1 {
            margin: 0;
            font-weight: bold;
        }

        body #main-header h1 small {
            font-weight: 100;
        }

        body #main-header .actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            padding-top: .5rem;
        }

        body #main-header .actions>div {
            position: relative;
            margin-right: 1rem;
            padding-right: 1rem;
        }

        body #main-header .actions>div:last-of-type {
            border: 0;
            margin-right: 0;
            padding-right: 0;
        }

        body #main-header .actions>div.separetor {
            border-right: 1px solid #555;
        }

        body #main-header .actions .btn {
            height: 30px;
            line-height: 30px;
        }

        body #main-header .actions button.badge {
            border: 0;
            padding: .5rem;
            text-transform: uppercase;
            margin-right: .2rem;
            border-radius: .2rem;
            cursor: pointer;
        }

        body #main-header .actions button.badge:last-of-type {
            margin-right: 0;
        }

        body #main-header .actions button.badge.active {
            background-color: #ef6c00;
            color: #fff;
        }

        body #main-header .actions label {
            font-weight: bold;
            font-size: 1rem;
            color: #555;
            margin-right: .5rem;
        }

        body #main-header .actions .input-field {
            margin: 0;
        }

        body #main-header .actions .input-field .material-icons.prefix {
            font-size: 1.5rem;
            width: 2rem;
        }

        body #main-header .actions .input-field .material-icons.prefix+input {
            margin-left: 2rem;
        }

        body #main-header .actions .input-field .material-icons.suffix {
            position: absolute;
            right: 0;
        }

        body #main-header .actions .input-field .material-icons.suffix~input {
            width: calc(100% - 2rem);
        }

        body #main-header .actions .input-field>input[type=text] {
            height: 2rem;
            padding: 0;
            margin-bottom: 0;
        }

        body #main-header .actions .input-field .btn {
            height: 30px;
            line-height: 2rem;
        }

        body #main-header .actions .date-range .from {
            width: 40%;
        }

        body #main-header .actions .date-range .from input {
            text-align: center;
        }

        body #main-header .actions .date-range .to {
            width: 60%;
        }

        body #main-header .actions .date-range .to input {
            text-align: center;
        }

        body #main-header .actions .date-range .divisor {
            width: 10%;
            text-align: center;
            padding: 0 .5rem;
            border-bottom: 1px solid #9e9e9e;
        }

        @media(min-width:768px) {
            body #main-header .actions {
                width: initial;
                border-top: 0;
                margin-top: 0;
                padding-top: 0;
            }
        }

        body #main-header {
            box-shadow: 0 5px 5px -7px #000;
            padding: 1rem 0;
            background-color: #fff;
        }

        body #main-header h1 {
            text-transform: uppercase;
            font-size: 1.3rem;
            line-height: 2rem;
        }

        body #main-header h1 small {
            color: #5f5f5f;
        }

        body #main-header .container>div {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
        }

        @media(min-width:1200px) {
            body #main-header h1 {
                font-size: 1.5rem;
            }
        }

        body .main-breadcrumb {
            display: flex;
            list-style: none;
            margin: 0;
            padding: 0;
        }

        body .main-breadcrumb li {
            margin-right: 2px;
        }

        body .main-breadcrumb li:after {
            content: "›";
            display: inline-block;
            position: relative;
        }

        body .main-breadcrumb li:first-of-type {
            margin-left: 0;
        }

        body .main-breadcrumb li:last-of-type {
            margin-right: 0;
            font-weight: 900;
        }

        body .main-breadcrumb li:last-of-type:after {
            content: "";
            display: none;
        }

        @media(min-width:375px) {
            body .main-breadcrumb li {
                margin-right: 5px;
            }
        }

        body .main-breadcrumb {
            margin-top: .3rem;
            color: #d64000;
            font-weight: 500;
            font-size: .9rem;
        }

        body .main-breadcrumb a {
            color: #d64000;
        }

        body .main-breadcrumb li {
            margin-right: 2px;
        }

        body .main-breadcrumb li:after {
            font-size: 1.7rem;
            line-height: .6rem;
            margin-left: 2px;
            top: 1px;
        }

        body .main-breadcrumb li:last-of-type a {
            color: #a33100;
        }

        @media(min-width:375px) {
            body .main-breadcrumb li {
                margin-right: 5px;
            }

            body .main-breadcrumb li:after {
                margin-left: 5px;
            }
        }

        main {
            min-height: 90%;
        }
    </style>
    <style>
        i.material-icons {
            overflow: hidden;
        }
    </style>
    <link rel="preload" href="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/site.main.min.css" as="style">
    <link rel="preload" href="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/siteV2.min.js.download" as="script">
    <link rel="preload" href="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/jquery-3.6.0.min.js.download"
        as="script">
    <link rel="preload" href="https://fonts.gstatic.com/s/materialicons/v92/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2"
        as="font" type="font/woff2" crossorigin="">
    <link href="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/site.main.min.css" rel="stylesheet">
    <link rel="preload" href="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/acao.resume.min.css" as="style">
    <link href="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/acao.resume.min.css" rel="stylesheet">
    <link href="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/resume.item.wallet.min.css" rel="stylesheet">

    <link href="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/assetBase.min.css" rel="stylesheet">

    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/platform.js.download" async="" defer=""
        gapi_processed="true"></script>
    <script>
        window.imgV = '8';
        window.scriptV = '2.0.698.ERFTJH';
        window.adsPageType = '1';
        window.advertisingUrl = 'https://campaign.statusinvest.com.br';

    </script>
    <script>

        function getCookie(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        window.getCookie = getCookie;

    </script>

    <script>

        (function () {

            // validando se o usuário deve ou não ver anúncios
            if (getCookie('.StatusInvestAd')) {
                var w = window.top, d = w.document, s = d.createElement("style"), b = d.head || d.getElementsByTagName("head")[0];

                if (w.document && w.document.classList) {
                    w.document.classList += ' no-ads';
                }

                if (d && d.documentElement && d.documentElement.classList) {
                    d.documentElement.classList += ' no-ads';
                }

                var styles = ' .popup-fixed, .adsbygoogle, .advertising { display: none !important; }';

                s.type = "text/css";
                s.innerText = styles;
                b.appendChild(s);
            }

            // validando se o usuário tem acesso ao módulo de forecast, para assim liberar algumas visões na tela
            if (getCookie('.StatusInvestForecast')) {

                var w = window.top, d = w.document, b = d.head || d.getElementsByTagName("head")[0];
                var cssClass = ' has-forecast';

                if (w.document && w.document.classList) {
                    w.document.classList += cssClass;
                }

                if (d && d.documentElement && d.documentElement.classList) {
                    d.documentElement.classList += cssClass;
                }
            }

            // validando se tem o cookie de anuncio Thin, caso não tiver, então esconder
            if (!getCookie('.StatusAdThin')) {

                var w = window.top, d = w.document, s = d.createElement("style"), b = d.head || d.getElementsByTagName("head")[0];

                var styles = ' .advertising.a_x_d_x_s-thin { display: none !important; }';

                s.type = "text/css";
                s.innerText = styles;
                b.appendChild(s);
            }

        })();

    </script>
    <style type="text/css">
        .advertising.a_x_d_x_s-thin {
            display: none !important;
        }
    </style>

    <script>
        (function (w, d, s, l, i) {
            w[l] = w[l] || []; w[l].push({
                'gtm.start':
                    new Date().getTime(), event: 'gtm.js'
            }); var f = d.getElementsByTagName(s)[0],
                j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
                    'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
        })(window, document, 'script', 'dataLayer', 'GTM-KV72QQ5');
    </script>

    <style type="text/css">
        .to-load.advertising [data-id="banner-1"] .image {
            background-image: url(https://files.statusinvest.com.br/marketing/advertisement/images/65071850-b643-4f4d-a1a9-e69d66e460db.png?v=8);
        }

        @media(min-width: 425px) {
            .to-load.advertising [data-id="banner-1"] .image {
                background-image: url(https://files.statusinvest.com.br/marketing/advertisement/images/21f57e06-8a04-4d7c-88ec-088441418c97.png?v=8);
            }
        }

        @media(min-width: 992px) {
            .to-load.advertising [data-id="banner-1"] .image {
                background-image: url(https://files.statusinvest.com.br/marketing/advertisement/images/6d6026df-ab6a-4cd7-87df-ac14cda7d577.png?v=8);
            }
        }
    </style>
    <style type="text/css">
        .to-load.advertising [data-id="banner-4"] .image {
            background-image: url(https://files.statusinvest.com.br/marketing/advertisement/images/d7bcdb5f-2a93-4573-93ee-64e8da7a359b.jpg?v=8);
        }

        @media(min-width: 425px) {
            .to-load.advertising [data-id="banner-4"] .image {
                background-image: url(https://files.statusinvest.com.br/marketing/advertisement/images/6d8cb056-5baf-4bef-bb29-e1258f4c639e.jpg?v=8);
            }
        }

        @media(min-width: 992px) {
            .to-load.advertising [data-id="banner-4"] .image {
                background-image: url(https://files.statusinvest.com.br/marketing/advertisement/images/65ac720d-2ee3-4b2f-a0c5-f52d08c323ca.jpg?v=8);
            }
        }
    </style>
    <style type="text/css">
        .to-load.external-report [data-id="report-1"] .image {
            background-image: url(/advertising/1eaf1d6d1c974907a169c5d63c51698e/report/itsa-1.png?v=8);
        }

        @media(min-width: 425px) {
            .to-load.external-report [data-id="report-1"] .image {
                background-image: url(/advertising/1eaf1d6d1c974907a169c5d63c51698e/report/itsa-1-m.png?v=8);
            }
        }

        @media(min-width: 992px) {
            .to-load.external-report [data-id="report-1"] .image {
                background-image: url(/advertising/1eaf1d6d1c974907a169c5d63c51698e/report/itsa-1-l.png?v=8);
            }
        }
    </style>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/echarts.custom.min.js.download" type="text/javascript"
        async=""></script>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/rent.history.min.js.download" type="text/javascript"
        async=""></script>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/content.show.moreless.min.js.download"
        type="text/javascript" async=""></script>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/calendar.events.min.js.download"
        type="text/javascript" async=""></script>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/resume.asset.min.js.download" type="text/javascript"
        async=""></script>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/grid.min.js.download" type="text/javascript"
        async=""></script>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/resume.compare.min.js.download" type="text/javascript"
        async=""></script>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/pg.statusinvest.home.js.download"
        type="text/javascript" async=""></script>
</head>

<body style="padding-top: 60px;overflow-y:scroll">

    <noscript>
        <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KV72QQ5" height="0" width="0"
            style="display:none;visibility:hidden"></iframe>
    </noscript>

    <header role="banner">
        <input id="is-authenticated" name="is-authenticated" type="hidden" value="false">
        <nav id="main-nav-nav" class="navbar navbar-expand-lg navbar-light bg-light" aria-label="Main"
            style="position:fixed;background-color: #fff;">
            <div class="container d-flex justify-between p-relative">
                <a class="navbar-brand" href="https://statusinvest.com.br/" title="Página inicial">
                    <img width="50" height="40" src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/logo-main.png"
                        alt="Página inicial do Status Invest">
                </a>
                <div class="links d-flex">
                    <div class="collapse navbar-collapse">
                        <ul class="navbar-nav mr-auto">
                            <li class="nav-item">
                                <a role="button"
                                    class="btn-hide-values align-items-center justify-center btn btn-secondary btn-outline"
                                    title="Esconder/apresentar os valores da carteira">
                                    <i class="material-icons prefix visibility">visibility</i>
                                    <i class="material-icons prefix visibility_off">visibility_off</i>
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="main-search" role="button"
                                    title="Busca por nome de empresas, FIIs, índices e muito mais">
                                    <i style="max-width: 24px;" class="material-icons prefix">search</i>
                                </a>
                            </li>
                            <li class="nav-item d-none d-lg-block p-relative ">
                                <a class="dropdown-trigger" href="https://statusinvest.com.br/acoes/itsa4#!"
                                    data-target="internacionalDropdown" title="Mercado internacional">
                                    INTERNACIONAL<i style="max-width: 10px;width: 10px;"
                                        class="material-icons right">arrow_drop_down</i>
                                </a>
                                <ul id="internacionalDropdown" class="menu-dropdown dropdown-content  w-small"
                                    tabindex="0">
                                    <li class="mercado" tabindex="0">
                                        <a class="d-flex justify-between align-items-center"
                                            href="https://statusinvest.com.br/internacional"
                                            title="Mercado internacional">
                                            <div class="d-flex align-items-center">
                                                <div class="img-flag" style="background-image: url(/img/icon/usa.png)">
                                                </div>&nbsp;<span>MERCADO
                                                    INTERNACIONAL</span>
                                            </div>
                                            <div>
                                                <i class="material-icons">home</i>
                                            </div>
                                        </a>
                                    </li>
                                    <li class="sub-menu " tabindex="0">
                                        <a role="none" title="Ações">STOCKs</a>
                                        <ul id="">
                                            <li>
                                                <a href="https://statusinvest.com.br/acoes/eua"
                                                    title="Tudo sobre as stocks as ações dos eua">
                                                    <b>Tudo</b> sobre ações
                                                </a>
                                            </li>
                                            <li>
                                                <a href="https://statusinvest.com.br/acoes/eua/busca-avancada"
                                                    title="Pesquisa de stocks a partir de suas características">
                                                    Busca <b>avançada</b>
                                                </a>
                                            </li>
                                        </ul>
                                    </li>
                                    <li class="sub-menu " tabindex="0">
                                        <a role="none" title="Ações">REITs</a>
                                        <ul id="">
                                            <li>
                                                <a href="https://statusinvest.com.br/reits"
                                                    title="tudo sobre os reits: os fundos imobiliários americanos">
                                                    <b>Tudo</b> sobre reits
                                                </a>
                                            </li>
                                            <li>
                                                <a href="https://statusinvest.com.br/reits/busca-avancada"
                                                    title="Pesquisa de reits a partir de suas características">
                                                    Busca <b>avançada</b>
                                                </a>
                                            </li>
                                        </ul>
                                    </li>
                                    <li class="" tabindex="0">
                                        <a class=" " href="https://statusinvest.com.br/etf/eua"
                                            title="Tudo sobre os ETFs americanos">
                                            <b>Tudo</b> sobre ETFs
                                        </a>
                                    </li>
                                </ul>

                            </li>
                            <li class="nav-item d-none d-lg-block p-relative">
                                <a class="dropdown-trigger" href="https://statusinvest.com.br/acoes/itsa4#!"
                                    data-target="acaoDropdown" title="Ações">AÇÕES<i
                                        style="max-width: 10px;width: 10px;"
                                        class="material-icons right">arrow_drop_down</i></a>
                                <ul id="acaoDropdown" class="menu-dropdown dropdown-content  w-small" tabindex="0">
                                    <li tabindex="0">
                                        <a href="https://statusinvest.com.br/acoes"
                                            title="Tudo sobre as ações listadas na bolsa de valores">
                                            <b>Tudo</b> sobre ações
                                        </a>
                                    </li>
                                    <li tabindex="0">
                                        <a href="https://statusinvest.com.br/acoes/busca-avancada"
                                            title="Pesquisa de ações a partir de suas características">
                                            Busca <b>avançada</b>
                                        </a>
                                    </li>
                                    <li class="divider" tabindex="-1"></li>
                                    <li tabindex="0">
                                        <a href="https://statusinvest.com.br/ipo/acoes"
                                            title="Lista dos próximos ipos da bolsa de valores">
                                            Próximos <b>IPOs</b>
                                        </a>
                                    </li>
                                    <li class="divider" tabindex="-1"></li>
                                    <li tabindex="0">
                                        <a href="https://statusinvest.com.br/acoes/agenda-de-resultados" class="fs-3"
                                            title="Lista com a agenda de resultados das empresas">
                                            AGENDA DE RESULTADOS
                                        </a>
                                    </li>
                                </ul>

                            </li>
                            <li class="nav-item d-none d-lg-block p-relative">
                                <a class="dropdown-trigger" href="https://statusinvest.com.br/acoes/itsa4#!"
                                    data-target="fiiDropdown" title="Fundos imobiliários">FIIs<i
                                        style="max-width: 10px;width: 10px;"
                                        class="material-icons right">arrow_drop_down</i></a>
                                <ul id="fiiDropdown" class="menu-dropdown dropdown-content w-small" tabindex="0">
                                    <li tabindex="0">
                                        <a href="https://statusinvest.com.br/fundos-imobiliarios"
                                            title="Tudo sobre os fundos imobiliários listados na bolsa de valores">
                                            <b>Tudo</b> sobre FIIs
                                        </a>
                                    </li>
                                    <li tabindex="0">
                                        <a href="https://statusinvest.com.br/fundos-imobiliarios/busca-avancada"
                                            title="Pesquisa de fundos imobiliários a partir de suas características">
                                            Busca <b>avançada</b>
                                        </a>
                                    </li>
                                </ul>

                            </li>
                            <li class="nav-item d-none d-lg-block">
                                <a class="nav-link" href="https://statusinvest.com.br/bdrs"
                                    title="Brazilian Depositary Receipts">BDRs</a>
                            </li>
                            <li class="nav-item d-none d-lg-block p-relative">
                                <a class="dropdown-trigger novo" href="https://statusinvest.com.br/acoes/itsa4#!"
                                    data-target="fundoDropdown" title="Fundos">Fundos<i
                                        style="max-width: 10px;width: 10px;"
                                        class="material-icons right">arrow_drop_down</i></a>
                                <ul id="fundoDropdown" class="menu-dropdown dropdown-content w-small"
                                    style=" min-width: 210px;" tabindex="0">
                                    <li tabindex="0">
                                        <a href="https://statusinvest.com.br/fundos-de-investimento"
                                            title="fundos de investimentos" class="fs-3">
                                            Fundos de Investimentos
                                        </a>
                                    </li>
                                    <li class="divider" tabindex="-1"></li>
                                    <li tabindex="0">
                                        <a href="https://statusinvest.com.br/fiagros" class="" title="Fiagros">
                                            Fiagros
                                        </a>
                                    </li>
                                    <li class="divider" tabindex="-1"></li>
                                    <li tabindex="0">
                                        <a href="https://statusinvest.com.br/fias" class="novo" title="FIA">
                                            FIA
                                        </a>
                                    </li>
                                    <li class="divider" tabindex="-1"></li>
                                    <li tabindex="0">
                                        <a href="https://statusinvest.com.br/fidcs" class="novo" title="FIDC">
                                            FIDC
                                        </a>
                                    </li>
                                    <li class="divider" tabindex="-1"></li>
                                    <li tabindex="0">
                                        <a href="https://statusinvest.com.br/fips" class="novo" title="FIP">
                                            FIP
                                        </a>
                                    </li>
                                    <li class="divider" tabindex="-1"></li>
                                    <li tabindex="0">
                                        <a href="https://statusinvest.com.br/fiinfras" class="novo" title="FI-INFRA">
                                            FI-INFRA
                                        </a>
                                    </li>
                                </ul>

                            </li>
                            <li class="nav-item d-none d-lg-block">
                                <a class="nav-link " href="https://statusinvest.com.br/criptomoedas"
                                    title="Lista de criptomoedas">Crypto</a>
                            </li>
                            <li class="nav-item d-none d-lg-block">
                                <a class="nav-link" href="https://statusinvest.com.br/#tesouro-section"
                                    data-goto="#tesouro-section" title="Tesouro direto">TESOURO</a>
                            </li>
                            <li class="mr-0 user-login-view">
                                <div class="user-view " style="display:none">
                                    <div class="p-relative d-flex align-items-center justify-end">
                                        <a class="dropdown-trigger d-flex align-items-center pl-0 pr-0"
                                            href="https://statusinvest.com.br/acoes/itsa4#!"
                                            data-target="avatarDropdown" title="Ações">
                                            <span
                                                class="apresentacao truncate mr-1 d-none d-sm-inline-block d-lg-inline-block">
                                                <span class="fw-100">Olá, </span>
                                                <span class="name fw-700"></span>
                                            </span>
                                            <div class="avatar ml-md-3 ml-lg-0"></div>
                                            <i style="max-width:24px;" class="material-icons prefix">arrow_drop_down</i>
                                        </a>
                                        <ul id="avatarDropdown" class="menu-dropdown dropdown-content  w-small"
                                            tabindex="0">
                                            <li tabindex="0">
                                                <a href="https://statusinvest.com.br/cliente/inicio" title="">
                                                    <i class="material-icons">dashboard</i>
                                                    <span class="fw-700">DASHBOARD</span>
                                                </a>
                                            </li>
                                            <li class="divider" tabindex="-1"></li>
                                            <li tabindex="0">
                                                <a href="https://statusinvest.com.br/carteira/patrimonio" title="">
                                                    <i class="material-icons">account_balance_wallet</i>
                                                    <span class="fw-700">Carteira</span>
                                                </a>
                                            </li>
                                            <li class="divider" tabindex="-1"></li>
                                            <li tabindex="0">
                                                <a href="https://statusinvest.com.br/cliente/ativos-seguindo" title="">
                                                    <i class="material-icons">bookmark</i>ATIVOS QUE EU
                                                    <span class="fw-700">SIGO</span>
                                                </a>
                                            </li>
                                            <li class="divider" tabindex="-1"></li>
                                            <li tabindex="0">
                                                <a href="https://statusinvest.com.br/usuario/configuracao" title="">
                                                    <i class="material-icons">tune</i>Configurações
                                                </a>
                                            </li>
                                            <li class="divider" tabindex="-1"></li>
                                            <li tabindex="0">
                                                <a class="user-report-message" role="button" title="" data-name=""
                                                    data-email="">
                                                    <i class="material-icons">bug_report</i>Fale conosco
                                                </a>
                                            </li>
                                            <li class="divider" tabindex="-1"></li>
                                            <li tabindex="0">
                                                <a href="https://statusinvest.com.br/account/logout" title="">
                                                    <i class="material-icons">launch</i>Sair
                                                </a>
                                            </li>
                                        </ul>

                                    </div>
                                </div>
                                <div class="login-view p-relative justify-end align-items-center d-flex"
                                    style="visibility: visible;">
                                    <button type="button"
                                        class="btn btn-small btn-secondary waves-effect waves-light fw-900 btn-main-login pl-1 pr-1 pl-md-2 pr-md-2">
                                        <span style="max-width: 24px; overflow:hidden"
                                            class="d-block d-md-none material-icons">person</span>
                                        <span class="d-none d-md-block">ENTRAR</span>
                                    </button>
                                </div>
                            </li>
                            <li class="nav-item  d-block d-lg-none p-relative">
                                <a role="button" class="nav-link btn-main-menu btn-show-left-menu-initial"
                                    title="Abre o menu com oções de navegação">
                                    <i style="max-width: 24px;" class="material-icons prefix">menu</i>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <main role="main" id="main-2">
        <input id="stats" name="stats" type="hidden" value="/acao/set?ticker=itsa4">
        <header role="heading" aria-level="2" id="main-header">
            <div class="container container-home-ads-thin">
                <div class="advertising a_x_d_x_s-thin mb-3">
                    <a href="https://statusinvest.com.br/acoes/itsa4#" target="_blank"
                        rel="noopener noreferrer nofollow">
                        <div class="image">anúncio</div>
                    </a>
                </div>
            </div>
            <div class="container">
                <div class="flex-nowrap">
                    <div>
                        <h1 class="lh-4" title="ITSA4 - ITAUSA">ITSA4 - <small>ITAUSA</small></h1>
                        <div>
                            <ol class="main-breadcrumb" itemscope="" itemtype="https://schema.org/BreadcrumbList">
                                <li itemprop="itemListElement" itemscope="" itemtype="https://schema.org/ListItem">
                                    <a itemprop="item" href="http://statusinvest.com.br/">
                                        <span itemprop="name">HOME</span>
                                    </a>
                                    <meta itemprop="position" content="1">
                                </li>
                                <li itemprop="itemListElement" itemscope="" itemtype="https://schema.org/ListItem">
                                    <a itemprop="item" href="http://statusinvest.com.br/acoes">
                                        <span itemprop="name">Ações</span>
                                    </a>
                                    <meta itemprop="position" content="2">
                                </li>
                                <li itemprop="itemListElement" itemscope="" itemtype="https://schema.org/ListItem">
                                    <a itemprop="item" href="http://statusinvest.com.br/acoes/itsa4">
                                        <span itemprop="name">ITSA4</span>
                                    </a>
                                    <meta itemprop="position" content="3">
                                </li>
                            </ol>
                        </div>
                    </div>
                    <div class="header-action">
                        <div
                            class="container d-flex flex-column flex-sm-row justify-end align-items-start pl-0 pr-0 pr-md-2">
                            <div class="d-flex align-items-center" style="min-width: 70px;">
                                <div class="p-relative mr-1 mr-md-2">
                                    <div class="p-relative div-btn-resume-wallet">
                                        <div class="need-login-cover" data-position="top"
                                            data-tooltip="&lt;span&gt;Veja o &lt;b class=&#39;fw-900&#39;&gt;resumo do ativo na carteira&lt;/b&gt;&lt;/span&gt;">
                                        </div>
                                        <button id="btn-resume-wallet" type="button" data-category="1"
                                            data-categoryname="Ações" data-id="427" data-parentid="345"
                                            data-code="ITSA4" data-name="ITAUSA"
                                            class="btn-outline btn-flat btn btn-max-md-xsmall btn-active-follow btn-secondary fw-700 waves-effect"
                                            title="Resumo deste ativo na carteira" @*style="visibility:hidden" *@="">
                                            <i style="max-width: 18px;"
                                                class="material-icons">account_balance_wallet</i>
                                        </button>
                                    </div>
                                </div>
                                <div class="p-relative">
                                    <div class="p-relative">
                                        <button type="button" data-follow-manager="false" data-category="1"
                                            data-code="itsa4" data-id="427"
                                            class="btn-outline btn-flat btn btn-active-follow btn-secondary fw-700 waves-effect btn-max-md-xsmall"
                                            @*style="visibility:hidden" *@="">
                                            <span class="tx-seguindo">
                                                <i style="max-width: 18px;" class="material-icons ">bookmark</i>
                                            </span>
                                            <span class="tx-seguir">
                                                <i style="max-width: 18px;" class="material-icons ">bookmark_border</i>
                                            </span>
                                        </button>
                                        <a role="button" class="dropdown-trigger" title="Lista de seguindo"
                                            data-target="data-follow-manager-dropdown">
                                        </a>
                                        <ul id="data-follow-manager-dropdown" class="dropdown-content" tabindex="0">
                                        </ul>

                                    </div>
                                </div>
                            </div>
                            <input id="url-compare-1" name="url-compare-1" type="hidden"
                                value="/cliente/comparar-acoes/@">
                            <input id="url-compare-2" name="url-compare-2" type="hidden"
                                value="/cliente/comparar-fiis/@">
                            <button title="Compare ativos " type="button"
                                class="btn btn-max-md-xsmall btn-main-compare btn-main-green pl-1 pl-sm-2 pr-1 pl-sm-2 dropdown-trigger ml-sm-2 mt-1 mt-sm-0"
                                data-target="compare-dropdown">
                                Comparar
                            </button>
                            <ul id="compare-dropdown" class="dropdown-content" style="min-width:200px" data-code="ITSA4"
                                data-category="1" tabindex="0">
                                <li data-id="0" data-category="[]" tabindex="0"><a role="button">Compare
                                        rentabilidade</a></li>
                                <li data-id="1" data-category="[1]" tabindex="0"><a role="button">Compare Ações</a></li>
                            </ul>

                        </div>
                    </div>
                </div>
            </div>
        </header>
        <div class="tab-nav-resume">
            <div>
                <div class="container">
                    <ul class="tabs ignore transparent company-pages">
                        <li class="tab col s3" data-target=".tab-nav-resume">
                            <a tabindex="0" role="button" title="Detalhes do ticker ITSA4"
                                class="fw-900 active">ITSA4</a>
                        </li>
                        <li class="tab col s3" data-target="#company-section">
                            <a tabindex="0" role="button" class="has-icon" title="Detalhes da empresa &#39;ITAUSA&#39;">
                                <i style="max-width: 20px;" class="material-icons v-align-middle">business</i>
                                <span class="v-align-middle">Geral</span>
                            </a>
                        </li>
                        <li class="tab col s3" data-target="#contabil-section">
                            <a tabindex="0" role="button" class="has-icon"
                                title="Dados contábeis da empresa &#39;ITAUSA&#39;">
                                <i style="max-width: 20px;" class="material-icons v-align-middle">bar_chart</i>
                                <span class="v-align-middle">Contábil</span>
                            </a>
                        </li>
                        <li class="tab col s3" data-target="#document-section">
                            <a tabindex="0" role="button" class="has-icon"
                                title="Comunicados da empresa &#39;ITAUSA&#39;">
                                <i style="max-width: 20px;" class="material-icons v-align-middle">text_snippet</i>
                                <span class="v-align-middle">Comunicado</span>
                            </a>
                        </li>
                        <li class="tab col s3" data-target="#movements-section">
                            <a tabindex="0" role="button" class="has-icon"
                                title="Mais sobre a empresa &#39;ITAUSA&#39;">
                                <i style="max-width: 20px;" class="material-icons v-align-middle">add</i>
                                <span class="v-align-middle">Mais</span>
                            </a>
                        </li>
                        <li class="tab col s3">
                            <a title="Página de detalhes do ticker/papel &#39;ITSA3&#39;"
                                href="https://statusinvest.com.br/acoes/itsa3">ITSA3</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="container ">
            <div class="paper mt-4">
                <div class="pb-3 pb-md-5">
                    <div class="top-info has-special d-flex justify-between flex-wrap">
                        <div class="info special w-100 w-md-33 w-lg-20">
                            <div class="d-md-inline-block">
                                <div title="Valor atual do ativo">
                                    <h3 class="title m-0">Valor atual</h3>
                                    <span class="icon">R$</span>
                                    <strong class="value">8,48</strong>
                                </div>
                                <div class="w-lg-100">
                                    <span title="Variação do valor do ativo com base no dia anterior"
                                        class="sub-value  fs-4 fs-md-3">
                                        <span class="icon">
                                            <i style="max-width: 14px;" class="material-icons fs-3 ">arrow_upward</i>
                                        </span>
                                        <b class="v-align-middle">1,68%</b>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="info w-50 w-md-33 w-lg-20 border-md-0 border-lg-1">
                            <div>
                                <div title="Valor mínimo das últimas 52 semanas">
                                    <h3 class="title m-0">Min. 52 semanas</h3>
                                    <span class="icon">R$</span>
                                    <strong class="value">7,23</strong>
                                </div>
                                <div class="d-flex justify-between">
                                    <div class="" title="Valor mínimo do mês atual">
                                        <span class="sub-title">Min. mês</span>
                                        <span class="sub-value">R$ 8,15</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="info w-50 w-md-33 w-lg-20 border-md-0 border-lg-1">
                            <div>
                                <div title="Valor máximo das últimas 52 semanas">
                                    <h3 class="title m-0">Máx. 52 semanas</h3>
                                    <span class="icon">R$</span>
                                    <strong class="value">9,81</strong>
                                </div>
                                <div class="d-flex justify-between">
                                    <div class="" title="Valor máximo do mês atual">
                                        <span class="sub-title">Máx. mês</span>
                                        <span class="sub-value">R$ 8,48</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="info w-50 w-md-50 w-lg-20 ">
                            <div>
                                <div title="Dividend Yield com base nos últimos 12 meses">
                                    <div class="legend-tooltip">
                                        <h3 class="title m-0 d-inline-block v-align-middle mt-sm-1">Dividend Yield</h3>
                                        <i style="max-width: 17px;" data-position="top" class="material-icons help-icon tooltipped tooltipped-html
                                   lh-3 lh-sm-3_5 fs-sm-3_5" data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indicador utilizado para relacionar os proventos pagos por uma companhia e o preço atual de suas ações.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;Observação:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light&quot;&gt;
&lt;span class=&quot;fs-2 fw-900&quot;&gt;O Dividend Yield foi calculado com base no valor bruto dos proventos com a DATA COM entre 06/01/2022 e 06/01/2023. Amortizações não são consideradas no cálculo.&lt;/span&gt;
&lt;/small&gt;
&lt;/div&gt;
">
                                            help_outline

                                        </i>
                                    </div>
                                    <strong class="value">7,24</strong>
                                    <span class="icon">%</span>
                                </div>
                                <div class="d-flex justify-between">
                                    <div class="" title="Soma total de proventos distribuídos nos últimos 12 meses">
                                        <span class="sub-title">Últimos 12 meses</span>
                                        <span class="sub-value">R$ 0,6140</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="info w-50 w-md-50 w-lg-20">
                            <div>
                                <div title="Valorização no preço do ativo com base nos últimos 12 meses">
                                    <h3 class="title m-0">Valorização (12m)</h3>
                                    <span class="icon">
                                        <i style="max-width: 23px;"
                                            class="material-icons value-up-color">arrow_upward</i>
                                    </span>
                                    <strong class="value">6,13%</strong>
                                </div>
                                <div class="d-flex justify-between">
                                    <div class="" title="Valorização no preço do ativo com base no mês atual">
                                        <span class="sub-title">Mês atual</span>
                                        <span class="sub-value">
                                            <span class="icon">
                                                <i style="max-width: 14px;"
                                                    class="material-icons fs-3 value-up-color">arrow_upward</i>
                                            </span>
                                            <b class="v-align-middle">1,44%</b>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="pb-5">
                    <div class="card rounded pt-md-3 pb-3 show-empty-callback chart-width-full card-width-full-at-SM"
                        data-tab-chart="asset-price" data-start="0" data-ticker="ITSA4" data-tickertype="acao"
                        data-unitsign="R$">
                        <div class="d-flex justify-between align-items-center mb-sm-2  flex-wrap flex-xs-nowrap">
                            <h2 class="card-title  m-0">COTAÇÃO da ITSA4</h2>
                            <div
                                class="align-items-center d-flex justify-center w-100 w-xs-auto justify-xs-between mt-3 mt-xs-0">
                                <i style="max-width: 24px;" data-position="top"
                                    data-tooltip="Gráfico com taxa de atualização de &lt;b class=fw-900&gt;15 minutos&lt;/b&gt;. &lt;br /&gt; Ajustado por desdobramentos, grupamentos e bonificação."
                                    class="material-icons help-icon tooltipped mr-1">help_outline</i>
                                <div class="container-date-fixed ">
                                    <ul class="tabs transparent d-none d-lg-block">
                                        <li class="tab col s3">
                                            <a role="button" data-type="-1" title="" class="pl-2 pr-2"
                                                href="https://statusinvest.com.br/acoes/itsa4#asset-price--1">
                                                1 dia
                                            </a>
                                        </li>
                                        <li class="tab col s3">
                                            <a role="button" data-type="0" title="" class="pl-2 pr-2 active"
                                                href="https://statusinvest.com.br/acoes/itsa4#asset-price-0">
                                                5 dias
                                            </a>
                                        </li>
                                        <li class="tab col s3">
                                            <a role="button" data-type="1" title="Cotação do ativo nos últimos 30 dias"
                                                class="pl-2 pr-2"
                                                href="https://statusinvest.com.br/acoes/itsa4#asset-price-1">
                                                30 dias
                                            </a>
                                        </li>
                                        <li class="tab col s3">
                                            <a role="button" data-type="2" title="Cotação do ativo nos últimos 6 meses"
                                                class="pl-2 pr-2"
                                                href="https://statusinvest.com.br/acoes/itsa4#asset-price-2">
                                                6 meses
                                            </a>
                                        </li>
                                        <li class="tab col s3">
                                            <a role="button" data-type="3" title="Cotação do ativo nos últimos 12 meses"
                                                class="pl-2 pr-2"
                                                href="https://statusinvest.com.br/acoes/itsa4#asset-price-3">
                                                1 ano
                                            </a>
                                        </li>
                                        <li class="tab col s3">
                                            <a role="button" data-type="4" title="Cotação do ativo nos últimos 5 anos"
                                                class="pl-2 pr-2"
                                                href="https://statusinvest.com.br/acoes/itsa4#asset-price-4">
                                                5 anos
                                            </a>
                                        </li>
                                        <li class="indicator" style="left: 59px; right: 292px;"></li>
                                    </ul>
                                    <div class="d-block d-lg-none">

                                        <a class="bg-main-green-dark btn btn-xsmall dropdown-trigger  pl-1 pr-1"
                                            href="https://statusinvest.com.br/acoes/itsa4#!"
                                            data-target="dropdown-asset-price">
                                            <span>5 dias</span>
                                            <i style="max-width: 18px;" class="material-icons right">arrow_drop_down</i>
                                        </a>
                                        <ul id="dropdown-asset-price" class="dropdown-content" tabindex="0">
                                            <li title="" tabindex="0">
                                                <a role="button" data-type="-1">1 dia</a>
                                            </li>
                                            <li title="" tabindex="0">
                                                <a role="button" data-type="0">5 dias</a>
                                            </li>
                                            <li title="Cotação do ativo nos últimos 30 dias" tabindex="0">
                                                <a role="button" data-type="1">30 dias</a>
                                            </li>
                                            <li title="Cotação do ativo nos últimos 6 meses" tabindex="0">
                                                <a role="button" data-type="2">6 meses</a>
                                            </li>
                                            <li title="Cotação do ativo nos últimos 12 meses" tabindex="0">
                                                <a role="button" data-type="3">1 ano</a>
                                            </li>
                                            <li title="Cotação do ativo nos últimos 5 anos" tabindex="0">
                                                <a role="button" data-type="4">5 anos</a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="container-date-range w-90 w-md-50 mr-md-3" style="display:none;">
                                    <div class="d-flex align-items-center date-range mt-0 mb-0 ">
                                        <div title="Data de início da busca"
                                            class="input-field from input-date mt-0 mb-0">
                                            <input id="Start" type="text" name="Start"
                                                class="tx-datepicker mb-0 input-small" data-max-date="2023-01-06">
                                        </div>
                                        <span class="divisor text-center ml-1 mr-3 fs-2 fw-900">ATÉ</span>
                                        <div title="Data de fim da busca" class="input-field to mt-0 mb-0">
                                            <input id="End" type="text" name="End"
                                                class="tx-datepicker mb-0 input-small" data-max-date="2023-01-06">
                                        </div>
                                    </div>
                                </div>
                                <button type="button" data-position="top"
                                    data-tooltip="Selecione o &lt;b class=&#39;fw-900&#39;&gt;período&lt;/b&gt; que você &lt;b class=&#39;fw-900&#39;&gt;deseja&lt;/b&gt;!"
                                    class="tbn btn-small btn-secondary pl-1 pr-1 btn-range-date ml-1 tooltipped">
                                    <i style="max-width: 17px;width: 17px;"
                                        class="material-icons i-date-range">date_range</i>
                                    <i style="max-width: 17px;display:none"
                                        class="material-icons i-date-fixed">more_horiz</i>
                                </button>
                                <div class="p-relative">
                                    <div class="div-unitView-cover" data-position="top"
                                        data-tooltip="&lt;span&gt;Cotação em &lt;b class=&#39;fw-900&#39;&gt;diferentes moedas&lt;/b&gt;! &lt;small class=&#39;d-block&#39;&gt;disponível a partir do &lt;b&gt;plano TOURO&lt;/b&gt;&lt;/small&gt;&lt;/span&gt;">
                                    </div>
                                    <div class="bg-main-green-dark units-dropdown input-field si-dropdown multiple tooltipped mt-0 mb-0 mr-0 ml-1 btn pl-1 pr-0"
                                        data-position="top"
                                        data-tooltip="&lt;span&gt;Cotação em &lt;b class=&#39;fw-900&#39;&gt;diferentes moedas&lt;/b&gt;! &lt;small class=&#39;d-block&#39;&gt;disponível a partir do &lt;b&gt;plano TOURO&lt;/b&gt;&lt;/small&gt;&lt;/span&gt;">
                                        <div class="select-wrapper"><input class="select-dropdown dropdown-trigger"
                                                type="text" readonly="true"
                                                data-target="select-options-b2ab620b-76f7-6388-e0ac-33b83f7be91a"
                                                aria-label="null">
                                            <ul id="select-options-b2ab620b-76f7-6388-e0ac-33b83f7be91a"
                                                class="dropdown-content select-dropdown multiple-select-dropdown"
                                                tabindex="0">
                                                <li id="select-options-b2ab620b-76f7-6388-e0ac-33b83f7be91a0"
                                                    tabindex="0" class="selected">
                                                    <span><label><input
                                                                type="checkbox" "=""><span>R$</span></label></span></li><li id="
                                                                select-options-b2ab620b-76f7-6388-e0ac-33b83f7be91a1"
                                                                tabindex="0"><span><label><input
                                                                        type="checkbox" "=""><span>US$</span></label></span></li><li id="
                                                                        select-options-b2ab620b-76f7-6388-e0ac-33b83f7be91a2"
                                                                        tabindex="0"><span><label><input
                                                                                type="checkbox" "=""><span>EUR</span></label></span></li></ul><svg class="
                                                                                caret" height="24" viewBox="0 0 24 24"
                                                                                width="24"
                                                                                xmlns="http://www.w3.org/2000/svg">
                                                                            <path d="M7 10l5 5 5-5z"></path>
                                                                            <path d="M0 0h24v24H0z" fill="none"></path>
                                                                            </svg><select id="grid-units-view"
                                                                                multiple="" data-formselect=""
                                                                                data-selected="R$" class=""
                                                                                tabindex="-1">
                                                                                <option value="1" data-sign="R$">R$
                                                                                </option>
                                                                                <option value="2" data-sign="$">US$
                                                                                </option>
                                                                                <option value="3" data-sign="€">EUR
                                                                                </option>
                                                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="chart-by-fixed">
                            <div id="asset-price--1" tabindex="0" class="chart-container" style="display:none ">
                                <div class="chart-selected-container" style="display:none">
                                    <div class="chart-selected-resume card p-1">
                                        <div class="d-flex align-items-center justify-between">
                                            <div class="price d-flex align-items-center fw-100">
                                                <span class="fw-100 fs-3 symbol">R$</span>
                                                <b class="v-align-middle fw-900"></b>
                                            </div>
                                            <div class="variation d-flex align-items-center fw-100  ml-lg-1">
                                                <i class="material-icons">arrow_upward</i>
                                                <b class="v-align-middle fw-700"></b>
                                                <span>%</span>
                                            </div>
                                        </div>
                                        <div class="period d-flex align-items-center justify-center">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                    <div class="chart-selected-array-resume card p-1">
                                        <div class="list">
                                        </div>
                                        <div class="period d-flex align-items-center justify-center">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-chart-container md">
                                    <div class="chart "></div>
                                </div>
                            </div>
                            <div id="asset-price-0" tabindex="0" class="chart-container active" style=" ">
                                <div class="chart-selected-container" style="display:none">
                                    <div class="chart-selected-resume card p-1">
                                        <div class="d-flex align-items-center justify-between">
                                            <div class="price d-flex align-items-center fw-100">
                                                <span class="fw-100 fs-3 symbol">R$</span>
                                                <b class="v-align-middle fw-900"></b>
                                            </div>
                                            <div class="variation d-flex align-items-center fw-100  ml-lg-1">
                                                <i class="material-icons">arrow_upward</i>
                                                <b class="v-align-middle fw-700"></b>
                                                <span>%</span>
                                            </div>
                                        </div>
                                        <div class="period d-flex align-items-center justify-center date time">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                    <div class="chart-selected-array-resume card p-1">
                                        <div class="list">
                                        </div>
                                        <div class="period d-flex align-items-center justify-center date time">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-chart-container md">
                                    <div class="chart"
                                        style="-webkit-tap-highlight-color: transparent; user-select: none; position: relative;"
                                        _echarts_instance_="ec_1673049470591">
                                        <div
                                            style="position: relative; overflow: hidden; width: 1081px; height: 320px; padding: 0px; margin: 0px; border-width: 0px; cursor: default;">
                                            <canvas data-zr-dom-id="zr_0" width="1081" height="320"
                                                style="position: absolute; left: 0px; top: 0px; width: 1081px; height: 320px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;"></canvas>
                                        </div>
                                        <div
                                            style="position: absolute; display: none; border-style: solid; white-space: nowrap; z-index: 9999999; transition: left 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s, top 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s; background-color: rgba(50, 50, 50, 0.7); border-width: 0px; border-color: rgb(51, 51, 51); border-radius: 4px; color: rgb(255, 255, 255); font: 14px / 21px &quot;Microsoft YaHei&quot;; padding: 5px; left: 144px; top: 249px; pointer-events: none;">
                                            <span style="display:block;font-weight: 900;">R$ 8,33</span><span
                                                style=""><b
                                                    style="display:block;font-size:12px;line-height:11px;">10:30</b><span
                                                    style="display:block;font-size:11px;line-height:11px;">02/01/23</span></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="asset-price-1" tabindex="0" class="chart-container" style="display:none ">
                                <div class="chart-selected-container" style="display:none">
                                    <div class="chart-selected-resume card p-1">
                                        <div class="d-flex align-items-center justify-between">
                                            <div class="price d-flex align-items-center fw-100">
                                                <span class="fw-100 fs-3 symbol">R$</span>
                                                <b class="v-align-middle fw-900"></b>
                                            </div>
                                            <div class="variation d-flex align-items-center fw-100  ml-lg-1">
                                                <i class="material-icons">arrow_upward</i>
                                                <b class="v-align-middle fw-700"></b>
                                                <span>%</span>
                                            </div>
                                        </div>
                                        <div class="period d-flex align-items-center justify-center">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                    <div class="chart-selected-array-resume card p-1">
                                        <div class="list">
                                        </div>
                                        <div class="period d-flex align-items-center justify-center">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-chart-container md">
                                    <div class="chart "></div>
                                </div>
                            </div>
                            <div id="asset-price-2" tabindex="0" class="chart-container" style="display:none ">
                                <div class="chart-selected-container" style="display:none">
                                    <div class="chart-selected-resume card p-1">
                                        <div class="d-flex align-items-center justify-between">
                                            <div class="price d-flex align-items-center fw-100">
                                                <span class="fw-100 fs-3 symbol">R$</span>
                                                <b class="v-align-middle fw-900"></b>
                                            </div>
                                            <div class="variation d-flex align-items-center fw-100  ml-lg-1">
                                                <i class="material-icons">arrow_upward</i>
                                                <b class="v-align-middle fw-700"></b>
                                                <span>%</span>
                                            </div>
                                        </div>
                                        <div class="period d-flex align-items-center justify-center">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                    <div class="chart-selected-array-resume card p-1">
                                        <div class="list">
                                        </div>
                                        <div class="period d-flex align-items-center justify-center">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-chart-container md">
                                    <div class="chart "></div>
                                </div>
                            </div>
                            <div id="asset-price-3" tabindex="0" class="chart-container" style="display:none ">
                                <div class="chart-selected-container" style="display:none">
                                    <div class="chart-selected-resume card p-1">
                                        <div class="d-flex align-items-center justify-between">
                                            <div class="price d-flex align-items-center fw-100">
                                                <span class="fw-100 fs-3 symbol">R$</span>
                                                <b class="v-align-middle fw-900"></b>
                                            </div>
                                            <div class="variation d-flex align-items-center fw-100  ml-lg-1">
                                                <i class="material-icons">arrow_upward</i>
                                                <b class="v-align-middle fw-700"></b>
                                                <span>%</span>
                                            </div>
                                        </div>
                                        <div class="period d-flex align-items-center justify-center">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                    <div class="chart-selected-array-resume card p-1">
                                        <div class="list">
                                        </div>
                                        <div class="period d-flex align-items-center justify-center">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-chart-container md">
                                    <div class="chart "></div>
                                </div>
                            </div>
                            <div id="asset-price-4" tabindex="0" class="chart-container" style="display:none ">
                                <div class="chart-selected-container" style="display:none">
                                    <div class="chart-selected-resume card p-1">
                                        <div class="d-flex align-items-center justify-between">
                                            <div class="price d-flex align-items-center fw-100">
                                                <span class="fw-100 fs-3 symbol">R$</span>
                                                <b class="v-align-middle fw-900"></b>
                                            </div>
                                            <div class="variation d-flex align-items-center fw-100  ml-lg-1">
                                                <i class="material-icons">arrow_upward</i>
                                                <b class="v-align-middle fw-700"></b>
                                                <span>%</span>
                                            </div>
                                        </div>
                                        <div class="period d-flex align-items-center justify-center">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                    <div class="chart-selected-array-resume card p-1">
                                        <div class="list">
                                        </div>
                                        <div class="period d-flex align-items-center justify-center">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-chart-container md">
                                    <div class="chart "></div>
                                </div>
                            </div>
                        </div>
                        <div class="chart-by-range" style="display:none">
                            <div id="asset-price-range" tabindex="0" class="chart-container">
                                <div class="chart-selected-container" style="display:none">
                                    <div class="chart-selected-resume card p-1">
                                        <div class="d-flex align-items-center justify-between">
                                            <div class="price d-flex align-items-center fw-100">
                                                <span class="fw-100 fs-3 symbol">R$</span>
                                                <b class="v-align-middle fw-900"></b>
                                            </div>
                                            <div class="variation d-flex align-items-center fw-100  ml-lg-1">
                                                <i class="material-icons">arrow_upward</i>
                                                <b class="v-align-middle fw-700"></b>
                                                <span>%</span>
                                            </div>
                                        </div>
                                        <div class="period d-flex align-items-center justify-center">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                    <div class="chart-selected-array-resume card p-1">
                                        <div class="list">
                                        </div>
                                        <div class="period d-flex align-items-center justify-center">
                                            <span class="date-start"></span>&nbsp;-&nbsp;<span class="date-end"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-chart-container md">
                                    <div class="chart"></div>
                                </div>
                            </div>
                        </div>
                        <span class="graph-empty fs-3 fw-100 grey-text text-center text-darken-1 uppercase mt-4"
                            style="display:none">
                            <span class="d-block d-sm-inline-block">Não há dados de cotação </span> neste período</span>

                        <div class="switch pt-1 pb-0">
                            <label role="switch" aria-checked="false"
                                class="fw-100 fs-3 grey-text text-darken-1 d-flex justify-start align-items-center">
                                <input type="checkbox" name="set-follow-line">
                                <span class="v-align-middle lever m-0"></span>
                                &nbsp;
                                &nbsp;
                                <span class="v-align-middle d-block fs-3 lh-3">
                                    LINHAS DA LISTA DE SEGUINDO
                                </span>
                                &nbsp;
                                <span class="d-block fs-3 lh-3">
                                    <i style="max-width: 14px; " data-position="top"
                                        data-tooltip="Crie linhas com um valor alvo na tela de &#39;ativos que eu sigo&#39; e acompanhe elas aqui no gráfico de cotação"
                                        class="material-icons help-icon tooltipped mr-1 lh-3 fs-3">help_outline</i>
                                </span>
                            </label>
                        </div>
                    </div>
                </div>
                <div class="mb-7 p-2 p-xs-3 cardFutureColor">
                    <div class=" mb-3">
                        <div class="d-flex flex-wrap justify-start align-items-center fs-4">
                            <div class="ml-1 forecast-name futureColor-darken">
                                <span class="fw-600">MÓDULO</span> <strong class="fw-900">FORECAST</strong>
                            </div>
                            <span class="ml-0 ml-md-2 fw-100 fs-3 lh-3_5 uppercase">consenso e estimativas dos
                                principais analistas do
                                mercado global</span>
                        </div>
                    </div>
                    <div data-feature="consensus-not-access" class="future-not-access consensus-not-access " style="">
                    </div>
                    <div class="d-lg-flex justify-between align-items-start">
                        <div class="w-100 w-lg-45 mr-lg-1 mb-3 mb-lg-0">
                            <div data-future="priceTarget"
                                data-model="{&quot;Name&quot;:&quot;priceTarget&quot;,&quot;Script&quot;:&quot;/js/components/futureData/_priceTarget.min.js?v=2.0.698.ERFTJH&quot;,&quot;AddOn&quot;:0,&quot;Strucuture&quot;:true,&quot;AsCard&quot;:true,&quot;Css&quot;:&quot;&quot;,&quot;Config&quot;:{&quot;categoryId&quot;:1,&quot;code&quot;:&quot;ITSA4&quot;,&quot;showHistory&quot;:false},&quot;AddOn_F&quot;:&quot;forecast-brasil&quot;}"
                                data-config="{&quot;categoryId&quot;:1,&quot;code&quot;:&quot;ITSA4&quot;,&quot;showHistory&quot;:false}"
                                data-addon="Brasil" data-addonf="forecast-brasil" class="card p-3 show-load "
                                data-src="/js/components/futureData/_priceTarget.min.js?v=2.0.698.ERFTJH"
                                style="display: none;">
                                <div class="card-main-load load-container"></div>
                                <div style="display:none" class="no-forecast forecast-brasil">
                                    <div class="d-flex flex-column justify-between">
                                        <div class="d-flex flex-column justify-center mb-3">
                                            <span class="d-block fw-600 black-text fs-3 lh-3">
                                                O <strong class="fw-900">FORECAST BRASIL</strong> NÃO ESTÁ ATIVO
                                            </span>
                                            <span class="d-block uppercase fs-2 fs-xs-3 lh-3_5 mt-1">
                                                Tenha para o mercado brasileiro todas as informações que já tem no
                                                forecast EUA
                                            </span>
                                        </div>
                                        <div>
                                            <a href="https://lp.statusinvest.com.br/planos/modulo/forecast"
                                                class="btn btn-white d-inline-block text-align-left">
                                                CONTRATAR
                                                <strong class="">
                                                    FORECAST <strong class="fw-700">BRASIL</strong>
                                                </strong>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                                <div style="display:none" class="no-forecast forecast-usa">
                                    <div class="d-flex flex-column justify-between">
                                        <div class="d-flex flex-column justify-center mb-3">
                                            <span class="d-block fw-600 black-text fs-3 lh-3">
                                                O <strong class="fw-900">FORECAST EUA</strong> NÃO ESTÁ ATIVO
                                            </span>
                                            <span class="d-block uppercase fs-2 fs-xs-3 lh-3_5 mt-1">
                                                Tenha para o mercado americano todas as informações que já tem no
                                                forecast Brasil
                                            </span>
                                        </div>
                                        <div>
                                            <a href="https://lp.statusinvest.com.br/planos/modulo/forecast"
                                                class="btn btn-white d-inline-block text-align-left">
                                                CONTRATAR
                                                <strong class="">
                                                    FORECAST <strong class="fw-700">EUA</strong>
                                                </strong>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="w-100 w-lg-55 ml-lg-1">
                            <div data-future="consensusAnalystRating"
                                data-model="{&quot;Name&quot;:&quot;consensusAnalystRating&quot;,&quot;Script&quot;:&quot;/js/components/futureData/_consensusAnalystRating.min.js?v=2.0.698.ERFTJH&quot;,&quot;AddOn&quot;:0,&quot;Strucuture&quot;:true,&quot;AsCard&quot;:true,&quot;Css&quot;:&quot;div-ratings-base-card&quot;,&quot;Config&quot;:{&quot;categoryId&quot;:1,&quot;code&quot;:&quot;ITSA4&quot;,&quot;showHistory&quot;:true},&quot;AddOn_F&quot;:&quot;forecast-brasil&quot;}"
                                data-config="{&quot;categoryId&quot;:1,&quot;code&quot;:&quot;ITSA4&quot;,&quot;showHistory&quot;:true}"
                                data-addon="Brasil" data-addonf="forecast-brasil"
                                class="card p-3 show-load div-ratings-base-card"
                                data-src="/js/components/futureData/_consensusAnalystRating.min.js?v=2.0.698.ERFTJH"
                                style="display: none;">
                                <div class="card-main-load load-container"></div>
                                <div style="display:none" class="no-forecast forecast-brasil">
                                    <div class="d-flex flex-column justify-between">
                                        <div class="d-flex flex-column justify-center mb-3">
                                            <span class="d-block fw-600 black-text fs-3 lh-3">
                                                O <strong class="fw-900">FORECAST BRASIL</strong> NÃO ESTÁ ATIVO
                                            </span>
                                            <span class="d-block uppercase fs-2 fs-xs-3 lh-3_5 mt-1">
                                                Tenha para o mercado brasileiro todas as informações que já tem no
                                                forecast EUA
                                            </span>
                                        </div>
                                        <div>
                                            <a href="https://lp.statusinvest.com.br/planos/modulo/forecast"
                                                class="btn btn-white d-inline-block text-align-left">
                                                CONTRATAR
                                                <strong class="">
                                                    FORECAST <strong class="fw-700">BRASIL</strong>
                                                </strong>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                                <div style="display:none" class="no-forecast forecast-usa">
                                    <div class="d-flex flex-column justify-between">
                                        <div class="d-flex flex-column justify-center mb-3">
                                            <span class="d-block fw-600 black-text fs-3 lh-3">
                                                O <strong class="fw-900">FORECAST EUA</strong> NÃO ESTÁ ATIVO
                                            </span>
                                            <span class="d-block uppercase fs-2 fs-xs-3 lh-3_5 mt-1">
                                                Tenha para o mercado americano todas as informações que já tem no
                                                forecast Brasil
                                            </span>
                                        </div>
                                        <div>
                                            <a href="https://lp.statusinvest.com.br/planos/modulo/forecast"
                                                class="btn btn-white d-inline-block text-align-left">
                                                CONTRATAR
                                                <strong class="">
                                                    FORECAST <strong class="fw-700">EUA</strong>
                                                </strong>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex align-items-center justify-end white-text pt-2 pt-sm-1 ">
                        <div class="fs-2 lh-2 fw-600 futureColor-darken">POR&nbsp;</div>
                        <div class="lh-2">
                            <img width="54" height="12" alt="Logo da FACTSET"
                                src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/factset.png">
                        </div>
                    </div>
                </div>
                <div data-volatility="" data-ativo="ITSA4" data-ativo-volatility="24,571289376319" data-indice="IBOV"
                    data-indice-volatility="21,287038718661">
                    <div class="card mb-5 pb-4">
                        <div class="card-title mb-2 d-flex align-items-center">
                            <i style="max-width:21px"
                                class="material-icons v-align-middle text-main-secondary d-inline-block fs-4">local_fire_department</i>
                            <div class="d-flex align-items-center">
                                <h3 class="d-inline-block m-0 text-main-green">
                                    <span class="v-align-middle">Volatilidade histórica <span
                                            class="d-none d-xs-inline-block"> da
                                            ITSA4</span></span>
                                </h3>
                                <i data-position="top" style="max-width:24px"
                                    class="material-icons help-icon tooltipped tooltipped-html fs-3 fs-sm-4 lh-3 lh-sm-4 ml-1"
                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
A volatilidade é a intensidade e frequência que acontecem as movimentações do valor do ativo, dentro de um período de tempo.
&lt;br&gt;
&lt;br&gt;
Calculamos com base na variação dos preços dos últimos 12 meses
&lt;/div&gt;
">
                                    help_outline

                                </i>
                            </div>
                        </div>
                        <div class="chart" style="min-height:40px">
                            <div class="d-flex justify-between align-items-center chart-inline-gauge good-bad">
                                <div class="icon left"> <i style="max-width:28px" class="material-icons">hotel</i>
                                    <b>20.96</b>
                                </div>
                                <div class="chart-content w-100 ">
                                    <div class="line"></div>
                                    <div class="item "
                                        style="margin-left:91.66666666666667%;background-color:rgb(186,30,17);border-color:rgb(186,30,17);"
                                        title="24.57"> <strong>ITSA4</strong> </div>
                                    <div class="item  top"
                                        style="margin-left:8.333333333333318%;background-color:rgb(19,117,100);border-color:rgb(19,117,100);"
                                        title="21.29"> <strong>IBOV</strong> </div>
                                </div>
                                <div class="icon right"> <i style="max-width:28px"
                                        class="material-icons">local_fire_department</i>
                                    <b>24.90</b>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="">
                    <div class="card rounded text-main-green-dark">
                        <div
                            class="top-info top-info-1 top-info-sm-2 top-info-md-3 top-info-xl-n sm d-flex justify-between">
                            <div class="info ">
                                <div>
                                    <div title="Tipo do ativo">
                                        <h3 class="title m-0 mb-1">Tipo</h3>
                                        <strong class="value">PN</strong>
                                    </div>
                                </div>
                            </div>
                            <div class="info">
                                <div>
                                    <div>
                                        <span class="sub-value legend-tooltip pr-2 d-inline-block">
                                            <span class="d-inline-block">Tag Along</span>
                                            <i style="max-width:21px" data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html "
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O Tag Along é uma proteção legal concedida aos acionistas ordinários minoritários em operações de venda do controle da sociedade.
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </span>
                                        <div>
                                            <strong class="value">80 %</strong>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="info">
                                <div>
                                    <div>
                                        <span class="sub-value legend-tooltip pr-2 d-inline-block">
                                            <span class=" d-lg-none">Liq. méd. diária</span>
                                            <span class="d-none d-lg-inline-block">Liquidez média diária</span>
                                            <i style="max-width:21px" data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html "
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Média dos últimos 30 dias
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </span>
                                        <div>
                                            <span class="icon">R$</span>
                                            <strong class="value">200.476.981,72</strong>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="info">
                                <div>
                                    <a href="https://statusinvest.com.br/indices/ibovespa"
                                        title="Ir para o detalhe do índice"
                                        class="see-more text-left text-main-green-dark">
                                        <div>
                                            <h3 class="title m-0 d-none d-md-block d-lg-none">PART. <strong
                                                    class="fw-700">IBOV</strong></h3>
                                            <h3 class="title m-0 d-block d-md-none d-lg-block">PARTICIPAÇÃO NO <strong
                                                    class="fw-700">IBOV</strong></h3>
                                            <div class="d-flex align-items-center ">
                                                <strong class="value">2,288</strong>
                                                <span class="icon">%</span>
                                                <i style="max-width:24px" class="ml-3 material-icons">arrow_forward</i>
                                            </div>
                                        </div>
                                    </a>
                                </div>
                            </div>
                            <div class=" info w-sm-100 w-md-auto w-xl-100">
                                <div>
                                    <a href="https://statusinvest.com.br/opcoes/itsa4"
                                        title="Ir para a lista de opções do ticker &#39;ITSA4&#39;"
                                        class="see-more text-left text-main-green-dark">
                                        <div>
                                            <h3 class="title m-0 d-block">MERCADO DE <strong
                                                    class="fw-700">OPÇÕES</strong></h3>
                                            <div class="d-flex align-items-center ">
                                                <strong class="value mr-1">190</strong>
                                                <span class="icon">em aberto</span>
                                                <i style="max-width:24px" class="ml-3 material-icons">arrow_forward</i>
                                            </div>
                                        </div>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="container advertising ads-lazy-group
                pl-sm-0 pr-sm-0
                pt-5
         ">
                    <div class="a_x_d_x_s-banner
                    pt-1 pb-1 pl-0 pl-md-1 pr-0 pr-md-1
             " style="overflow: hidden;" data-id="banner-1">
                        <a role="none" target="_blank" rel="noopener noreferrer nofollow"
                            href="https://lp.statusinvest.com.br/planos/">
                            <div class="image">anúncio</div>
                        </a>
                    </div>
                </div>
                <div class="pb-5 pt-5" id="indicators-section" data-ticker="ITSA4" data-category="1"
                    data-parentid="345">
                    <div class="d-lg-flex align-items-center justify-between mb-3">
                        <div class="d-flex align-items-center">
                            <h2 title="Indicadores de mercado e os indicadores financeiros mais importantes em uma análise fundamentalista"
                                class="d-inline-block fs-4 fs-sm-5 lh-4 lh-sm-5  fw-900 text-main m-0 mr-1 mb-3 mb-lg-0">
                                <span class="v-align-middle">INDICADORES DA ITSA4</span>
                            </h2>
                            <i data-position="top" style="max-width: 14px;"
                                class="v-align-middle material-icons help-icon tooltipped tooltipped-html fs-3"
                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Todos dados financeiros são das demonstrações consolidadas e não individuais, calculados com base nos dados dos últimos 4 trimestres, e no último balanço divulgado.
&lt;/div&gt;
">
                                help_outline

                            </i>
                        </div>
                        <div
                            class="btn-toggle btn-indicator-view-type d-flex justify-center justify-lg-end mb-4 mb-lg-0 p-relative">
                            <button title="Hoje" type="button" data-value="0"
                                class="pl-1 pr-1 btn-small btn btn-main btn-flat active">
                                <div class="d-flex align-items-center">
                                    <span class="fs-3 lh-3">HOJE</span> <i style="max-width: 16px;"
                                        class="material-icons  ml-1">apps</i>
                                </div>
                            </button>
                            <button title="Histórico do ativo" type="button" data-value="1"
                                class="pl-1 pr-1 btn-small btn btn-main btn-flat">
                                <div class="d-flex align-items-center">
                                    <span class="fs-2 fs-md-3">HISTÓRICO </span> <i style="max-width: 16px;"
                                        class="material-icons ml-1">view_week</i>
                                </div>
                            </button>
                            <button title="Média do mercado" type="button" data-value="2"
                                class="pl-1 pr-1 btn-small btn btn-main btn-flat" disabled="disabled">
                                <div class="d-flex align-items-center">
                                    <span class="d-block lh-2 fs-2  fs-md-3">
                                        MÉDIA MERCADO
                                    </span>
                                    <i style="max-width: 16px;" class="material-icons ml-1">layers</i>
                                </div>
                            </button>
                            <div class="need-login-cover avg" data-position="top"
                                data-tooltip="&lt;span&gt;Veja a média do &lt;b class=&#39;fw-900&#39;&gt;setor, subsetor e segmento&lt;/b&gt; desta empresa&lt;/span&gt;">
                            </div>
                        </div>
                    </div>
                    <div class="indicator-today-container">
                        <div class="d-flex flex-wrap">
                            <div data-group="0" class="indicators w-100">
                                <strong class="d-block uppercase">Indicadores de Valuation</strong>
                                <div class="d-flex flex-wrap align-items-center justify-start">
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="Indicador utilizado para relacionar os proventos pagos por uma companhia e o preço atual de suas ações.">
                                            <a href="https://statusinvest.com.br/termos/d/dividend-yield"
                                                title="Artigo detalhando D.Y" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">D.Y</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">7,24%</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="dy" data-name="D.Y" data-prefix="" data-suffix="%"
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indicador utilizado para relacionar os proventos pagos por uma companhia e o preço atual de suas ações.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Dividendos pagos no período / Preço ação
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="Dá uma ideia do quanto o mercado está disposto a pagar pelos lucros da empresa.">
                                            <a href="https://statusinvest.com.br/termos/p/p-l"
                                                title="Artigo detalhando P/L" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/L</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">5,69</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="p_l" data-name="P/L" data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Dá uma ideia do quanto o mercado está disposto a pagar pelos lucros da empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / Lucro por ação (LPA)
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="O PEG Ratio é uma métrica de avaliação para determinar o trade-off relativo entre o preço de uma ação, o lucro gerado por ação e o crescimento esperado da empresa. Para o cálculo, assumimos o LPA Atual baseado nos últimos 4 trimestres, e o LPA Anterior os 4 trimestres anteriores a estes.">
                                            <h3 class="title m-0 mr-1 uppercase">PEG Ratio</h3>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">0,25</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="peg_Ratio" data-name="PEG Ratio" data-prefix=""
                                                        data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O PEG Ratio é uma métrica de avaliação para determinar o trade-off relativo entre o preço de uma ação, o lucro gerado por ação e o crescimento esperado da empresa. Para o cálculo, assumimos o LPA Atual baseado nos últimos 4 trimestres, e o LPA Anterior os 4 trimestres anteriores a estes.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
(P/L) / [(LPA Atual / LPA Anterior) - 1]
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="Facilita a análise e comparação da relação do preço de negociação de um ativo com seu VPA.">
                                            <a href="https://statusinvest.com.br/termos/p/p-vp"
                                                title="Artigo detalhando P/VP" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/VP</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">1,16</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="p_vp" data-name="P/VP" data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Facilita a análise e comparação da relação do preço de negociação de um ativo com seu VPA.
 &lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / Valor patrimonial por ação (VPA)
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="O EV (Enterprise Value ou Valor da Firma), indica quanto custaria para comprar todos os ativos da companhia, descontando o caixa. Este indicador mostra quanto tempo levaria para o valor calculado no EBITDA pagar o investimento feito para compra-la.">
                                            <a href="https://statusinvest.com.br/termos/e/ev-ebitda"
                                                title="Artigo detalhando EV/EBITDA" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">EV/EBITDA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">5,79</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="ev_ebitda" data-name="EV/EBITDA" data-prefix=""
                                                        data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O EV (Enterprise Value ou Valor da Firma), indica quanto custaria para comprar todos os ativos da companhia, descontando o caixa. Este indicador mostra quanto tempo levaria para o valor calculado no EBITDA pagar o investimento feito para compra-la.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
EV / EBITDA
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="O EV (Enterprise Value ou Valor da Firma), indica quanto custaria para comprar todos os ativos da companhia, descontando o caixa. Este indicador mostra quanto tempo levaria para o valor calculado no EBIT pagar o investimento feito para compra-la.">
                                            <a href="https://statusinvest.com.br/termos/e/ev-ebit"
                                                title="Artigo detalhando EV/EBIT" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">EV/EBIT</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">6,11</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="ev_ebit" data-name="EV/EBIT" data-prefix=""
                                                        data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O EV (Enterprise Value ou Valor da Firma), indica quanto custaria para comprar todos os ativos da companhia, descontando o caixa. Este indicador mostra quanto tempo levaria para o valor calculado no EBIT pagar o investimento feito para compra-la.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
EV / EBIT
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="O EBITDA permite conhecer quanto a companhia está gerando de caixa com base exclusivamente em suas atividades operacionais, desconsiderando os impactos financeiros e dos impostos.">
                                            <a href="https://statusinvest.com.br/termos/p/p-ebitda"
                                                title="Artigo detalhando P/EBITDA" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/EBITDA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">5,23</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="p_ebita" data-name="P/EBITDA" data-prefix=""
                                                        data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O EBITDA permite conhecer quanto a companhia está gerando de caixa com base exclusivamente em suas atividades operacionais, desconsiderando os impactos financeiros e dos impostos.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / EBITDA
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="Indica qual é o preço da ação em relação ao seu resultado EBIT. O EBIT pode ser considerado uma aproximação do lucro operacional da companhia.">
                                            <a href="https://statusinvest.com.br/termos/p/p-ebit"
                                                title="Artigo detalhando P/EBIT" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/EBIT</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">5,52</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="p_ebit" data-name="P/EBIT" data-prefix=""
                                                        data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica qual é o preço da ação em relação ao seu resultado EBIT. O EBIT pode ser considerado uma aproximação do lucro operacional da companhia.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / EBIT
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div title="Indica qual o valor patrimonial de uma ação.">
                                            <a href="https://statusinvest.com.br/termos/v/vpa"
                                                title="Artigo detalhando VPA" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">VPA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">7,30</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="vpa" data-name="VPA" data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica qual o valor patrimonial de uma ação.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Patrimônio líquido / Nº de ações
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div title="Preço da ação dividido pelos Ativos totais por ação.">
                                            <a href="https://statusinvest.com.br/termos/p/p-ativo"
                                                title="Artigo detalhando P/Ativo" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/Ativo</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">0,86</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="p_ativo" data-name="P/Ativo" data-prefix=""
                                                        data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Preço da ação dividido pelos Ativos totais por ação.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / Ativos
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="Indicar se a empresa é ou não lucrativa. Se este número estiver negativo, a empresa está com margens baixas, acumulando prejuízos.">
                                            <a href="https://statusinvest.com.br/termos/l/lpa"
                                                title="Artigo detalhando LPA" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">LPA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">1,49</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="lpa" data-name="LPA" data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indicar se a empresa é ou não lucrativa. Se este número estiver negativo, a empresa está com margens baixas, acumulando prejuízos.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Lucro líquido / Nº de ações
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="Valor de mercado da empresa dividido pela receita operacional líquida ou preço da ação dividido pela receita líquida por ação">
                                            <a href="https://statusinvest.com.br/termos/p/psr"
                                                title="Artigo detalhando P/SR" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/SR</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">9,39</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="p_sr" data-name="P/SR" data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Valor de mercado da empresa dividido pela receita operacional líquida ou preço da ação dividido pela receita líquida por ação
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / Receita líquida por ação
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="Preço da ação dividido pelo capital de giro por ação. Capital de Giro é o Ativo Circulante menos Passivo Circulante.">
                                            <a href="https://statusinvest.com.br/termos/p/p-capital-giro"
                                                title="Artigo detalhando P/Cap. Giro" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/Cap. Giro</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">25,85</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="p_capitlgiro" data-name="P/Cap. Giro" data-prefix=""
                                                        data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Preço da ação dividido pelo capital de giro por ação. Capital de Giro é o Ativo Circulante menos Passivo Circulante.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / (Ativo circulante - Passivo circulante)
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="É a diferença entre o ativo circulante e o passivo que constam do balanço patrimonial de uma empresa.">
                                            <a href="https://statusinvest.com.br/termos/p/p-ativo-circulante-liquido"
                                                title="Artigo detalhando P/Ativo Circ. Liq." target="_blank"
                                                rel="noopener" class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/Ativo Circ. Liq.</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">-0,97</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="p_ativocirculante" data-name="P/Ativo Circ. Liq."
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
É a diferença entre o ativo circulante e o passivo que constam do balanço patrimonial de uma empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / Ativos Circulantes Líquidos por ação
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div data-group="2" class="indicators w-100">
                                <strong class="d-block uppercase">Indicadores de Endividamento</strong>
                                <div class="d-flex flex-wrap align-items-center justify-start">
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="Indica quanto de dívida uma empresa está usando para financiar os seus ativos em relação ao patrimônio dos acionistas.">
                                            <a href="https://statusinvest.com.br/termos/d/divida-liquida-patrimonio-liquido"
                                                title="Artigo detalhando Dív. líquida/PL" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">Dív. líquida/PL</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">0,10</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="dividaliquida_patrimonioliquido"
                                                        data-name="Dív. líquida/PL" data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica quanto de dívida uma empresa está usando para financiar os seus ativos em relação ao patrimônio dos acionistas.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Dívida líquida / Patrimônio líquido
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="Indica quanto tempo seria necessário para pagar a dívida líquida da empresa considerando o EBITDA atual. Indica também o grau de endividamento da companhia.">
                                            <a href="https://statusinvest.com.br/termos/d/divida-liquida-ebitda"
                                                title="Artigo detalhando Dív. líquida/EBITDA" target="_blank"
                                                rel="noopener" class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">Dív. líquida/EBITDA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">0,47</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="dividaliquida_ebitda" data-name="Dív. líquida/EBITDA"
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica quanto tempo seria necessário para pagar a dívida líquida da empresa considerando o EBITDA atual. Indica também o grau de endividamento da companhia.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Dívida líquida / EBITDA
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="Indica quanto tempo seria necessário para pagar a dívida líquida da empresa considerando o EBIT atual. Indica também o grau de endividamento da companhia.">
                                            <a href="https://statusinvest.com.br/termos/d/divida-liquida-ebit"
                                                title="Artigo detalhando Dív. líquida/EBIT" target="_blank"
                                                rel="noopener" class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">Dív. líquida/EBIT</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">0,50</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="dividaliquida_ebit" data-name="Dív. líquida/EBIT"
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica quanto tempo seria necessário para pagar a dívida líquida da empresa considerando o EBIT atual. Indica também o grau de endividamento da companhia.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Dívida líquida / EBIT
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="O Patrimônio de uma empresa é o resultado da subtração dos ativos com os passivos. Este indicador é para mostrar a relação dos ativos no patrimônio da empresa.">
                                            <a href="https://statusinvest.com.br/termos/p/patrimonio-ativos"
                                                title="Artigo detalhando PL/Ativos" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">PL/Ativos</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">0,74</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="patrimonio_ativo" data-name="PL/Ativos" data-prefix=""
                                                        data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O Patrimônio de uma empresa é o resultado da subtração dos ativos com os passivos. Este indicador é para mostrar a relação dos ativos no patrimônio da empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Patrimônio líquido / Ativos
&lt;/small&gt;
 &lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div
                                            title="Calculo para saber a relação entre os ativos (circulantes e não circulantes) e os passivos de uma empresa.">
                                            <a href="https://statusinvest.com.br/termos/p/passivos-ativos"
                                                title="Artigo detalhando Passivos/Ativos" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">Passivos/Ativos</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">0,22</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="passivo_ativo" data-name="Passivos/Ativos"
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Calculo para saber a relação entre os ativos (circulantes e não circulantes) e os passivos de uma empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Passivos / Ativos
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item ">
                                        <div title="Indica a capacidade de pagamento da empresa no curto prazo.">
                                            <a href="https://statusinvest.com.br/termos/l/liquidez-corrente"
                                                title="Artigo detalhando Liq. corrente" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">Liq. corrente</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">1,40</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="liquidezcorrente" data-name="Liq. corrente"
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica a capacidade de pagamento da empresa no curto prazo.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Ativo circulante / Passivo circulante
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div data-group="1" class="indicators g-4 w-100 w-lg-33">
                                <strong class="d-block uppercase">Indicadores de Eficiência</strong>
                                <div class="d-flex flex-wrap align-items-center justify-start">
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 item">
                                        <div
                                            title="Mede, objetivamente, o quanto a empresa ganha com a venda de seus produtos.">
                                            <a href="https://statusinvest.com.br/termos/m/margem-bruta"
                                                title="Artigo detalhando M. Bruta" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">M. Bruta</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">34,89%</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="margembruta" data-name="M. Bruta" data-prefix=""
                                                        data-suffix="%"
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Mede, objetivamente, o quanto a empresa ganha com a venda de seus produtos.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Lucro bruto / Receita líquida
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 item">
                                        <div
                                            title="É o percentual da divisão entre o EBITDA (Earnings before interest, taxes, depreciation and amortization) e a receita líquida de uma companhia. Muito útil para se comparar a lucratividade operacional da empresa.">
                                            <a href="https://statusinvest.com.br/termos/m/margem-ebitda"
                                                title="Artigo detalhando M. EBITDA" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">M. EBITDA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">179,51%</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="margemebitda" data-name="M. EBITDA" data-prefix=""
                                                        data-suffix="%"
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
É o percentual da divisão entre o EBITDA (Earnings before interest, taxes, depreciation and amortization) e a receita líquida de uma companhia. Muito útil para se comparar a lucratividade operacional da empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
EBITDA / Receita líquida
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 item">
                                        <div
                                            title="Útil para comparar a lucratividade operacional de empresas do mesmo segmento, além de contribuir para avaliar o crescimento da eficiência produtiva de um negócio ao longo do tempo.">
                                            <a href="https://statusinvest.com.br/termos/m/margem-ebit"
                                                title="Artigo detalhando M. EBIT" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">M. EBIT</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">170,30%</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="margemebit" data-name="M. EBIT" data-prefix=""
                                                        data-suffix="%"
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Útil para comparar a lucratividade operacional de empresas do mesmo segmento, além de contribuir para avaliar o crescimento da eficiência produtiva de um negócio ao longo do tempo.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
EBIT / Receita líquida
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 item">
                                        <div
                                            title="Revela a porcentagem de lucro em relação às receitas de uma empresa.">
                                            <a href="https://statusinvest.com.br/termos/m/margem-liquida"
                                                title="Artigo detalhando M. Líquida" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">M. Líquida</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">165,22%</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="margemliquida" data-name="M. Líquida" data-prefix=""
                                                        data-suffix="%"
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Revela a porcentagem de lucro em relação às receitas de uma empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
 Lucro líquido / Receita líquida
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div data-group="3" class="indicators g-4 w-100 w-lg-33">
                                <strong class="d-block uppercase">Indicadores de Rentabilidade</strong>
                                <div class="d-flex flex-wrap align-items-center justify-start">
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 item">
                                        <div
                                            title="Mede a capacidade de agregar valor de uma empresa a partir de seus próprios recursos e do dinheiro de investidores.">
                                            <a href="https://statusinvest.com.br/termos/r/roe"
                                                title="Artigo detalhando ROE" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">ROE</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">20,43%</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="roe" data-name="ROE" data-prefix="" data-suffix="%"
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Mede a capacidade de agregar valor de uma empresa a partir de seus próprios recursos e do dinheiro de investidores.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Lucro líquido / Patrimônio líquido
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 item">
                                        <div
                                            title="O retorno sobre os ativos ou Return on Assets, é um indicador de rentabilidade, que calcula a capacidade de uma empresa gerar lucro a partir dos seus ativos, além de indiretamente, indicar a eficiência dos seus gestores.">
                                            <a href="https://statusinvest.com.br/termos/r/roa"
                                                title="Artigo detalhando ROA" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">ROA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">15,08%</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="roa" data-name="ROA" data-prefix="" data-suffix="%"
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O retorno sobre os ativos ou Return on Assets, é um indicador de rentabilidade, que calcula a capacidade de uma empresa gerar lucro a partir dos seus ativos, além de indiretamente, indicar a eficiência dos seus gestores.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Lucro líquido / Ativo total
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 item">
                                        <div
                                            title="Mede a rentabilidade de dinheiro o que uma empresa é capaz de gerar em razão de todo o capital investido, incluindo os aportes por meio de dívidas.">
                                            <a href="https://statusinvest.com.br/termos/r/roic"
                                                title="Artigo detalhando ROIC" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">ROIC</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">16,44%</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="roic" data-name="ROIC" data-prefix="" data-suffix="%"
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Mede a rentabilidade de dinheiro o que uma empresa é capaz de gerar em razão de todo o capital investido, incluindo os aportes por meio de dívidas.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
(EBIT - Impostos) / (Patrimônio líquido + Endividamento)
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 item">
                                        <div
                                            title="Mede se como uma empresa está utilizando o seu ativo (bens, investimentos, estoque etc.) para produzir riqueza, através da venda de seus produtos e/ou serviços.">
                                            <a href="https://statusinvest.com.br/termos/g/giro-do-ativo"
                                                title="Artigo detalhando Giro ativos" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">Giro ativos</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">0,09</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="giro_ativos" data-name="Giro ativos" data-prefix=""
                                                        data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Mede se como uma empresa está utilizando o seu ativo (bens, investimentos, estoque etc.) para produzir riqueza, através da venda de seus produtos e/ou serviços.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Receita líquida / Total médio de ativos
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div data-group="4" class="indicators g-4 w-100 w-lg-33">
                                <strong class="d-block uppercase">Indicadores de Crescimento</strong>
                                <div class="d-flex flex-wrap align-items-center justify-start">
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 item">
                                        <div
                                            title="O CAGR (Compound Annual Growth Rate), ou taxa de crescimento anual composta, é a taxa de retorno necessária para um investimento crescer de seu saldo inicial para o seu saldo final.">
                                            <h3 class="title m-0 mr-1 uppercase">CAGR Receitas 5 anos</h3>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">11,75%</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="receitas_cagr5" data-name="CAGR Receitas 5 anos"
                                                        data-prefix="" data-suffix="%"
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O CAGR (Compound Annual Growth Rate), ou taxa de crescimento anual composta, é a taxa de retorno necessária para um investimento crescer de seu saldo inicial para o seu saldo final.
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 item">
                                        <div
                                            title="O CAGR (Compound Annual Growth Rate), ou taxa de crescimento anual composta, é a taxa de retorno necessária para um investimento crescer de seu saldo inicial para o seu saldo final.">
                                            <h3 class="title m-0 mr-1 uppercase">CAGR Lucros 5 anos</h3>
                                            <div class="d-flex align-items-center justify-between pr-1 pr-xs-2">
                                                <strong class="value d-block lh-4 fs-4 fw-700">12,00%</strong>
                                                <div class="d-flex align-items-center">
                                                    <button type="button" title="Gráfico histórico deste indicador"
                                                        data-key="lucros_cagr5" data-name="CAGR Lucros 5 anos"
                                                        data-prefix="" data-suffix="%"
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                    <i data-position="top" style="max-width: 18px;"
                                                        class="material-icons help-icon tooltipped tooltipped-html"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O CAGR (Compound Annual Growth Rate), ou taxa de crescimento anual composta, é a taxa de retorno necessária para um investimento crescer de seu saldo inicial para o seu saldo final.
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div style="display:none" class="indicator-historical-container">
                        <div
                            class="d-flex flex-wrap flex-md-nowrap justify-center justify-md-end justify-md-end align-items-center mb-2">
                            <div class="d-flex justify-between align-items-center mb-2 mb-md-0 ">
                                <div
                                    class="btn-toggle btn-by-quarter d-flex justify-center mr-1 mr-xs-2 mr-sm-3 w-100 w-md-auto p-relative">
                                    <button type="button" title="Histórico anual de indicadores"
                                        data-title="Histórico anual de indicadores" data-value="false" data-id="0"
                                        class="pl-1 pr-1 btn-small btn btn-main btn-flat active">
                                        <div class="fs-2 lh-2">
                                            <div class="fw-700">Anual</div>
                                        </div>
                                    </button>
                                    <button type="button" title="Histórico trimestral de indicadores"
                                        data-title="Histórico trimestral de indicadores" data-value="true" data-id="1"
                                        class="pl-1 pr-1 btn-small btn btn-main btn-flat">
                                        <div class="fs-2 lh-2">
                                            <div class="fw-700">Trimestral</div>
                                        </div>
                                    </button>
                                    <div class="need-login-cover quarter" data-position="top"
                                        data-tooltip="&lt;span&gt;Faça o login para trocar a visão do histórico para anual ou trimestral&lt;/span&gt;">
                                    </div>
                                </div>
                                <div class="card p-1 mr-xs-2 mr-sm-3 switch pt-0 pb-0 "
                                    style="background-color: #565656;">
                                    <label role="switch" aria-checked="false"
                                        class="fw-100 fs-3 grey-text text-darken-1 d-flex justify-start align-items-center">
                                        <input type="checkbox" name="set-future-data">
                                        <span class="v-align-middle lever m-0"></span>
                                        <span class="v-align-middle d-block fs-3 lh-3 ml-2 white-text">
                                            ESTIMATIVAS
                                        </span>
                                        &nbsp;
                                        <span class="d-block fs-3_5 lh-3_5">
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html lh-3 fs-3 white-text"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
&lt;div class=&quot;white-text&quot;&gt;
&lt;div class=&quot;d-flex justify-start align-items-center fs-4&quot;&gt;
&lt;div class=&quot;ml-1 uppercase fs-3 lh-3&quot;&gt;
Estimativas dos indicadores
&lt;span class=&quot;d-block fs-2 lh-3&quot;&gt;
&lt;span class=&quot;fw-100&quot;&gt;MÓDULO&lt;/span&gt; &lt;strong class=&quot;fw-900&quot;&gt;FORECAST&lt;/strong&gt;
&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-flex align-items-center justify-end white-text mt-2&quot;&gt;
&lt;div class=&quot;fs-2 lh-2 fw-600&quot;&gt;POR&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;lh-2&quot;&gt;
&lt;img width=&quot;54&quot; height=&quot;12&quot; alt=&quot;Logo da FACTSET&quot; src=&quot;/img/partners/integration/factset-w.png&quot;&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </span>
                                    </label>
                                    <div class="need-login-cover estimativa" data-position="top"
                                        data-tooltip="&lt;span&gt;Faça o login para ver a estimativa dos indicadores&lt;/span&gt;">
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex justify-between align-items-center mb-2 mb-md-0 ">
                                <div class="card d-flex justify-start align-items-center selecteds-asset mr-2 mr-sm-3">
                                    <div class="avatar initial"
                                        style="background-image: url(/img/company/avatar/345.jpg?v=8)">
                                    </div>
                                    <button title="Selecione outras empresas para comparar com a média do mercado"
                                        type="button"
                                        class="add btn btn-sm btn-xsmall btn-secondary border-0 z-depth-0">
                                        <i style="max-width: 25px;" class="material-icons v-align-middle">add</i>
                                    </button>
                                    <div class="need-login-cover history" data-position="top"
                                        data-tooltip="&lt;span&gt;Veja o histórico de + de uma empresa ao mesmo tempo &lt;b class=&#39;fw-900&#39;&gt;tanto no grid, como no gráfico&lt;/b&gt;&lt;/span&gt;">
                                    </div>
                                </div>
                                <div class="">
                                    <ul class="tabs transparent d-none d-md-block">
                                        <li title="últimos 10 anos" class="tab col s3">
                                            <a role="button" data-type="7"
                                                href="https://statusinvest.com.br/acoes/itsa4#indicator-7"
                                                class="active">10 anos</a>
                                        </li>
                                        <li title="Máximo disponível" class="tab col s3">
                                            <a role="button" data-type="5"
                                                href="https://statusinvest.com.br/acoes/itsa4#indicator-5">Máx.</a>
                                        </li>
                                        <li class="indicator" style="left: 0px; right: 0px;"></li>
                                    </ul>
                                    <div class="d-block d-md-none">

                                        <a class="btn btn-xsmall dropdown-trigger pl-1 pr-0 pr-md-1 d-flex fs-2 fs-md-3"
                                            href="https://statusinvest.com.br/acoes/itsa4#!"
                                            data-target="dropdown-indicator">
                                            <span class="truncate">10 anos</span>
                                            <i class="material-icons right ml-0 ml-md-1">arrow_drop_down</i>
                                        </a>
                                        <ul id="dropdown-indicator" class="dropdown-content" tabindex="0">
                                            <li title="últimos 10 anos" tabindex="0">
                                                <a role="button" data-type="7">10 anos</a>
                                            </li>
                                            <li title="Máximo disponível" tabindex="0">
                                                <a role="button" data-type="5">Máx.</a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div data-group="0" class="indicators">
                            <div class="d-flex w-100">
                                <div>
                                    <div class="indicador indicador-name d-flex justify-between align-items-center ">
                                        <strong class="indicador-name d-block uppercase">Indicadores de
                                            Valuation</strong>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="dy">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/d/dividend-yield"
                                                title="Artigo detalhando D.Y" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">D.Y</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indicador utilizado para relacionar os proventos pagos por uma companhia e o preço atual de suas ações.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Dividendos pagos no período / Preço ação
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="dy" data-name="D.Y" data-prefix=""
                                            data-suffix="%"
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="dy">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="p_l">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/p/p-l"
                                                title="Artigo detalhando P/L" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/L</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Dá uma ideia do quanto o mercado está disposto a pagar pelos lucros da empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / Lucro por ação (LPA)
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="p_l" data-name="P/L" data-prefix=""
                                            data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="p_l">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="peg_Ratio">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <h3 class="title m-0 mr-1 uppercase">PEG Ratio</h3>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O PEG Ratio é uma métrica de avaliação para determinar o trade-off relativo entre o preço de uma ação, o lucro gerado por ação e o crescimento esperado da empresa. Para o cálculo, assumimos o LPA Atual baseado nos últimos 4 trimestres, e o LPA Anterior os 4 trimestres anteriores a estes.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
(P/L) / [(LPA Atual / LPA Anterior) - 1]
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="peg_Ratio" data-name="PEG Ratio" data-prefix=""
                                            data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="peg_Ratio">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="p_vp">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/p/p-vp"
                                                title="Artigo detalhando P/VP" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/VP</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Facilita a análise e comparação da relação do preço de negociação de um ativo com seu VPA.
 &lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / Valor patrimonial por ação (VPA)
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="p_vp" data-name="P/VP" data-prefix=""
                                            data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="p_vp">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="ev_ebitda">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/e/ev-ebitda"
                                                title="Artigo detalhando EV/EBITDA" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">EV/EBITDA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O EV (Enterprise Value ou Valor da Firma), indica quanto custaria para comprar todos os ativos da companhia, descontando o caixa. Este indicador mostra quanto tempo levaria para o valor calculado no EBITDA pagar o investimento feito para compra-la.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
EV / EBITDA
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="ev_ebitda" data-name="EV/EBITDA" data-prefix=""
                                            data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="ev_ebitda">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="ev_ebit">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/e/ev-ebit"
                                                title="Artigo detalhando EV/EBIT" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">EV/EBIT</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O EV (Enterprise Value ou Valor da Firma), indica quanto custaria para comprar todos os ativos da companhia, descontando o caixa. Este indicador mostra quanto tempo levaria para o valor calculado no EBIT pagar o investimento feito para compra-la.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
EV / EBIT
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="ev_ebit" data-name="EV/EBIT" data-prefix=""
                                            data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="ev_ebit">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="p_ebita">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/p/p-ebitda"
                                                title="Artigo detalhando P/EBITDA" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/EBITDA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O EBITDA permite conhecer quanto a companhia está gerando de caixa com base exclusivamente em suas atividades operacionais, desconsiderando os impactos financeiros e dos impostos.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / EBITDA
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="p_ebita" data-name="P/EBITDA" data-prefix=""
                                            data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="p_ebita">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="p_ebit">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/p/p-ebit"
                                                title="Artigo detalhando P/EBIT" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/EBIT</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica qual é o preço da ação em relação ao seu resultado EBIT. O EBIT pode ser considerado uma aproximação do lucro operacional da companhia.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / EBIT
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="p_ebit" data-name="P/EBIT" data-prefix=""
                                            data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="p_ebit">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="vpa">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/v/vpa"
                                                title="Artigo detalhando VPA" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">VPA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica qual o valor patrimonial de uma ação.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Patrimônio líquido / Nº de ações
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="vpa" data-name="VPA" data-prefix=""
                                            data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="vpa">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="p_ativo">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/p/p-ativo"
                                                title="Artigo detalhando P/Ativo" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/Ativo</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Preço da ação dividido pelos Ativos totais por ação.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / Ativos
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="p_ativo" data-name="P/Ativo" data-prefix=""
                                            data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="p_ativo">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="lpa">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/l/lpa"
                                                title="Artigo detalhando LPA" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">LPA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indicar se a empresa é ou não lucrativa. Se este número estiver negativo, a empresa está com margens baixas, acumulando prejuízos.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Lucro líquido / Nº de ações
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="lpa" data-name="LPA" data-prefix=""
                                            data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="lpa">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="p_sr">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/p/psr"
                                                title="Artigo detalhando P/SR" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/SR</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Valor de mercado da empresa dividido pela receita operacional líquida ou preço da ação dividido pela receita líquida por ação
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / Receita líquida por ação
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="p_sr" data-name="P/SR" data-prefix=""
                                            data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="p_sr">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="p_capitlgiro">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/p/p-capital-giro"
                                                title="Artigo detalhando P/Cap. Giro" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/Cap. Giro</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Preço da ação dividido pelo capital de giro por ação. Capital de Giro é o Ativo Circulante menos Passivo Circulante.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / (Ativo circulante - Passivo circulante)
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="p_capitlgiro" data-name="P/Cap. Giro"
                                            data-prefix="" data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="p_capitlgiro">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="p_ativocirculante">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/p/p-ativo-circulante-liquido"
                                                title="Artigo detalhando P/Ativo Circ. Liq." target="_blank"
                                                rel="noopener" class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">P/Ativo Circ. Liq.</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
É a diferença entre o ativo circulante e o passivo que constam do balanço patrimonial de uma empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Preço atual / Ativos Circulantes Líquidos por ação
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="p_ativocirculante"
                                            data-name="P/Ativo Circ. Liq." data-prefix="" data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="p_ativocirculante">
                                        </div>
                                    </div>
                                </div>
                                <div class="table-scroll w-100"></div>
                            </div>
                        </div>
                        <div data-group="2" class="indicators">
                            <div class="d-flex w-100">
                                <div>
                                    <div class="indicador indicador-name d-flex justify-between align-items-center ">
                                        <strong class="indicador-name d-block uppercase">Indicadores de
                                            Endividamento</strong>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="dividaliquida_patrimonioliquido">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/d/divida-liquida-patrimonio-liquido"
                                                title="Artigo detalhando Dív. líquida/PL" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">Dív. líquida/PL</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica quanto de dívida uma empresa está usando para financiar os seus ativos em relação ao patrimônio dos acionistas.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Dívida líquida / Patrimônio líquido
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="dividaliquida_patrimonioliquido"
                                            data-name="Dív. líquida/PL" data-prefix="" data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="dividaliquida_patrimonioliquido">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="dividaliquida_ebitda">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/d/divida-liquida-ebitda"
                                                title="Artigo detalhando Dív. líquida/EBITDA" target="_blank"
                                                rel="noopener" class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">Dív. líquida/EBITDA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica quanto tempo seria necessário para pagar a dívida líquida da empresa considerando o EBITDA atual. Indica também o grau de endividamento da companhia.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Dívida líquida / EBITDA
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="dividaliquida_ebitda"
                                            data-name="Dív. líquida/EBITDA" data-prefix="" data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="dividaliquida_ebitda">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="dividaliquida_ebit">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/d/divida-liquida-ebit"
                                                title="Artigo detalhando Dív. líquida/EBIT" target="_blank"
                                                rel="noopener" class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">Dív. líquida/EBIT</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica quanto tempo seria necessário para pagar a dívida líquida da empresa considerando o EBIT atual. Indica também o grau de endividamento da companhia.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Dívida líquida / EBIT
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="dividaliquida_ebit"
                                            data-name="Dív. líquida/EBIT" data-prefix="" data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="dividaliquida_ebit">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="patrimonio_ativo">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/p/patrimonio-ativos"
                                                title="Artigo detalhando PL/Ativos" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">PL/Ativos</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O Patrimônio de uma empresa é o resultado da subtração dos ativos com os passivos. Este indicador é para mostrar a relação dos ativos no patrimônio da empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Patrimônio líquido / Ativos
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="patrimonio_ativo" data-name="PL/Ativos"
                                            data-prefix="" data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="patrimonio_ativo">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="passivo_ativo">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/p/passivos-ativos"
                                                title="Artigo detalhando Passivos/Ativos" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">Passivos/Ativos</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Calculo para saber a relação entre os ativos (circulantes e não circulantes) e os passivos de uma empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Passivos / Ativos
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="passivo_ativo" data-name="Passivos/Ativos"
                                            data-prefix="" data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="passivo_ativo">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="liquidezcorrente">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/l/liquidez-corrente"
                                                title="Artigo detalhando Liq. corrente" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">Liq. corrente</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica a capacidade de pagamento da empresa no curto prazo.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Ativo circulante / Passivo circulante
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="liquidezcorrente" data-name="Liq. corrente"
                                            data-prefix="" data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="liquidezcorrente">
                                        </div>
                                    </div>
                                </div>
                                <div class="table-scroll w-100"></div>
                            </div>
                        </div>
                        <div data-group="1" class="indicators">
                            <div class="d-flex w-100">
                                <div>
                                    <div class="indicador indicador-name d-flex justify-between align-items-center ">
                                        <strong class="indicador-name d-block uppercase">Indicadores de
                                            Eficiência</strong>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="margembruta">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/m/margem-bruta"
                                                title="Artigo detalhando M. Bruta" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">M. Bruta</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Mede, objetivamente, o quanto a empresa ganha com a venda de seus produtos.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Lucro bruto / Receita líquida
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="margembruta" data-name="M. Bruta" data-prefix=""
                                            data-suffix="%"
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="margembruta">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="margemebitda">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/m/margem-ebitda"
                                                title="Artigo detalhando M. EBITDA" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">M. EBITDA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
É o percentual da divisão entre o EBITDA (Earnings before interest, taxes, depreciation and amortization) e a receita líquida de uma companhia. Muito útil para se comparar a lucratividade operacional da empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
EBITDA / Receita líquida
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="margemebitda" data-name="M. EBITDA"
                                            data-prefix="" data-suffix="%"
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="margemebitda">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="margemebit">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/m/margem-ebit"
                                                title="Artigo detalhando M. EBIT" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">M. EBIT</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Útil para comparar a lucratividade operacional de empresas do mesmo segmento, além de contribuir para avaliar o crescimento da eficiência produtiva de um negócio ao longo do tempo.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
EBIT / Receita líquida
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="margemebit" data-name="M. EBIT" data-prefix=""
                                            data-suffix="%"
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="margemebit">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="margemliquida">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/m/margem-liquida"
                                                title="Artigo detalhando M. Líquida" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">M. Líquida</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Revela a porcentagem de lucro em relação às receitas de uma empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Lucro líquido / Receita líquida
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="margemliquida" data-name="M. Líquida"
                                            data-prefix="" data-suffix="%"
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="margemliquida">
                                        </div>
                                    </div>
                                </div>
                                <div class="table-scroll w-100"></div>
                            </div>
                        </div>
                        <div data-group="3" class="indicators">
                            <div class="d-flex w-100">
                                <div>
                                    <div class="indicador indicador-name d-flex justify-between align-items-center ">
                                        <strong class="indicador-name d-block uppercase">Indicadores de
                                            Rentabilidade</strong>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="roe">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/r/roe"
                                                title="Artigo detalhando ROE" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">ROE</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Mede a capacidade de agregar valor de uma empresa a partir de seus próprios recursos e do dinheiro de investidores.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Lucro líquido / Patrimônio líquido
&lt;/small&gt;
 &lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="roe" data-name="ROE" data-prefix=""
                                            data-suffix="%"
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="roe">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="roa">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/r/roa"
                                                title="Artigo detalhando ROA" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">ROA</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O retorno sobre os ativos ou Return on Assets, é um indicador de rentabilidade, que calcula a capacidade de uma empresa gerar lucro a partir dos seus ativos, além de indiretamente, indicar a eficiência dos seus gestores.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Lucro líquido / Ativo total
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="roa" data-name="ROA" data-prefix=""
                                            data-suffix="%"
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="roa">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="roic">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/r/roic"
                                                title="Artigo detalhando ROIC" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">ROIC</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Mede a rentabilidade de dinheiro o que uma empresa é capaz de gerar em razão de todo o capital investido, incluindo os aportes por meio de dívidas.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
(EBIT - Impostos) / (Patrimônio líquido + Endividamento)
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="roic" data-name="ROIC" data-prefix=""
                                            data-suffix="%"
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="roic">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="giro_ativos">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <a href="https://statusinvest.com.br/termos/g/giro-do-ativo"
                                                title="Artigo detalhando Giro ativos" target="_blank" rel="noopener"
                                                class="term-indicator-link d-flex align-items-center">
                                                <h3 class="title m-0 uppercase">Giro ativos</h3>
                                                <span class="material-icons">format_quote</span>
                                            </a>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Mede se como uma empresa está utilizando o seu ativo (bens, investimentos, estoque etc.) para produzir riqueza, através da venda de seus produtos e/ou serviços.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-700&quot;&gt;
Receita líquida / Total médio de ativos
&lt;/small&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="giro_ativos" data-name="Giro ativos"
                                            data-prefix="" data-suffix=""
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="giro_ativos">
                                        </div>
                                    </div>
                                </div>
                                <div class="table-scroll w-100"></div>
                            </div>
                        </div>
                        <div data-group="4" class="indicators">
                            <div class="d-flex w-100">
                                <div>
                                    <div class="indicador indicador-name d-flex justify-between align-items-center ">
                                        <strong class="indicador-name d-block uppercase">Indicadores de
                                            Crescimento</strong>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="receitas_cagr5">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <h3 class="title m-0 mr-1 uppercase">CAGR Receitas 5 anos</h3>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O CAGR (Compound Annual Growth Rate), ou taxa de crescimento anual composta, é a taxa de retorno necessária para um investimento crescer de seu saldo inicial para o seu saldo final.
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="receitas_cagr5" data-name="CAGR Receitas 5 anos"
                                            data-prefix="" data-suffix="%"
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="receitas_cagr5">
                                        </div>
                                    </div>
                                    <div class="indicador d-flex justify-between align-items-center "
                                        data-indicador="lucros_cagr5">
                                        <div class="d-flex justify-between align-items-center w-100">
                                            <h3 class="title m-0 mr-1 uppercase">CAGR Lucros 5 anos</h3>
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html fs-3"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O CAGR (Compound Annual Growth Rate), ou taxa de crescimento anual composta, é a taxa de retorno necessária para um investimento crescer de seu saldo inicial para o seu saldo final.
&lt;/div&gt;
 ">
                                                help_outline

                                            </i>
                                        </div>
                                        <button type="button" data-key="lucros_cagr5" data-name="CAGR Lucros 5 anos"
                                            data-prefix="" data-suffix="%"
                                            class="btn-chart btn-history btn btn-xsmall btn-main-green btn-outline btn-flat">
                                            <i style="max-width: 18px;" class="material-icons">show_chart</i>
                                        </button>
                                        <div class="avatars" data-key="lucros_cagr5">
                                        </div>
                                    </div>
                                </div>
                                <div class="table-scroll w-100"></div>
                            </div>
                        </div>
                    </div>
                    <div style="display:none" class="indicator-avg-market-container">

                        <div class="d-flex flex-wrap justify-center align-items-center mb-3">
                            <div class="btn-toggle btn-avg-type d-flex justify-center  mr-md-3 mb-2 mb-md-0">
                                <button type="button" title="Veja a média por setor" data-value="sector" data-id="4"
                                    data-title="Média setor" class="pl-1 pr-1 btn-small  btn btn-main btn-flat active">
                                    <div class="fs-2 lh-2">
                                        <div class="fw-700">SETOR</div>
                                        <small class="d-flex justify-center align-items-center">Financeiro e
                                            Outros</small>
                                    </div>
                                </button>
                                <button type="button" title="Veja a média por subsetor" data-value="subsector"
                                    data-id="24" data-title="Média subsetor"
                                    class="pl-1 pr-1 btn-small  btn btn-main btn-flat">
                                    <div class="fs-2 lh-2">
                                        <div class="fw-700">SUBSETOR</div>
                                        <small class="d-flex justify-center align-items-center">Intermediários
                                            Financeiros</small>
                                    </div>
                                </button>
                                <button type="button" title="Veja a média por segmento" data-value="segment"
                                    data-id="54" data-title="Média segmento"
                                    class="pl-1 pr-1 btn-small  btn btn-main btn-flat">
                                    <div class="fs-2 lh-2">
                                        <div class="fw-700">SEGMENTO </div>
                                        <small class="d-flex justify-center align-items-center">Bancos</small>
                                    </div>
                                </button>
                            </div>
                            <div class="card d-flex justify-start align-items-center selecteds-asset ">
                                <div class="avatar initial"
                                    style="background-image: url(/img/company/avatar/345.jpg?v=8)">
                                </div>
                                <button title="Selecione outras empresas para comparar com a média do mercado"
                                    type="button" class="add btn btn-sm btn-xsmall btn-secondary border-0 z-depth-0">
                                    <i style="max-width: 25px;" class="material-icons v-align-middle">add</i>
                                </button>
                            </div>
                        </div>
                        <div class="d-flex flex-wrap groups">
                            <div data-group="0" class="indicators w-100">
                                <strong class="d-block uppercase">Indicadores de Valuation</strong>
                                <div class="d-flex flex-wrap align-items-center justify-start">
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="dy"
                                            title="Indicador utilizado para relacionar os proventos pagos por uma companhia e o preço atual de suas ações.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/d/dividend-yield"
                                                    title="Artigo detalhando D.Y" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        D.Y
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indicador utilizado para relacionar os proventos pagos por uma companhia e o preço atual de suas ações.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
 Dividendos pagos no período / Preço ação
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="p_l"
                                            title="Dá uma ideia do quanto o mercado está disposto a pagar pelos lucros da empresa.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/p/p-l"
                                                    title="Artigo detalhando P/L" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        P/L
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Dá uma ideia do quanto o mercado está disposto a pagar pelos lucros da empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Preço atual / Lucro por ação (LPA)
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="peg_Ratio"
                                            title="O PEG Ratio é uma métrica de avaliação para determinar o trade-off relativo entre o preço de uma ação, o lucro gerado por ação e o crescimento esperado da empresa. Para o cálculo, assumimos o LPA Atual baseado nos últimos 4 trimestres, e o LPA Anterior os 4 trimestres anteriores a estes.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <h3 class="title m-0 mr-1 uppercase" style="font-weight:700">
                                                    PEG Ratio
                                                </h3>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O PEG Ratio é uma métrica de avaliação para determinar o trade-off relativo entre o preço de uma ação, o lucro gerado por ação e o crescimento esperado da empresa. Para o cálculo, assumimos o LPA Atual baseado nos últimos 4 trimestres, e o LPA Anterior os 4 trimestres anteriores a estes.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
(P/L) / [(LPA Atual / LPA Anterior) - 1]
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="p_vp"
                                            title="Facilita a análise e comparação da relação do preço de negociação de um ativo com seu VPA.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/p/p-vp"
                                                    title="Artigo detalhando P/VP" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        P/VP
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Facilita a análise e comparação da relação do preço de negociação de um ativo com seu VPA.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Preço atual / Valor patrimonial por ação (VPA)
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="ev_ebitda"
                                            title="O EV (Enterprise Value ou Valor da Firma), indica quanto custaria para comprar todos os ativos da companhia, descontando o caixa. Este indicador mostra quanto tempo levaria para o valor calculado no EBITDA pagar o investimento feito para compra-la.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/e/ev-ebitda"
                                                    title="Artigo detalhando EV/EBITDA" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        EV/EBITDA
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O EV (Enterprise Value ou Valor da Firma), indica quanto custaria para comprar todos os ativos da companhia, descontando o caixa. Este indicador mostra quanto tempo levaria para o valor calculado no EBITDA pagar o investimento feito para compra-la.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
EV / EBITDA
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="ev_ebit"
                                            title="O EV (Enterprise Value ou Valor da Firma), indica quanto custaria para comprar todos os ativos da companhia, descontando o caixa. Este indicador mostra quanto tempo levaria para o valor calculado no EBIT pagar o investimento feito para compra-la.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/e/ev-ebit"
                                                    title="Artigo detalhando EV/EBIT" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        EV/EBIT
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O EV (Enterprise Value ou Valor da Firma), indica quanto custaria para comprar todos os ativos da companhia, descontando o caixa. Este indicador mostra quanto tempo levaria para o valor calculado no EBIT pagar o investimento feito para compra-la.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
EV / EBIT
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="p_ebita"
                                            title="O EBITDA permite conhecer quanto a companhia está gerando de caixa com base exclusivamente em suas atividades operacionais, desconsiderando os impactos financeiros e dos impostos.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/p/p-ebitda"
                                                    title="Artigo detalhando P/EBITDA" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        P/EBITDA
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O EBITDA permite conhecer quanto a companhia está gerando de caixa com base exclusivamente em suas atividades operacionais, desconsiderando os impactos financeiros e dos impostos.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Preço atual / EBITDA
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="p_ebit"
                                            title="Indica qual é o preço da ação em relação ao seu resultado EBIT. O EBIT pode ser considerado uma aproximação do lucro operacional da companhia.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/p/p-ebit"
                                                    title="Artigo detalhando P/EBIT" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        P/EBIT
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica qual é o preço da ação em relação ao seu resultado EBIT. O EBIT pode ser considerado uma aproximação do lucro operacional da companhia.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Preço atual / EBIT
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="vpa" title="Indica qual o valor patrimonial de uma ação.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/v/vpa"
                                                    title="Artigo detalhando VPA" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        VPA
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica qual o valor patrimonial de uma ação.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Patrimônio líquido / Nº de ações
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="p_ativo"
                                            title="Preço da ação dividido pelos Ativos totais por ação.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/p/p-ativo"
                                                    title="Artigo detalhando P/Ativo" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        P/Ativo
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Preço da ação dividido pelos Ativos totais por ação.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
 Preço atual / Ativos
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="lpa"
                                            title="Indicar se a empresa é ou não lucrativa. Se este número estiver negativo, a empresa está com margens baixas, acumulando prejuízos.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/l/lpa"
                                                    title="Artigo detalhando LPA" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        LPA
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indicar se a empresa é ou não lucrativa. Se este número estiver negativo, a empresa está com margens baixas, acumulando prejuízos.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Lucro líquido / Nº de ações
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="p_sr"
                                            title="Valor de mercado da empresa dividido pela receita operacional líquida ou preço da ação dividido pela receita líquida por ação">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/p/psr"
                                                    title="Artigo detalhando P/SR" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        P/SR
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Valor de mercado da empresa dividido pela receita operacional líquida ou preço da ação dividido pela receita líquida por ação
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Preço atual / Receita líquida por ação
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="p_capitlgiro"
                                            title="Preço da ação dividido pelo capital de giro por ação. Capital de Giro é o Ativo Circulante menos Passivo Circulante.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/p/p-capital-giro"
                                                    title="Artigo detalhando P/Cap. Giro" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        P/Cap. Giro
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Preço da ação dividido pelo capital de giro por ação. Capital de Giro é o Ativo Circulante menos Passivo Circulante.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Preço atual / (Ativo circulante - Passivo circulante)
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="p_ativocirculante"
                                            title="É a diferença entre o ativo circulante e o passivo que constam do balanço patrimonial de uma empresa.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/p/p-ativo-circulante-liquido"
                                                    title="Artigo detalhando P/Ativo Circ. Liq." target="_blank"
                                                    rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        P/Ativo Circ. Liq.
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
 &lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
É a diferença entre o ativo circulante e o passivo que constam do balanço patrimonial de uma empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Preço atual / Ativos Circulantes Líquidos por ação
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div data-group="2" class="indicators w-100">
                                <strong class="d-block uppercase">Indicadores de Endividamento</strong>
                                <div class="d-flex flex-wrap align-items-center justify-start">
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="dividaliquida_patrimonioliquido"
                                            title="Indica quanto de dívida uma empresa está usando para financiar os seus ativos em relação ao patrimônio dos acionistas.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/d/divida-liquida-patrimonio-liquido"
                                                    title="Artigo detalhando Dív. líquida/PL" target="_blank"
                                                    rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        Dív. líquida/PL
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica quanto de dívida uma empresa está usando para financiar os seus ativos em relação ao patrimônio dos acionistas.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
 Dívida líquida / Patrimônio líquido
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="dividaliquida_ebitda"
                                            title="Indica quanto tempo seria necessário para pagar a dívida líquida da empresa considerando o EBITDA atual. Indica também o grau de endividamento da companhia.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/d/divida-liquida-ebitda"
                                                    title="Artigo detalhando Dív. líquida/EBITDA" target="_blank"
                                                    rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        Dív. líquida/EBITDA
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica quanto tempo seria necessário para pagar a dívida líquida da empresa considerando o EBITDA atual. Indica também o grau de endividamento da companhia.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Dívida líquida / EBITDA
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="dividaliquida_ebit"
                                            title="Indica quanto tempo seria necessário para pagar a dívida líquida da empresa considerando o EBIT atual. Indica também o grau de endividamento da companhia.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/d/divida-liquida-ebit"
                                                    title="Artigo detalhando Dív. líquida/EBIT" target="_blank"
                                                    rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        Dív. líquida/EBIT
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica quanto tempo seria necessário para pagar a dívida líquida da empresa considerando o EBIT atual. Indica também o grau de endividamento da companhia.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Dívida líquida / EBIT
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="patrimonio_ativo"
                                            title="O Patrimônio de uma empresa é o resultado da subtração dos ativos com os passivos. Este indicador é para mostrar a relação dos ativos no patrimônio da empresa.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/p/patrimonio-ativos"
                                                    title="Artigo detalhando PL/Ativos" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        PL/Ativos
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O Patrimônio de uma empresa é o resultado da subtração dos ativos com os passivos. Este indicador é para mostrar a relação dos ativos no patrimônio da empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Patrimônio líquido / Ativos
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="passivo_ativo"
                                            title="Calculo para saber a relação entre os ativos (circulantes e não circulantes) e os passivos de uma empresa.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/p/passivos-ativos"
                                                    title="Artigo detalhando Passivos/Ativos" target="_blank"
                                                    rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        Passivos/Ativos
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Calculo para saber a relação entre os ativos (circulantes e não circulantes) e os passivos de uma empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Passivos / Ativos
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-16_6 mb-2 mt-2 item pt-3 pb-3">
                                        <div data-key="liquidezcorrente"
                                            title="Indica a capacidade de pagamento da empresa no curto prazo.">
                                            <div class="d-flex align-items-center  mb-1">
                                                <a href="https://statusinvest.com.br/termos/l/liquidez-corrente"
                                                    title="Artigo detalhando Liq. corrente" target="_blank"
                                                    rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        Liq. corrente
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Indica a capacidade de pagamento da empresa no curto prazo.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
 Ativo circulante / Passivo circulante
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div data-group="1" class="indicators g-4 w-100 w-lg-33">
                                <strong class="d-block uppercase">Indicadores de Eficiência</strong>
                                <div class="d-flex flex-wrap align-items-center justify-start">
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 pt-3 pb-3 item">
                                        <div data-key="margembruta"
                                            title="Mede, objetivamente, o quanto a empresa ganha com a venda de seus produtos.">
                                            <div class="d-flex align-items-center mb-1">
                                                <a href="https://statusinvest.com.br/termos/m/margem-bruta"
                                                    title="Artigo detalhando M. Bruta" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        M. Bruta
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Mede, objetivamente, o quanto a empresa ganha com a venda de seus produtos.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Lucro bruto / Receita líquida
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 pt-3 pb-3 item">
                                        <div data-key="margemebitda"
                                            title="É o percentual da divisão entre o EBITDA (Earnings before interest, taxes, depreciation and amortization) e a receita líquida de uma companhia. Muito útil para se comparar a lucratividade operacional da empresa.">
                                            <div class="d-flex align-items-center mb-1">
                                                <a href="https://statusinvest.com.br/termos/m/margem-ebitda"
                                                    title="Artigo detalhando M. EBITDA" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        M. EBITDA
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
É o percentual da divisão entre o EBITDA (Earnings before interest, taxes, depreciation and amortization) e a receita líquida de uma companhia. Muito útil para se comparar a lucratividade operacional da empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
EBITDA / Receita líquida
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 pt-3 pb-3 item">
                                        <div data-key="margemebit"
                                            title="Útil para comparar a lucratividade operacional de empresas do mesmo segmento, além de contribuir para avaliar o crescimento da eficiência produtiva de um negócio ao longo do tempo.">
                                            <div class="d-flex align-items-center mb-1">
                                                <a href="https://statusinvest.com.br/termos/m/margem-ebit"
                                                    title="Artigo detalhando M. EBIT" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        M. EBIT
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Útil para comparar a lucratividade operacional de empresas do mesmo segmento, além de contribuir para avaliar o crescimento da eficiência produtiva de um negócio ao longo do tempo.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
EBIT / Receita líquida
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 pt-3 pb-3 item">
                                        <div data-key="margemliquida"
                                            title="Revela a porcentagem de lucro em relação às receitas de uma empresa.">
                                            <div class="d-flex align-items-center mb-1">
                                                <a href="https://statusinvest.com.br/termos/m/margem-liquida"
                                                    title="Artigo detalhando M. Líquida" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        M. Líquida
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Revela a porcentagem de lucro em relação às receitas de uma empresa.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Lucro líquido / Receita líquida
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div data-group="3" class="indicators g-4 w-100 w-lg-33">
                                <strong class="d-block uppercase">Indicadores de Rentabilidade</strong>
                                <div class="d-flex flex-wrap align-items-center justify-start">
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 pt-3 pb-3 item">
                                        <div data-key="roe"
                                            title="Mede a capacidade de agregar valor de uma empresa a partir de seus próprios recursos e do dinheiro de investidores.">
                                            <div class="d-flex align-items-center mb-1">
                                                <a href="https://statusinvest.com.br/termos/r/roe"
                                                    title="Artigo detalhando ROE" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        ROE
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Mede a capacidade de agregar valor de uma empresa a partir de seus próprios recursos e do dinheiro de investidores.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Lucro líquido / Patrimônio líquido
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 pt-3 pb-3 item">
                                        <div data-key="roa"
                                            title="O retorno sobre os ativos ou Return on Assets, é um indicador de rentabilidade, que calcula a capacidade de uma empresa gerar lucro a partir dos seus ativos, além de indiretamente, indicar a eficiência dos seus gestores.">
                                            <div class="d-flex align-items-center mb-1">
                                                <a href="https://statusinvest.com.br/termos/r/roa"
                                                    title="Artigo detalhando ROA" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        ROA
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O retorno sobre os ativos ou Return on Assets, é um indicador de rentabilidade, que calcula a capacidade de uma empresa gerar lucro a partir dos seus ativos, além de indiretamente, indicar a eficiência dos seus gestores.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Lucro líquido / Ativo total
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 pt-3 pb-3 item">
                                        <div data-key="roic"
                                            title="Mede a rentabilidade de dinheiro o que uma empresa é capaz de gerar em razão de todo o capital investido, incluindo os aportes por meio de dívidas.">
                                            <div class="d-flex align-items-center mb-1">
                                                <a href="https://statusinvest.com.br/termos/r/roic"
                                                    title="Artigo detalhando ROIC" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        ROIC
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Mede a rentabilidade de dinheiro o que uma empresa é capaz de gerar em razão de todo o capital investido, incluindo os aportes por meio de dívidas.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
(EBIT - Impostos) / (Patrimônio líquido + Endividamento)
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 pt-3 pb-3 item">
                                        <div data-key="giro_ativos"
                                            title="Mede se como uma empresa está utilizando o seu ativo (bens, investimentos, estoque etc.) para produzir riqueza, através da venda de seus produtos e/ou serviços.">
                                            <div class="d-flex align-items-center mb-1">
                                                <a href="https://statusinvest.com.br/termos/g/giro-do-ativo"
                                                    title="Artigo detalhando Giro ativos" target="_blank" rel="noopener"
                                                    class="term-indicator-link d-flex align-items-center">
                                                    <h3 class="title m-0 uppercase" style=" font-weight:700">
                                                        Giro ativos
                                                    </h3>
                                                    <span class="material-icons">format_quote</span>
                                                </a>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Mede se como uma empresa está utilizando o seu ativo (bens, investimentos, estoque etc.) para produzir riqueza, através da venda de seus produtos e/ou serviços.
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;FÓRMULA:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light fw-600&quot;&gt;
Receita líquida / Total médio de ativos
&lt;/small&gt;
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div data-group="4" class="indicators g-4 w-100 w-lg-33">
                                <strong class="d-block uppercase">Indicadores de Crescimento</strong>
                                <div class="d-flex flex-wrap align-items-center justify-start">
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 pt-3 pb-3 item">
                                        <div data-key="receitas_cagr5"
                                            title="O CAGR (Compound Annual Growth Rate), ou taxa de crescimento anual composta, é a taxa de retorno necessária para um investimento crescer de seu saldo inicial para o seu saldo final.">
                                            <div class="d-flex align-items-center mb-1">
                                                <h3 class="title m-0 mr-1 uppercase" style="font-weight:700">
                                                    CAGR Receitas 5 anos
                                                </h3>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O CAGR (Compound Annual Growth Rate), ou taxa de crescimento anual composta, é a taxa de retorno necessária para um investimento crescer de seu saldo inicial para o seu saldo final.
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="w-50 w-sm-33 w-md-25 w-lg-50  mb-2 mt-2 pt-3 pb-3 item">
                                        <div data-key="lucros_cagr5"
                                            title="O CAGR (Compound Annual Growth Rate), ou taxa de crescimento anual composta, é a taxa de retorno necessária para um investimento crescer de seu saldo inicial para o seu saldo final.">
                                            <div class="d-flex align-items-center mb-1">
                                                <h3 class="title m-0 mr-1 uppercase" style="font-weight:700">
                                                    CAGR Lucros 5 anos
                                                </h3>
                                                <i data-position="top"
                                                    class="material-icons help-icon tooltipped tooltipped-html"
                                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O CAGR (Compound Annual Growth Rate), ou taxa de crescimento anual composta, é a taxa de retorno necessária para um investimento crescer de seu saldo inicial para o seu saldo final.
&lt;/div&gt;
">
                                                    help_outline

                                                </i>
                                            </div>
                                            <div class="media-mercado">
                                                <div class="d-flex align-items-center justify-between pr-2">
                                                    <span class="title m-0 mr-1 uppercase">-</span>
                                                    <strong class="value d-block lh-4 fs-3_5 fw-600">-</strong>
                                                </div>
                                            </div>
                                            <div class="ativos">
                                                <div class="ghost"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div style="display:none">
                            <div id="indicator-avg-asset-template">
                                <div class="ativo mr-2">
                                    <div class="d-flex align-items-center justify-between">
                                        <div class="d-flex align-items-center ">
                                            <div class="avatar "
                                                style="{_ignore}background-image: url(/img/company/avatar/{parentid}.jpg?v=8)">
                                            </div>
                                            <div>
                                                <span class="d-block title m-0 uppercase">
                                                    {ticker}
                                                </span>
                                                <div class="d-flex align-items-center {color}">
                                                    <i style="display: block; max-width: 14px;"
                                                        class="material-icons fs-2 lh-2">{icon}</i>
                                                    <b style="display: block; font-size: .7rem; line-height: 0.9rem; "
                                                        class=" lh-2 v-align-middle">{percent}%</b>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="">
                                            <strong class="value d-block lh-3_5 fs-3_5 fw-600">&nbsp;{value_F}</strong>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class=" mb-7">
                    <div class="card bg-main-gd-h white-text rounded">
                        <div class="d-block d-xs-flex justify-between align-items-center mb-3">
                            <div class="card-title ">
                                <i class="material-icons v-align-middle d-inline-block fs-4">monetization_on</i>
                                <h3 class="d-inline-block m-0 white-text">
                                    <span class="v-align-middle">aluguel de ações da ITSA4</span>
                                    <i data-position="top"
                                        class="v-align-middle material-icons help-icon tooltipped tooltipped-html text-white fs-4"
                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
A taxa de aluguel é ao ano
&lt;/div&gt;
">
                                        help_outline

                                    </i>
                                </h3>
                            </div>
                            <small class="d-block fs-2 fs-md-3 lh-2 text-center">
                                DATA BASE <span class="d-xs-none d-sm-inline-block">- </span>
                                <strong class="fw-900 d-xs-block d-sm-inline-block">05/01/2023</strong>
                            </small>
                        </div>
                        <div class="top-info d-flex justify-between align-items-center flex-wrap">
                            <div class="info w-50 w-lg-20 p-lg-0 m-0">
                                <div class="d-md-inline-block text-align-center">
                                    <div class="d-inline-block text-align-left" title="">
                                        <h3 class="title m-0">TOMADOR <small>(média)</small></h3>
                                        <strong class="m-md-0 mb-md-1 value mt-0 ">0,05</strong>
                                        <span class="icon fs-3">%</span>
                                    </div>
                                    <div class="d-flex justify-center justify-md-between w-lg-100">
                                        <span title="" class="sub-value">
                                            <span class="d-block fs-2 lh-1">MIN.</span>
                                            <b class="v-align-middle">0,01<span class="fs-2 fw-100">%</span></b>
                                        </span>
                                        <span title="" class="sub-value pl-2 pl-sm-3">
                                            <span class="d-block fs-2 lh-1">MAX.</span>
                                            <b class="v-align-middle">0,50<span class="fs-2 fw-100">%</span></b>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="info w-50 w-lg-20 p-lg-0 border-md-0 border-lg-1 m-0">
                                <div class="d-md-inline-block text-align-center">
                                    <div class="d-inline-block text-align-left" title="">
                                        <h3 class="title m-0">DOADOR <small>(média)</small></h3>
                                        <strong class="m-md-0 mb-md-1 value mt-0 ">0,05</strong>
                                        <span class="icon fs-3">%</span>
                                    </div>
                                    <div class="d-flex justify-center justify-md-between w-lg-100">
                                        <span title="" class="sub-value">
                                            <span class="d-block fs-2 lh-1">MIN.</span>
                                            <b class="v-align-middle">0,01<span class="fs-2 fw-100">%</span></b>
                                        </span>
                                        <span title="" class="sub-value pl-2 pl-sm-3">
                                            <span class="d-block fs-2 lh-1">MAX.</span>
                                            <b class="v-align-middle">0,50<span class="fs-2 fw-100">%</span></b>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="info w-100 w-xs-45 w-sm-50 w-lg-20 m-0 p-lg-0">
                                <div class="d-md-inline-block text-align-center">
                                    <div class="d-inline-block text-align-left" title="">
                                        <h3 class="title m-0">Nº DE AÇÕES ALUGADAS (dia)</h3>
                                        <strong class="m-md-0 mb-md-1 value mt-0 fs-3_5 lh-4">16.876.151</strong>
                                    </div>
                                    <div class="d-block text-center w-lg-100">
                                        <span title="" class="sub-value d-inline-block d-xs-block m-auto text-left">
                                            <span class="d-block fs-2 lh-1">
                                                TOTAL AÇÕES ALUGADAS
                                            </span>
                                            <b class="v-align-middle fs-3_5 lh-4">194.215.464</b>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="info w-100 w-xs-55 w-sm-50 w-lg-25 p-lg-0 border-md-0 border-lg-1">
                                <div class="text-align-center text-align-xs-left">
                                    <div class="d-inline-block">
                                        <h3 class="title m-0">VOLUME (dia)</h3>
                                        <span class="icon m-md-0 mb-md-1 fs-3">R$</span>
                                        <strong class="m-md-0 mb-md-1 value mt-0 fs-3_5 lh-4">140.747.099</strong>
                                    </div>
                                    <div class="d-block text-center w-lg-100">
                                        <span title="" class="sub-value d-inline-block d-xs-block m-auto text-left">
                                            <span class="d-block fs-2 lh-1">
                                                VOLUME TOTAL EM ABERTO
                                            </span>
                                            <span class="icon fs-3">R$</span>
                                            <b class="v-align-middle fs-3_5 lh-4">1.603.574.484</b>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="info w-100 w-xs-55 w-sm-50 w-lg-15 pb-0 p-lg-0 border-lg-0">
                                <div class="text-center">
                                    <div class="d-inline-block">
                                        <h3 class="title m-0">Nº DE CONTRATOS</h3>
                                        <strong class="value fs-4 mb-0 mb-md-1 mt-0 mt-md-1">356</strong>
                                    </div>
                                </div>
                            </div>
                            <div class="info w-100 w-xs-55 w-sm-50 w-lg-15 pb-0 p-lg-0 d-none d-sm-block d-lg-none">
                                <div class="text-center">
                                    <div class="d-inline-block">
                                        <h3 class="title m-0"></h3>
                                        <strong class="value mb-0 mb-md-1 mt-0 mt-md-1"></strong>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="d-sm-flex align-items-center justify-center mt-3 mt-md-4 mb-1">
                            <div class="p-relative text-center div-btn-rent-history mr-sm-3 mb-2 mb-sm-0">
                                <div class="need-login-cover" data-position="top"
                                    data-tooltip="&lt;span&gt;Veja o &lt;b class=&#39;fw-900&#39;&gt;histórico do aluguel&lt;/b&gt;  da  ITSA4&lt;/span&gt;">
                                </div>
                                <button id="btn-rent" type="button" data-category="Acoes" data-code="ITSA4"
                                    data-assetid="427"
                                    class="btn btn-max-md-xsmall btn-white waves-effect btn-block w-100"
                                    title="Histórico do aluguel  da  ITSA4" style="visibility: visible;">
                                    <span class="d-flex align-items-center justify-center fs-2 fs-md-3">
                                        <i class="material-icons">history</i>
                                        <span class="ml-1"><b>Histórico</b> da ITSA4</span>
                                    </span>
                                </button>
                            </div>
                            <div class="text-center">
                                <a title="Valor de aluguel de todas as ações listadas na bolsa de valores"
                                    class="btn btn-secondary btn-max-md-xsmall waves-effect waves-light fs-2 fs-md-3 btn-block w-100"
                                    href="https://statusinvest.com.br/acoes/aluguel">
                                    <span class="d-none d-xs-inline-block">Ver o </span> <b>aluguel</b> de todas as
                                    <b>empresas</b>
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="container external-report ads-lazy-group
                pl-sm-0 pr-sm-0
                pt-5
            ">
                        <div class="a_x_d_x_s-external-report
                    pt-1 pb-1 pl-0 pl-md-1 pr-0 pr-md-1" data-id="report-1"
                            data-images="/advertising/1eaf1d6d1c974907a169c5d63c51698e/report/itsa-1.png|/advertising/1eaf1d6d1c974907a169c5d63c51698e/report/itsa-1-m.png|/advertising/1eaf1d6d1c974907a169c5d63c51698e/report/itsa-1-l.png"
                            style="overflow: hidden;">
                            <a role="none"
                                href="https://lp.suno.com.br/lm/relatorio/drops-itausa-itsa4/?utm_source=statusinvest&amp;utm_medium=banner&amp;utm_campaign=lm-relatorio.20220317&amp;utm_content=ticker"
                                target="_blank" rel="noopener noreferrer nofollow">
                                <div class="image">anúncio</div>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="white ">
            <div class="container pb-7 pt-7">
                <h2 class="fs-4 fs-xs-5 mt-0 mb-5 fw-900 text-main">
                    EVENTOS CORPORATIVOS
                </h2>
                <div class="pb-5">
                    <div id="earning-section"
                        class="card chart-and-list scroll-y no-scroll-md-y rounded pt-md-3 pb-3 show-empty-callback"
                        data-asset-earnings-list="" data-ticker="ITSA4" data-cleanname="itausa" data-tickertype="acao">
                        <input id="results" name="results" type="hidden"
                            value="[{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;28/02/2023&quot;,&quot;pd&quot;:&quot;03/04/2023&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.023529500000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02352950&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;08/12/2022&quot;,&quot;pd&quot;:&quot;28/04/2023&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.141000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,14100000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;08/12/2022&quot;,&quot;pd&quot;:&quot;29/12/2023&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.044500000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,04450000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/11/2022&quot;,&quot;pd&quot;:&quot;02/01/2023&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.023529500000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02352950&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;18/11/2022&quot;,&quot;pd&quot;:&quot;29/12/2023&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.051540000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,05154000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/08/2022&quot;,&quot;pd&quot;:&quot;03/10/2022&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.023529500000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02352950&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;18/08/2022&quot;,&quot;pd&quot;:&quot;30/08/2022&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.010300000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01030000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;18/08/2022&quot;,&quot;pd&quot;:&quot;29/12/2023&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.049400000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,04940000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/05/2022&quot;,&quot;pd&quot;:&quot;01/07/2022&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.023529500000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02352950&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;24/03/2022&quot;,&quot;pd&quot;:&quot;30/08/2022&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.113370000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,11337000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;14/01/2022&quot;,&quot;pd&quot;:&quot;11/03/2022&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.133340000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,13334000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;13/12/2021&quot;,&quot;pd&quot;:&quot;01/04/2022&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.023529500000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02352950&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/11/2021&quot;,&quot;pd&quot;:&quot;03/01/2022&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.023529500000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02352950&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;23/11/2021&quot;,&quot;pd&quot;:&quot;11/03/2022&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.154720000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,15472000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/08/2021&quot;,&quot;pd&quot;:&quot;01/10/2021&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.020000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;13/08/2021&quot;,&quot;pd&quot;:&quot;26/08/2021&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.037340000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,03734000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/05/2021&quot;,&quot;pd&quot;:&quot;01/07/2021&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.020000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;24/05/2021&quot;,&quot;pd&quot;:&quot;26/08/2021&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.018400000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01840000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;27/04/2021&quot;,&quot;pd&quot;:&quot;26/08/2021&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.021310000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02131000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;25/03/2021&quot;,&quot;pd&quot;:&quot;26/08/2021&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.019080000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01908000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;09/03/2021&quot;,&quot;pd&quot;:&quot;26/08/2021&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.015456000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01545600&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;26/02/2021&quot;,&quot;pd&quot;:&quot;01/04/2021&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.020000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;22/01/2021&quot;,&quot;pd&quot;:&quot;12/03/2021&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.020800000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02080000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;10/12/2020&quot;,&quot;pd&quot;:&quot;12/03/2021&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.101650000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,10165000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/11/2020&quot;,&quot;pd&quot;:&quot;04/01/2021&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.020000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/08/2020&quot;,&quot;pd&quot;:&quot;01/10/2020&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.020000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;17/08/2020&quot;,&quot;pd&quot;:&quot;26/08/2020&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.020000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;29/05/2020&quot;,&quot;pd&quot;:&quot;01/07/2020&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.020000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;28/02/2020&quot;,&quot;pd&quot;:&quot;01/04/2020&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.020000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;20/02/2020&quot;,&quot;pd&quot;:&quot;06/03/2020&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.226000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,22600000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;20/02/2020&quot;,&quot;pd&quot;:&quot;06/03/2020&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.217400000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,21740000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;12/12/2019&quot;,&quot;pd&quot;:&quot;06/03/2020&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.005950000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,00595000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;29/11/2019&quot;,&quot;pd&quot;:&quot;02/01/2020&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.020000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/08/2019&quot;,&quot;pd&quot;:&quot;01/10/2019&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.020000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;15/08/2019&quot;,&quot;pd&quot;:&quot;23/08/2019&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.340500000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,34050000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/05/2019&quot;,&quot;pd&quot;:&quot;01/07/2019&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.020000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;28/02/2019&quot;,&quot;pd&quot;:&quot;01/04/2019&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.020000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;21/02/2019&quot;,&quot;pd&quot;:&quot;07/03/2019&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.311100000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,31110000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;21/02/2019&quot;,&quot;pd&quot;:&quot;07/03/2019&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.453200000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,45320000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;17/12/2018&quot;,&quot;pd&quot;:&quot;07/03/2019&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.008100000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,00810000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/11/2018&quot;,&quot;pd&quot;:&quot;02/01/2019&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.020000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,02000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/08/2018&quot;,&quot;pd&quot;:&quot;01/10/2018&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;17/08/2018&quot;,&quot;pd&quot;:&quot;30/08/2018&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.199200000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,19920000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;17/08/2018&quot;,&quot;pd&quot;:&quot;30/08/2018&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.009600000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,00960000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/05/2018&quot;,&quot;pd&quot;:&quot;02/07/2018&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;28/02/2018&quot;,&quot;pd&quot;:&quot;02/04/2018&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;22/02/2018&quot;,&quot;pd&quot;:&quot;05/04/2018&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.110300000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,11030000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;22/02/2018&quot;,&quot;pd&quot;:&quot;05/04/2018&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.185000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,18500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;22/02/2018&quot;,&quot;pd&quot;:&quot;07/03/2018&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.374000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,37400000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;25/12/2017&quot;,&quot;pd&quot;:&quot;30/04/2018&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.168060000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,16806000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/11/2017&quot;,&quot;pd&quot;:&quot;02/01/2018&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/08/2017&quot;,&quot;pd&quot;:&quot;02/10/2017&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;23/02/2017&quot;,&quot;pd&quot;:&quot;03/04/2017&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;20/02/2017&quot;,&quot;pd&quot;:&quot;03/03/2017&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.049000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,04900000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;20/02/2017&quot;,&quot;pd&quot;:&quot;06/04/2017&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.118800000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,11880000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;22/12/2016&quot;,&quot;pd&quot;:&quot;28/04/2017&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.228000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,22800000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;22/12/2016&quot;,&quot;pd&quot;:&quot;30/06/2017&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.048000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,04800000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/11/2016&quot;,&quot;pd&quot;:&quot;02/01/2017&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/08/2016&quot;,&quot;pd&quot;:&quot;03/10/2016&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;29/02/2016&quot;,&quot;pd&quot;:&quot;01/04/2016&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;18/02/2016&quot;,&quot;pd&quot;:&quot;29/02/2016&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.075500000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,07550000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;18/02/2016&quot;,&quot;pd&quot;:&quot;29/02/2016&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.106300000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,10630000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;09/12/2015&quot;,&quot;pd&quot;:&quot;29/02/2016&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.120900000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,12090000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/11/2015&quot;,&quot;pd&quot;:&quot;04/01/2016&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/08/2015&quot;,&quot;pd&quot;:&quot;01/10/2015&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;12/08/2015&quot;,&quot;pd&quot;:&quot;25/08/2015&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.086500000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,08650000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;29/05/2015&quot;,&quot;pd&quot;:&quot;01/07/2015&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;27/02/2015&quot;,&quot;pd&quot;:&quot;01/04/2015&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;10/02/2015&quot;,&quot;pd&quot;:&quot;26/02/2015&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.174120000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,17412000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;10/02/2015&quot;,&quot;pd&quot;:&quot;26/02/2015&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.041900000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,04190000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;10/02/2015&quot;,&quot;pd&quot;:&quot;31/03/2015&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.049700000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,04970000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;19/12/2014&quot;,&quot;pd&quot;:&quot;26/02/2015&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.035600000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,03560000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;28/11/2014&quot;,&quot;pd&quot;:&quot;02/01/2015&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;29/08/2014&quot;,&quot;pd&quot;:&quot;01/10/2014&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;13/08/2014&quot;,&quot;pd&quot;:&quot;25/08/2014&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.082000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,08200000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/05/2014&quot;,&quot;pd&quot;:&quot;01/07/2014&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;04/03/2014&quot;,&quot;pd&quot;:&quot;01/04/2014&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;20/12/2013&quot;,&quot;pd&quot;:&quot;28/02/2014&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.086000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,08600000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;29/11/2013&quot;,&quot;pd&quot;:&quot;02/01/2014&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/08/2013&quot;,&quot;pd&quot;:&quot;01/10/2013&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;06/08/2013&quot;,&quot;pd&quot;:&quot;21/08/2013&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.071000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,07100000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/05/2013&quot;,&quot;pd&quot;:&quot;01/07/2013&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;28/02/2013&quot;,&quot;pd&quot;:&quot;01/04/2013&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;25/12/2012&quot;,&quot;pd&quot;:&quot;28/06/2013&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.097000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,09700000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;25/12/2012&quot;,&quot;pd&quot;:&quot;28/06/2013&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.110000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,11000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/11/2012&quot;,&quot;pd&quot;:&quot;02/01/2013&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/08/2012&quot;,&quot;pd&quot;:&quot;01/10/2012&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/05/2012&quot;,&quot;pd&quot;:&quot;02/07/2012&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.015000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;29/02/2012&quot;,&quot;pd&quot;:&quot;08/06/2012&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.134820000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,13482000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;29/02/2012&quot;,&quot;pd&quot;:&quot;02/04/2012&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.014000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01400000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;29/02/2012&quot;,&quot;pd&quot;:&quot;13/03/2012&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.012880000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01288000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;26/12/2011&quot;,&quot;pd&quot;:&quot;13/03/2012&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.140000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,14000000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/11/2011&quot;,&quot;pd&quot;:&quot;02/01/2012&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.014000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01400000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/08/2011&quot;,&quot;pd&quot;:&quot;03/10/2011&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.014000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01400000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;09/08/2011&quot;,&quot;pd&quot;:&quot;22/08/2011&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.078000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,07800000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/05/2011&quot;,&quot;pd&quot;:&quot;01/07/2011&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.014000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01400000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;29/03/2011&quot;,&quot;pd&quot;:&quot;10/06/2011&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.111700000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,11170000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;31/12/2010&quot;,&quot;pd&quot;:&quot;17/03/2011&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.087400000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,08740000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;30/11/2010&quot;,&quot;pd&quot;:&quot;03/01/2011&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.014000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01400000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;10/08/2010&quot;,&quot;pd&quot;:&quot;20/08/2010&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.071600000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,07160000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;02/03/2010&quot;,&quot;pd&quot;:&quot;10/06/2010&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.073000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,07300000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;02/03/2010&quot;,&quot;pd&quot;:&quot;10/03/2010&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.108457400000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,10845740&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;01/01/2010&quot;,&quot;pd&quot;:&quot;10/03/2010&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.035000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,03500000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;21/08/2009&quot;,&quot;pd&quot;:&quot;31/08/2009&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.051200000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,05120000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;09/03/2009&quot;,&quot;pd&quot;:&quot;17/03/2009&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.131200000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,13120000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;09/03/2009&quot;,&quot;pd&quot;:&quot;10/06/2009&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.138000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,13800000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;01/01/2009&quot;,&quot;pd&quot;:&quot;17/03/2009&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.042700000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,04270000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;18/09/2008&quot;,&quot;pd&quot;:&quot;01/10/2008&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.014000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01400000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;15/08/2008&quot;,&quot;pd&quot;:&quot;25/08/2008&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.043500000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,04350000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;20/06/2008&quot;,&quot;pd&quot;:&quot;01/07/2008&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.014000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01400000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;22/02/2008&quot;,&quot;pd&quot;:&quot;01/04/2008&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.012000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01200000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;22/02/2008&quot;,&quot;pd&quot;:&quot;03/03/2008&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.173000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,17300000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;26/11/2007&quot;,&quot;pd&quot;:&quot;02/01/2008&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.012000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01200000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;26/11/2007&quot;,&quot;pd&quot;:&quot;03/03/2008&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.019550000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01955000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;18/09/2007&quot;,&quot;pd&quot;:&quot;01/10/2007&quot;,&quot;et&quot;:&quot;Dividendo&quot;,&quot;etd&quot;:&quot;Dividendo&quot;,&quot;v&quot;:0.012000000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,01200000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false},{&quot;y&quot;:0,&quot;m&quot;:0,&quot;d&quot;:0,&quot;ad&quot;:null,&quot;ed&quot;:&quot;17/08/2007&quot;,&quot;pd&quot;:&quot;27/08/2007&quot;,&quot;et&quot;:&quot;JCP&quot;,&quot;etd&quot;:&quot;Juros Sobre Capital Próprio&quot;,&quot;v&quot;:0.043350000000000000,&quot;ov&quot;:null,&quot;sv&quot;:&quot;0,04335000&quot;,&quot;sov&quot;:&quot;-&quot;,&quot;adj&quot;:false}]">
                        <div class="d-md-flex justify-between align-items-center mb-2">
                            <div class="card-title">
                                <a href="https://statusinvest.com.br/termos/p/proventos"
                                    title="Artigo detalhando proventos" target="_blank" rel="noopener"
                                    class="term-indicator-link d-flex align-items-center">
                                    <h3 class="m-0 lh-4">DIVIDENDOS DA ITAUSA (ITSA4)</h3>
                                    <span class="material-icons">format_quote</span>
                                    <i data-position="top" style="max-width: 14px;"
                                        class="v-align-middle material-icons help-icon tooltipped tooltipped-html fs-3 ml-1"
                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Os dividendos representam uma parcela dos lucros de uma empresa listada na bolsa que é distribuída entre os seus acionistas ao final do exercício social.
&lt;br&gt;
&lt;br&gt;
O pagamento de dividendos é feito proporcionalmente ao número de papéis que cada acionista possui.
&lt;/div&gt;
">
                                        help_outline

                                    </i>
                                </a>
                            </div>
                            <div class="align-items-center d-flex justify-center mt-2 mt-sm-3 mt-md-0 justify-md-end">
                                <ul class="tabs transparent  w-xs-70 w-sm-60 w-md-auto">
                                    <li class="tab col s3" title="Proventos distribuídos no ano 2022 e 2023 ">
                                        <a role="button" data-type="0" class="active"
                                            href="https://statusinvest.com.br/acoes/itsa4#earnings-0">
                                            2023 / 2022
                                        </a>
                                    </li>
                                    <li class="tab col s3" title="Proventos distribuídos nos últimos 5 anos">
                                        <a role="button" data-type="1"
                                            href="https://statusinvest.com.br/acoes/itsa4#earnings-1">
                                            5 anos
                                        </a>
                                    </li>
                                    <li class="tab col s3"
                                        title="Proventos distribuídos desde a abertura de capital na bolsa de valores">
                                        <a role="button" data-type="2"
                                            href="https://statusinvest.com.br/acoes/itsa4#earnings-2">
                                            Max.
                                        </a>
                                    </li>
                                    <li class="indicator" style="left: 0px; right: 146px;"></li>
                                </ul>
                                <div class="d-block d-none">

                                    <a class="bg-main-green-dark btn btn-xsmall dropdown-trigger pl-1 pr-1"
                                        href="https://statusinvest.com.br/acoes/itsa4#!"
                                        data-target="dropdown-earnings"><span>2023 /
                                            2022</span><i class="material-icons right ml-1">arrow_drop_down</i></a>
                                    <ul id="dropdown-earnings" class="dropdown-content" tabindex="0">
                                        <li title="Proventos distribuídos no ano 2022 e 2023 " tabindex="0">
                                            <a role="button" data-type="0">2023 / 2022</a>
                                        </li>
                                        <li title="Proventos distribuídos nos últimos 5 anos" tabindex="0">
                                            <a role="button" data-type="1">5 anos</a>
                                        </li>
                                        <li title="Proventos distribuídos desde a abertura de capital na bolsa de valores"
                                            tabindex="0">
                                            <a role="button" data-type="2">máx.</a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div id="earnings-0" class="chart-container p-relative active">
                            <div class="main-charts">
                            </div>
                        </div>
                        <div id="earnings-1" class="chart-container p-relative" style="display:none">
                            <div class="main-charts">
                            </div>
                        </div>
                        <div id="earnings-2" class="chart-container p-relative" style="display:none">
                            <div class="main-charts">
                            </div>
                        </div>
                        <span class="graph-empty fs-4 fw-100 grey-text text-center text-darken-1 uppercase mt-4"
                            style="display:none"><span class="d-block d-sm-inline-block">Não há proventos </span> neste
                            período</span>
                        <div class="switch pt-1 pb-1 mb-2">
                            <label role="switch" aria-checked="false" class="fw-100 fs-3 grey-text text-darken-4"
                                title="Agrupar a soma dos proventos distribuídos por ano">
                                <input type="checkbox" name="is-anualy">
                                <span class="v-align-middle lever m-0"></span>
                                <span class="v-align-middle">AGRUPAR POR ANO</span>
                            </label>
                        </div>
                        <div class="fw-600 grey lighten-2 mb-3 p-2 rounded">
                            O último provento pago do ITSA4 foi um jcp de R$0,0235 por papel no dia 02/01/23.
                        </div>
                        <div class="list">
                            <div class="list-content" tabindex="0" data-scroll-spy="991">
                                <div class="top-info width-auto sm d-flex justify-between bg-main-gd-h white-text">
                                    <div class="info w-lg-20">
                                        <div>
                                            <div title="Soma dos proventos distribuídos ano passado">
                                                <div
                                                    class="title m-0 legend-tooltip pr-3 mr-1 d-flex align-items-center">
                                                    <h3 class="title m-0 ">Ano passado</h3>
                                                    &nbsp;
                                                    <i style="max-width: 21px;" data-position="top"
                                                        class="material-icons help-icon tooltipped tooltipped-html text-white"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;Observação:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light&quot;&gt;
&lt;span class=&quot;fs-2 fw-900&quot;&gt; Esse indicador foi calculado com base nos dividendos recebidos entre 01/01/2022 e 06/01/2022&lt;/span&gt;
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                                <span class="icon">R$</span>
                                                <strong class="value">0,0000</strong>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="info w-lg-20">
                                        <div>
                                            <div title="Soma dos proventos distribuídos este ano">
                                                <div
                                                    class="title m-0 legend-tooltip pr-3 mr-1 d-flex align-items-center">
                                                    <h3 class="title m-0 ">Ano atual</h3>
                                                    &nbsp;
                                                    <i style="max-width: 21px;" data-position="top"
                                                        class="material-icons help-icon tooltipped tooltipped-html text-white"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;Observação:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light&quot;&gt;
&lt;span class=&quot;fs-2 fw-900&quot;&gt;Esse indicador foi calculado com base nos dividendos recebidos entre 01/01/2023 e 06/01/2023&lt;/span&gt;
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                                <span class="icon">R$</span>
                                                <strong class="value">0,0000</strong>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="info w-lg-20">
                                        <div>
                                            <div
                                                title="Comparação dos proventos distribuídos ano passado com o ano atual">
                                                <span class="title">Comparação</span>
                                                <i style="max-width: 14px;"
                                                    class="material-icons fs-3 v-align-middle">arrow_upward</i>
                                                <strong class="value v-align-middle">0,00%</strong>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="info w-lg-20">
                                        <div title="Soma total dos proventos provisionados">
                                            <div>
                                                <div
                                                    class="title m-0 legend-tooltip pr-3 mr-1 d-flex align-items-center">
                                                    <h3 class="title m-0 ">Provisionado</h3>
                                                    &nbsp;
                                                    <i style="max-width: 21px;" data-position="top"
                                                        class="material-icons help-icon tooltipped tooltipped-html text-white"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
&lt;small class=&quot;mt-2 fs-2 d-block&quot;&gt;Observação:&lt;/small&gt;
&lt;small class=&quot;text-main-secondary-light&quot;&gt;
&lt;span class=&quot;fs-2 fw-900&quot;&gt;Esse indicador foi calculado com base nos dividendos declarados, mas que possuem a data de pagamento superior a 06/01/2023, ou ainda não possuem uma data de pagamento definida.&lt;/span&gt;
&lt;/small&gt;
&lt;/div&gt;
">
                                                        help_outline

                                                    </i>
                                                </div>
                                                <span class="icon">R$</span>
                                                <strong class="value">0,0235</strong>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="info w-lg-25 w-xl-20">
                                        <div
                                            title="Comparação dos proventos distribuídos ano passado com o ano atual mais o total provisionado">
                                            <div>
                                                <span class="title">Comparação + Provisionado</span>
                                                <i style="max-width: 14px;"
                                                    class="material-icons fs-3 v-align-middle">arrow_upward</i>
                                                <strong class="value v-align-middle">0,00%</strong>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="min-height:479px">
                                    <table>
                                        <thead class="uppercase">
                                            <tr>
                                                <th title="Tipo do provento">Tipo</th>
                                                <th
                                                    title="Data limite de direito ao provento, após esta data, o ativo fica ex-dividendo">
                                                    DATA COM
                                                </th>
                                                <th title="Data de pagamento do provento">Pagamento</th>
                                                <th title="Valor do provento">Valor</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr class="">
                                                <td class="uppercase" title="Juros Sobre Capital Próprio">JCP</td>
                                                <td>28/02/2023</td>
                                                <td>03/04/2023</td>
                                                <td>0,02352950</td>
                                            </tr>
                                            <tr class="">
                                                <td class="uppercase" title="Juros Sobre Capital Próprio">JCP</td>
                                                <td>08/12/2022</td>
                                                <td>28/04/2023</td>
                                                <td>0,14100000</td>
                                            </tr>
                                            <tr class="">
                                                <td class="uppercase" title="Juros Sobre Capital Próprio">JCP</td>
                                                <td>08/12/2022</td>
                                                <td>29/12/2023</td>
                                                <td>0,04450000</td>
                                            </tr>
                                            <tr class="">
                                                <td class="uppercase" title="Juros Sobre Capital Próprio">JCP</td>
                                                <td>30/11/2022</td>
                                                <td>02/01/2023</td>
                                                <td>0,02352950</td>
                                            </tr>
                                            <tr class="">
                                                <td class="uppercase" title="Juros Sobre Capital Próprio">JCP</td>
                                                <td>18/11/2022</td>
                                                <td>29/12/2023</td>
                                                <td>0,05154000</td>
                                            </tr>
                                            <tr class="">
                                                <td class="uppercase" title="Juros Sobre Capital Próprio">JCP</td>
                                                <td>31/08/2022</td>
                                                <td>03/10/2022</td>
                                                <td>0,02352950</td>
                                            </tr>
                                            <tr class="">
                                                <td class="uppercase" title="Juros Sobre Capital Próprio">JCP</td>
                                                <td>18/08/2022</td>
                                                <td>30/08/2022</td>
                                                <td>0,01030000</td>
                                            </tr>
                                            <tr class="">
                                                <td class="uppercase" title="Juros Sobre Capital Próprio">JCP</td>
                                                <td>18/08/2022</td>
                                                <td>29/12/2023</td>
                                                <td>0,04940000</td>
                                            </tr>
                                            <tr class="">
                                                <td class="uppercase" title="Juros Sobre Capital Próprio">JCP</td>
                                                <td>31/05/2022</td>
                                                <td>01/07/2022</td>
                                                <td>0,02352950</td>
                                            </tr>
                                            <tr class="">
                                                <td class="uppercase" title="Juros Sobre Capital Próprio">JCP</td>
                                                <td>24/03/2022</td>
                                                <td>30/08/2022</td>
                                                <td>0,11337000</td>
                                            </tr>
                                            <tr class="">
                                                <td class="uppercase" title="Juros Sobre Capital Próprio">JCP</td>
                                                <td>14/01/2022</td>
                                                <td>11/03/2022</td>
                                                <td>0,13334000</td>
                                            </tr>
                                            <tr class="">
                                                <td class="uppercase" title="Juros Sobre Capital Próprio">JCP</td>
                                                <td>13/12/2021</td>
                                                <td>01/04/2022</td>
                                                <td>0,02352950</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <span
                                        class="list-empty fs-4 fw-100 grey-text text-center text-darken-1 uppercase mt-4 mb-4"
                                        style="display:none">Não há histórico <span class="d-block d-md-inline-block">de
                                            proventos
                                            para</span> este ativo</span>
                                </div>
                            </div>
                            <ul class="pagination mb-0">
                                <li class="disabled"><a href="https://statusinvest.com.br/acoes/itsa4#!"><i
                                            class="material-icons">chevron_left</i></a></li>
                                <li class="disabled"><a href="https://statusinvest.com.br/acoes/itsa4#!"><i
                                            class="material-icons">chevron_right</i></a></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="">
                    <div class="card p-2 p-xs-3">
                        <div class="card-title d-flex align-items-center justify-start">
                            <i class="material-icons v-align-middle d-inline-block ">library_add</i>&nbsp;<h3
                                class="m-0 d-inline-block v-align-middle">BONIFICAÇÃO</h3>
                            <i data-position="top" class="material-icons help-icon tooltipped tooltipped-html ml-1"
                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;Data de incorporação:&lt;/span&gt; Data em que as ações estarão disponíveis para os investidores
&lt;br&gt;
&lt;br&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;Valor base:&lt;/span&gt; Valor a ser usado no preço médio e declaração de imposto de renda
&lt;br&gt;
&lt;br&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;Proporção:&lt;/span&gt; Proporção da bonificação em relação ao total de ações já detidas
&lt;/div&gt;
">
                                help_outline

                            </i>
                        </div>
                        <div class="card-body">
                            <div class="mt-2 mt-md-0">
                                <div class="d-flex justify-between align-items-center flex-wrap flex-md-nowrap">
                                    <div class="w-xs-40 w-sm-33 w-md-auto">
                                        <small class="d-block fs-2 uppercase">Data <span
                                                class="d-none d-xs-inline-block">do</span>
                                            anúncio</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">07/11/2022</strong>
                                    </div>
                                    <div class="w-xs-30 w-sm-33 w-md-auto">
                                        <small class="d-block fs-2 uppercase">Data com</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">10/11/2022</strong>
                                    </div>
                                    <div class="w-xs-30 w-sm-33 w-md-auto">
                                        <small class="d-block fs-2 uppercase">Data ex</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">11/11/2022</strong>
                                    </div>
                                    <div
                                        class="d-flex flex-wrap grey justify-between lighten-4 rounded w-100 w-md-50 pt-1 pb-1 mt-1 mt-md-0 p-xs-1 p-sm-2">
                                        <div class="w-xs-40 w-sm-33 w-md-auto">
                                            <small class="d-block fs-2 uppercase">Data <span
                                                    class="d-none d-sm-inline-block">de</span>
                                                incorporação</small>
                                            <strong class="d-block lh-3 fs-3 fw-700">16/11/2022</strong>
                                        </div>
                                        <div class="w-xs-30 w-sm-33 w-md-auto">
                                            <small class="d-block fs-2 uppercase">Valor base</small>
                                            <strong class="d-block lh-3 fs-3 fw-700">R$ 13,65</strong>
                                        </div>
                                        <div class="w-xs-30 w-sm-33 w-md-auto">
                                            <small class="d-block fs-2 uppercase">Proporção</small>
                                            <strong class="d-block lh-3 fs-3 fw-700">10,00%</strong>
                                        </div>
                                        <div class="w-xs-30 w-sm-33 w-md-auto">
                                            <small class="d-block fs-2 uppercase">Ativo emitido</small>
                                            <strong class="d-block lh-3 fs-3 fw-700">
                                                <a class="text-main-green-dark" itemtype="https://schema.org/Thing"
                                                    itemprop="item" href="https://statusinvest.com.br/acoes/itsa4">
                                                    <span itemprop="name">ITSA4</span>
                                                </a>
                                            </strong>
                                        </div>
                                    </div>
                                </div>
                                <hr class="border-grey-lighten-1 border-top-1 mt-2 mb-2 ">
                                <div class="d-flex justify-between align-items-center flex-wrap flex-md-nowrap">
                                    <div class="w-xs-40 w-sm-33 w-md-auto">
                                        <small class="d-block fs-2 uppercase">Data <span
                                                class="d-none d-xs-inline-block">do</span>
                                            anúncio</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">14/12/2021</strong>
                                    </div>
                                    <div class="w-xs-30 w-sm-33 w-md-auto">
                                        <small class="d-block fs-2 uppercase">Data com</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">20/12/2021</strong>
                                    </div>
                                    <div class="w-xs-30 w-sm-33 w-md-auto">
                                        <small class="d-block fs-2 uppercase">Data ex</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">21/12/2021</strong>
                                    </div>
                                    <div
                                        class="d-flex flex-wrap grey justify-between lighten-4 rounded w-100 w-md-50 pt-1 pb-1 mt-1 mt-md-0 p-xs-1 p-sm-2">
                                        <div class="w-xs-40 w-sm-33 w-md-auto">
                                            <small class="d-block fs-2 uppercase">Data <span
                                                    class="d-none d-sm-inline-block">de</span>
                                                incorporação</small>
                                            <strong class="d-block lh-3 fs-3 fw-700">23/12/2021</strong>
                                        </div>
                                        <div class="w-xs-30 w-sm-33 w-md-auto">
                                            <small class="d-block fs-2 uppercase">Valor base</small>
                                            <strong class="d-block lh-3 fs-3 fw-700">R$ 18,89</strong>
                                        </div>
                                        <div class="w-xs-30 w-sm-33 w-md-auto">
                                            <small class="d-block fs-2 uppercase">Proporção</small>
                                            <strong class="d-block lh-3 fs-3 fw-700">5,00%</strong>
                                        </div>
                                        <div class="w-xs-30 w-sm-33 w-md-auto">
                                            <small class="d-block fs-2 uppercase">Ativo emitido</small>
                                            <strong class="d-block lh-3 fs-3 fw-700">
                                                <a class="text-main-green-dark" itemtype="https://schema.org/Thing"
                                                    itemprop="item" href="https://statusinvest.com.br/acoes/itsa4">
                                                    <span itemprop="name">ITSA4</span>
                                                </a>
                                            </strong>
                                        </div>
                                    </div>
                                </div>
                                <hr class="border-grey-lighten-1 border-top-1 mt-2 mb-2 ">
                                <div class="d-flex justify-between align-items-center flex-wrap flex-md-nowrap">
                                    <div class="w-xs-40 w-sm-33 w-md-auto">
                                        <small class="d-block fs-2 uppercase">Data <span
                                                class="d-none d-xs-inline-block">do</span>
                                            anúncio</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">24/05/2018</strong>
                                    </div>
                                    <div class="w-xs-30 w-sm-33 w-md-auto">
                                        <small class="d-block fs-2 uppercase">Data com</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">30/05/2018</strong>
                                    </div>
                                    <div class="w-xs-30 w-sm-33 w-md-auto">
                                        <small class="d-block fs-2 uppercase">Data ex</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">01/06/2018</strong>
                                    </div>
                                    <div
                                        class="d-flex flex-wrap grey justify-between lighten-4 rounded w-100 w-md-50 pt-1 pb-1 mt-1 mt-md-0 p-xs-1 p-sm-2">
                                        <div class="w-xs-40 w-sm-33 w-md-auto">
                                            <small class="d-block fs-2 uppercase">Data <span
                                                    class="d-none d-sm-inline-block">de</span>
                                                incorporação</small>
                                            <strong class="d-block lh-3 fs-3 fw-700">06/06/2018</strong>
                                        </div>
                                        <div class="w-xs-30 w-sm-33 w-md-auto">
                                            <small class="d-block fs-2 uppercase">Valor base</small>
                                            <strong class="d-block lh-3 fs-3 fw-700">R$ 6,54</strong>
                                        </div>
                                        <div class="w-xs-30 w-sm-33 w-md-auto">
                                            <small class="d-block fs-2 uppercase">Proporção</small>
                                            <strong class="d-block lh-3 fs-3 fw-700">10,00%</strong>
                                        </div>
                                        <div class="w-xs-30 w-sm-33 w-md-auto">
                                            <small class="d-block fs-2 uppercase">Ativo emitido</small>
                                            <strong class="d-block lh-3 fs-3 fw-700">
                                                <a class="text-main-green-dark" itemtype="https://schema.org/Thing"
                                                    itemprop="item" href="https://statusinvest.com.br/acoes/itsa4">
                                                    <span itemprop="name">ITSA4</span>
                                                </a>
                                            </strong>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="pt-5">
                    <div class="card p-2 p-xs-3">
                        <div class="card-title d-flex align-items-center justify-start">
                            <i class="material-icons v-align-middle d-inline-block ">photo_size_select_small</i>&nbsp;
                            <h3 class="m-0 d-inline-block v-align-middle">DESDOBRAMENTO/GRUPAMENTO</h3>
                            <i data-position="top" class="material-icons help-icon tooltipped tooltipped-html ml-1"
                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;Desdobramento (Split):&lt;/span&gt; É quando a que empresas divide suas ações disponíveis em um número maior de ações.
&lt;br&gt;
&lt;br&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;Grupamento (Inplit):&lt;/span&gt; É a operação contrária ao split, onde reúne várias ações em uma.
&lt;br&gt;
&lt;br&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;Fator:&lt;/span&gt; É a proporção que o split/inplit será aplicado sobre o total de ações disponíveis
&lt;br&gt;
&lt;br&gt;
No processo do split/inplit, o número total de ações aumenta/diminui mas o valor das ações cai/sobe na mesma proporção, mantendo o valor do investimento inalterado.
&lt;/div&gt;
">
                                help_outline

                            </i>
                        </div>
                        <div class="card-body">
                            <span class="d-block fs-4 fw-100_ grey-text mt-3 mt-sm-2 mb-3 text-center text-darken-3">NÃO
                                HÁ
                                DESDOBRAMENTO OU GRUPAMENTO</span>
                        </div>
                    </div>
                </div>
                <div class="container advertising ads-lazy-group
                pl-sm-0 pr-sm-0
                pt-5
         ">
                    <div class="a_x_d_x_s-banner
                    pt-1 pb-1 pl-0 pl-md-1 pr-0 pr-md-1
             " style="overflow: hidden;" data-id="banner-2">
                        <pubguru data-pg-ad="statusinvest_desktop_banner"></pubguru>
                    </div>
                </div>
            </div>
        </div>
        <div class="container pb-7 pt-7">
            <div id="payout-section" data-company="345" data-code="itsa4" data-category="1">
                <div>
                    <span class="bg-secondary-color-gd-h d-inline-block fw-900 lh-4 pl-1 pr-1 rounded white-text">
                        <span class="d-flex align-items-center">
                            <span>BETA</span>&nbsp;
                            <i data-position="top"
                                class="material-icons help-icon tooltipped tooltipped-html fs-3 text-white"
                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O payout histórico também depende do histórico de total de papéis, e esta é uma informação de que estamos terminando de construir nossa base.
&lt;br&gt;
&lt;br&gt;
Por isso, pode haver alguma inconsistência na parte histórica de alguns ativos.
&lt;/div&gt;
">
                                help_outline

                            </i>
                        </span>
                    </span>
                    <h2 title="Payout  da  ITAUSA" class="fs-4 fs-xs-5 mt-0 mb-4 mb-sm-5 fw-900 text-main">
                        PAYOUT DA ITAUSA
                    </h2>
                    <div class="card chart-and-list rounded pt-3 pb-3 mb-5 show-empty-callback">
                        <div class="d-md-flex justify-between align-items-center mb-2 mb-lg-4">
                            <div
                                class="values d-flex flex-wrap justify-around flex-sm-nowrap align-items-center w-100 w-md-auto ">
                                <div class="w-45 w-xs-auto">
                                    <span class="title">MÉDIA</span>
                                    <strong class="value" data-item="avg_F">-</strong>
                                </div>
                                <div class="w-50 w-xs-auto">
                                    <span class="title">ATUAL</span>
                                    <strong class="value">
                                        <span class="d-sm-block d-lg-inline-block" data-item="actual_F">-</span>
                                        <small class="d-none d-sm-block d-lg-inline-block fs-2 lh-2 fw-700">(<span
                                                data-item="avgDifference_F"></span>)</small>
                                    </strong>
                                </div>
                                <div class="w-45 w-xs-auto mt-3 mt-xs-0">
                                    <span class="title">MENOR&nbsp;VALOR</span>
                                    <strong class="value">
                                        <span class="d-sm-block d-lg-inline-block" data-item="minValue_F">-</span>
                                        <small class="d-sm-block d-lg-inline-block fs-2 lh-2 fw-700">(<span
                                                data-item="minValueRank_F">-</span>)</small>
                                    </strong>
                                </div>
                                <div class="w-50 w-xs-auto mt-3 mt-xs-0">
                                    <span class="title">MAIOR&nbsp;VALOR</span>
                                    <strong class="value">
                                        <span class="d-sm-block d-lg-inline-block" data-item="maxValue_F"></span>
                                        <small class="d-sm-block d-lg-inline-block fs-2 lh-2 fw-700">
                                            (<span data-item="maxValueRank_F"></span>)
                                        </small>
                                    </strong>
                                </div>
                            </div>
                            <div class="mt-3 mt-md-0">
                                <div class="d-flex justify-center align-items-center ">
                                    <div>
                                        <ul class="tabs transparent d-md-none d-lg-block">
                                            <li title="Payout dos últimos 5 anos" class="tab col s3">
                                                <a role="button" class="active"
                                                    href="https://statusinvest.com.br/acoes/itsa4#payout-0"
                                                    data-type="0">5 anos</a>
                                            </li>
                                            <li title="Payout dos últimos 10 anos" class="tab col s3">
                                                <a role="button" href="https://statusinvest.com.br/acoes/itsa4#payout-1"
                                                    data-type="1">10
                                                    anos</a>
                                            </li>
                                            <li title="Payout do período máximo da base" class="tab col s3">
                                                <a role="button" href="https://statusinvest.com.br/acoes/itsa4#payout-2"
                                                    data-type="2">Max.</a>
                                            </li>
                                            <li class="indicator" style="left: 0px; right: 153px;"></li>
                                        </ul>
                                        <div class="d-none d-md-block d-lg-none">

                                            <a class="btn btn-xsmall dropdown-trigger"
                                                href="https://statusinvest.com.br/acoes/itsa4#!"
                                                data-target="dropdown-payout"><span>5 anos</span><i
                                                    class="material-icons right">arrow_drop_down</i></a>
                                            <ul id="dropdown-payout" class="dropdown-content" tabindex="0">
                                                <li title="Payout dos últimos 5 anos" tabindex="0">
                                                    <a role="button" data-type="0">5 anos</a>
                                                </li>
                                                <li title="Payout dos últimos 10 anos" tabindex="0">
                                                    <a role="button" data-type="1">10 anos</a>
                                                </li>
                                                <li title="Payout do período máximo da base" tabindex="0">
                                                    <a role="button" data-type="2">máx.</a>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div label="Gráfico com a payout  da  ITAUSA" class="chart-container">
                            <div class="main-charts"></div>
                        </div>
                        <span class="graph-empty fs-4 fw-100 grey-text text-center text-darken-1 uppercase"
                            style="display:none">Não
                            há dados neste período</span>
                    </div>
                </div>
            </div>
        </div>
        <div id="company-section">
            <div class="pb-7 pt-7 white">
                <input id="company-relateds" name="company-relateds" type="hidden"
                    value="[{&quot;CompanyId&quot;:333,&quot;CompanyName&quot;:&quot;BANCO BANESE&quot;,&quot;CompanyNameClean&quot;:&quot;banese&quot;,&quot;DefaultAssetCode&quot;:&quot;BGIP4&quot;},{&quot;CompanyId&quot;:339,&quot;CompanyName&quot;:&quot;BANCO NORDESTE DO BRASIL&quot;,&quot;CompanyNameClean&quot;:&quot;banco-nordeste&quot;,&quot;DefaultAssetCode&quot;:&quot;BNBR3&quot;},{&quot;CompanyId&quot;:325,&quot;CompanyName&quot;:&quot;BANCO INTER&quot;,&quot;CompanyNameClean&quot;:&quot;banco-inter&quot;,&quot;DefaultAssetCode&quot;:&quot;BIDI4&quot;},{&quot;CompanyId&quot;:785,&quot;CompanyName&quot;:&quot;BR ADVISORY PARTNERS PARTICIPAÇÕES S.A.&quot;,&quot;CompanyNameClean&quot;:&quot;br-partners&quot;,&quot;DefaultAssetCode&quot;:&quot;BRBI11&quot;},{&quot;CompanyId&quot;:330,&quot;CompanyName&quot;:&quot;BRADESCO&quot;,&quot;CompanyNameClean&quot;:&quot;bradesco&quot;,&quot;DefaultAssetCode&quot;:&quot;BBDC4&quot;},{&quot;CompanyId&quot;:324,&quot;CompanyName&quot;:&quot;ALFA HOLDINGS&quot;,&quot;CompanyNameClean&quot;:&quot;alfa-holding&quot;,&quot;DefaultAssetCode&quot;:&quot;RPAD6&quot;},{&quot;CompanyId&quot;:338,&quot;CompanyName&quot;:&quot;BANCO MERCANTIL DO BRASIL&quot;,&quot;CompanyNameClean&quot;:&quot;banco-mercantil-brasil&quot;,&quot;DefaultAssetCode&quot;:&quot;BMEB4&quot;},{&quot;CompanyId&quot;:336,&quot;CompanyName&quot;:&quot;BANCO INDUSVAL&quot;,&quot;CompanyNameClean&quot;:&quot;bancoindusval&quot;,&quot;DefaultAssetCode&quot;:&quot;IDVL4&quot;},{&quot;CompanyId&quot;:340,&quot;CompanyName&quot;:&quot;BANCO PAN&quot;,&quot;CompanyNameClean&quot;:&quot;banco-pan&quot;,&quot;DefaultAssetCode&quot;:&quot;BPAN4&quot;},{&quot;CompanyId&quot;:335,&quot;CompanyName&quot;:&quot;BANCO BANRISUL&quot;,&quot;CompanyNameClean&quot;:&quot;banrisul&quot;,&quot;DefaultAssetCode&quot;:&quot;BRSR3&quot;}]">
                <div class="container">
                    <div class="d-block d-md-flex mb-5 img-lazy-group">
                        <div title="Logotipo da empresa &#39;ITAUSA&#39;"
                            class="company-brand w-100 w-md-30 p-3 rounded mb-3 mb-md-0 bg-lazy"
                            data-img="url(/img/company/cover/345.jpg?v=8)">
                        </div>
                        <div class="company-description w-100 w-md-70 ml-md-5">
                            <h4 class="mb-2 mt-0 fs-4">
                                <span class="d-block fw-600 text-main-green-dark">ITAUSA INVESTIMENTOS ITAU S.A.</span>
                                <small class="d-block fs-4 fw-100 lh-4">61.532.644/0001-15</small>
                            </h4>
                            <span title="Site da empresa">
                                <a href="http://www.itausa.com.br/" target="_blank" rel="noopener noreferrer nofollow"
                                    class="waves-effect waves-light btn btn-small btn-secondary">
                                    <i class="material-icons v-align-middle left">public</i> Site oficial
                                </a>
                            </span>
                            <div>
                            </div>
                            <div class="mt-1">
                                <b class="uppercase fs-2 ">Empresas relacionadas:</b>
                                <div class="related d-flex flex-wrap flex-md-nowrap">
                                    <a title="Ir até o detalhe da empresa &#39;BANCO BANESE&#39;"
                                        aria-label="Ir até o detalhe da empresa &#39;BANCO BANESE&#39;"
                                        href="https://statusinvest.com.br/acoes/bgip4">
                                        <span class="logo bg-lazy waves-effect"
                                            data-img="url(/img/company/square/333.jpg?v=8)"></span>
                                        <span class="code">BGIP4</span>
                                    </a>
                                    <a title="Ir até o detalhe da empresa &#39;BANCO NORDESTE DO BRASIL&#39;"
                                        aria-label="Ir até o detalhe da empresa &#39;BANCO NORDESTE DO BRASIL&#39;"
                                        href="https://statusinvest.com.br/acoes/bnbr3">
                                        <span class="logo bg-lazy waves-effect"
                                            data-img="url(/img/company/square/339.jpg?v=8)"></span>
                                        <span class="code">BNBR3</span>
                                    </a>
                                    <a title="Ir até o detalhe da empresa &#39;BANCO INTER&#39;"
                                        aria-label="Ir até o detalhe da empresa &#39;BANCO INTER&#39;"
                                        href="https://statusinvest.com.br/acoes/bidi4">
                                        <span class="logo bg-lazy waves-effect"
                                            data-img="url(/img/company/square/325.jpg?v=8)"></span>
                                        <span class="code">BIDI4</span>
                                    </a>
                                    <a title="Ir até o detalhe da empresa &#39;BR ADVISORY PARTNERS PARTICIPAÇÕES S.A.&#39;"
                                        aria-label="Ir até o detalhe da empresa &#39;BR ADVISORY PARTNERS PARTICIPAÇÕES S.A.&#39;"
                                        href="https://statusinvest.com.br/acoes/brbi11">
                                        <span class="logo bg-lazy waves-effect"
                                            data-img="url(/img/company/square/785.jpg?v=8)"></span>
                                        <span class="code">BRBI11</span>
                                    </a>
                                    <a title="Ir até o detalhe da empresa &#39;BRADESCO&#39;"
                                        aria-label="Ir até o detalhe da empresa &#39;BRADESCO&#39;"
                                        href="https://statusinvest.com.br/acoes/bbdc4">
                                        <span class="logo bg-lazy waves-effect"
                                            data-img="url(/img/company/square/330.jpg?v=8)"></span>
                                        <span class="code">BBDC4</span>
                                    </a>
                                    <a title="Ir até o detalhe da empresa &#39;ALFA HOLDINGS&#39;"
                                        aria-label="Ir até o detalhe da empresa &#39;ALFA HOLDINGS&#39;"
                                        href="https://statusinvest.com.br/acoes/rpad6">
                                        <span class="logo bg-lazy waves-effect"
                                            data-img="url(/img/company/square/324.jpg?v=8)"></span>
                                        <span class="code">RPAD6</span>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="top-info info-3 sm d-flex justify-between mb-3">
                        <div class="info">
                            <div>
                                <div
                                    title="É uma referência aos bens e direitos que podem ser convertidos em dinheiro em curto prazo.">
                                    <h3 class="title m-0"></h3>
                                    <a href="https://statusinvest.com.br/termos/p/patrimonio-liquido"
                                        title="Artigo detalhando Patrimônio líquido" target="_blank" rel="noopener"
                                        class="term-indicator-link d-flex align-items-center">
                                        <h3 class="title m-0">Patrimônio líquido</h3>
                                        <span class="material-icons">format_quote</span>
                                    </a>
                                    <b class="icon">R$</b>
                                    <strong class="value">70.827.000.000</strong>
                                </div>
                            </div>
                        </div>
                        <div class="info">
                            <div>
                                <div title="Ativo - Todos os bens, direitos e valores a receber de uma entidade">
                                    <h3 class="title m-0">Ativos</h3>
                                    <b class="icon">R$</b>
                                    <strong class="value">95.943.000.000</strong>
                                </div>
                            </div>
                        </div>
                        <div class="info">
                            <div>
                                <div
                                    title="Ativo Circulante - Bens ou direitos que podem ser convertido em dinheiro em curto prazo">
                                    <h3 class="title m-0">Ativo circulante</h3>
                                    <div>
                                        <b class="icon">R$</b>
                                        <strong class="value">11.187.000.000</strong>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="info">
                            <div>
                                <div
                                    title="Representa o somatório do saldo devedor de todas as dívidas contraídas pela empresa.">
                                    <a href="https://statusinvest.com.br/termos/d/divida-bruta"
                                        title="Artigo detalhando Dívida bruta" target="_blank" rel="noopener"
                                        class="term-indicator-link d-flex align-items-center">
                                        <h3 class="title m-0">Dívida bruta</h3>
                                        <span class="material-icons">format_quote</span>
                                    </a>
                                    <b class="icon">R$</b>
                                    <strong class="value">13.963.000.000</strong>
                                </div>
                            </div>
                        </div>
                        <div class="info">
                            <div>
                                <div title="Representa o saldo de caixa livre da empresa.">
                                    <h3 class="title m-0">Disponibilidade</h3>
                                    <b class="icon">R$</b>
                                    <strong class="value">6.576.000.000</strong>
                                </div>
                            </div>
                        </div>
                        <div class="info">
                            <div>
                                <div
                                    title="A dívida Líquida que é a Dívida Bruta menos as Disponibilidades da companhia. De modo geral, representa a quantidade de dinheiro necessária para a empresa zerar o seu endividamento">
                                    <a href="https://statusinvest.com.br/termos/d/divida-liquida"
                                        title="Artigo detalhando Dívida líquida" target="_blank" rel="noopener"
                                        class="term-indicator-link d-flex align-items-center">
                                        <h3 class="title m-0">Dívida líquida</h3>
                                        <span class="material-icons">format_quote</span>
                                    </a>
                                    <b class="icon">R$</b>
                                    <strong class="value">7.387.000.000</strong>
                                </div>
                            </div>
                        </div>
                        <div class="info" title="O valor da ação multiplicado pelo número de ações existentes">
                            <div>
                                <div>
                                    <a href="https://statusinvest.com.br/termos/v/valor-de-mercado"
                                        title="Artigo detalhando Valor de mercado" target="_blank" rel="noopener"
                                        class="term-indicator-link d-flex align-items-center">
                                        <h3 class="title m-0">Valor de mercado</h3>
                                        <span class="material-icons">format_quote</span>
                                    </a>
                                    <b class="icon">R$</b>
                                    <strong class="value">83.668.201.243</strong>
                                </div>
                            </div>
                        </div>
                        <div class="info" title="Soma do valor de mercado das ações com a dívida líquida dessa empresa">
                            <div>
                                <div>
                                    <a href="https://statusinvest.com.br/termos/v/valor-de-firma"
                                        title="Artigo detalhando Valor de firma" target="_blank" rel="noopener"
                                        class="term-indicator-link d-flex align-items-center">
                                        <h3 class="title m-0">Valor de firma</h3>
                                        <span class="material-icons">format_quote</span>
                                    </a>
                                    <b class="icon">R$</b>
                                    <strong class="value">91.055.201.243</strong>
                                </div>
                            </div>
                        </div>
                        <div class="info">
                            <div title="Total de papéis disponíveis para negociação">
                                <div>
                                    <h3 class="title m-0 legend-tooltip">
                                        <span class="d-inline-block mr-2">Nº total de papéis</span>
                                        <i data-position="top"
                                            class="material-icons help-icon tooltipped tooltipped-html " data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Total de de ações da empresa. Ações em livre circulação, em posse dos controladores, administradores, etc.
&lt;div class=&quot;d-flex justify-start mt-3&quot;&gt;
&lt;span class=&quot;mr-4&quot;&gt;
&lt;span class=&quot;d-block  fw-100&quot;&gt;ON&lt;/span&gt;
&lt;span class=&quot;d-block fw-900 text-main-secondary-light&quot;&gt;3.333.921.095&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;&quot;&gt;
&lt;span class=&quot;d-block fw-100&quot;&gt;PN&lt;/span&gt;
&lt;span class=&quot;d-block fw-900 text-main-secondary-light&quot;&gt;6.367.488.620&lt;/span&gt;
&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;
">
                                            help_outline

                                        </i>
                                    </h3>
                                    <strong class="value">9.701.409.715</strong>
                                </div>
                            </div>
                        </div>
                        <div class="info">
                            <div title="Segmento de listagem na B3">
                                <div>
                                    <h3 class="title m-0">Segmento de listagem</h3>
                                    <strong class="value">Nível 1</strong>
                                </div>
                            </div>
                        </div>
                        <div class="info">
                            <div title="">
                                <div>
                                    <div class="title m-0 legend-tooltip d-flex align-items-center">
                                        <a href="https://statusinvest.com.br/termos/f/free-float"
                                            title="Artigo detalhando Free Float" target="_blank" rel="noopener"
                                            class="term-indicator-link d-flex align-items-center mr-2">
                                            <h3 class="title m-0">Free Float</h3>
                                            <span class="material-icons">format_quote</span>
                                        </a>
                                        <i data-position="top"
                                            class="material-icons help-icon tooltipped tooltipped-html " data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
O Free Float (FF) é a porcentagem de ações da empresa que estão em livre circulação no mercado, sendo negociadas através da bolsa de valores.
&lt;div class=&quot;mt-3&quot;&gt;
&lt;span class=&quot;d-block fw-100&quot;&gt;Total de ações&lt;/span&gt;
&lt;span class=&quot;d-block mt-1 lh-3 fw-600 fs-4 text-main-secondary-light&quot;&gt;6.455.095.682&lt;/span&gt;
&lt;/div&gt;
&lt;div class=&quot;mt-3 mb-1&quot;&gt;
Total de cada &lt;b&gt;tipo&lt;/b&gt; de papel:
&lt;/div&gt;
&lt;div class=&quot;d-flex justify-start &quot;&gt;
&lt;span class=&quot;ml-1 mr-4&quot;&gt;
&lt;span class=&quot;d-block  fw-100&quot;&gt;ON&lt;/span&gt;
&lt;span class=&quot;d-block fw-900 text-main-secondary-light&quot;&gt;36,65%&lt;/span&gt;
&lt;span class=&quot;d-block fs-2 fw-600 text-main-secondary-light&quot;&gt;1.222.019.387&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;&quot;&gt;
&lt;span class=&quot;d-block fw-100&quot;&gt;PN&lt;/span&gt;
&lt;span class=&quot;d-block fw-900 text-main-secondary-light&quot;&gt;82,18%&lt;/span&gt;
&lt;span class=&quot;d-block fs-2 fw-600 text-main-secondary-light&quot;&gt;5.233.076.295&lt;/span&gt;
&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;
">
                                            help_outline

                                        </i>
                                    </div>
                                    <strong class="value">66,54%</strong>
                                </div>
                            </div>
                        </div>
                        <div class="info d-none d-sm-block">
                            <div title="">
                                <div>
                                    <h3 class="title m-0">&nbsp;</h3>
                                    <strong class="value">&nbsp;</strong>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card bg-main-gd-h white-text rounded ov-hidden pt-0 pb-0">
                        <div class="top-info top-info-1 top-info-sm-2 top-info-md-n sm d-flex justify-between ">
                            <div class="info pr-md-2">
                                <div>
                                    <div>
                                        <span class="sub-value">Setor de Atuação</span>
                                        <div>
                                            <a title="Ver outras empresas do setor &#39;Financeiro e Outros&#39;"
                                                href="https://statusinvest.com.br/acoes/setor/4/financeiro-e-outros"
                                                class="white-text d-flex">
                                                <strong class="value">Financeiro e Outros</strong>
                                                <i class="ml-3 material-icons">arrow_forward</i>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="info pl-md-2 pr-md-2">
                                <div>
                                    <div>
                                        <span class="sub-value">Subsetor de Atuação</span>
                                        <div>
                                            <a title="Ver outras empresas do subsetor &#39;Intermediários Financeiros&#39;"
                                                href="https://statusinvest.com.br/acoes/setor/4/financeiro-e-outros/24/intermediarios-financeiros"
                                                class="white-text d-flex">
                                                <strong class="value">Intermediários Financeiros</strong>
                                                <i class="ml-3 material-icons">arrow_forward</i>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="info pl-md-2 ">
                                <div>
                                    <div>
                                        <span class="sub-value">Segmento de Atuação</span>
                                        <div>
                                            <a title="Ver outras empresas do segmento &#39;Bancos&#39;"
                                                href="https://statusinvest.com.br/acoes/setor/4/financeiro-e-outros/24/intermediarios-financeiros/54/bancos"
                                                class="white-text d-flex">
                                                <strong class="value">Bancos</strong>
                                                <i class="ml-3 material-icons">arrow_forward</i>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="container mt-5 news-container">
                <input id="news-text-hidden" name="news-text-hidden" type="hidden" value="{
  &quot;content&quot;: [
    {
      &quot;contentId&quot;: 6219,
      &quot;providerConfigurationId&quot;: 35,
      &quot;contentUrl&quot;: &quot;https://url.statusinvest.com.br/9hQruJEYk8&quot;,
      &quot;title&quot;: &quot;Agenda de dividendos de janeiro: Petrobras, Santos Brasil, Itaúsa e Direcional pagam nesse mês&quot;,
      &quot;description&quot;: null,
      &quot;content&quot;: &quot;&lt;p&gt;O ano novo começou com proventos a caminho. Segundo levantamento do &lt;strong&gt;InfoMoney&lt;/strong&gt;, 33 empresas vão pagar dividendos e juros sobre capital próprio (JCP) neste mês. Entre elas estão Petrobras, Santos Brasil, Banco ABC, Itaúsa e Direcional.&lt;/p&gt;&lt;p&gt;Entre os maiores valores, o destaque fica com a Petrobras (&lt;a href=&#39;&#39;/&gt;PETR3&lt;/a&gt;;&lt;a href=&#39;&#39;/&gt;PETR4&lt;/a&gt;), que paga a segunda parcela dos dividendos bilionários relativos ao resultado do terceiro trimestre de 2022. Os investidores receberão R$ 1,67 por ação no dia 19, sendo R$ 1,60 em dividendos e R$ 0,07 em juros sobre capital próprio (JCP).&lt;/p&gt;&lt;p&gt;Lembrando que JCPs são tributados – portanto, deste valor será descontado na fonte automaticamente o Imposto de Renda de 15%.&lt;/p&gt;&lt;p&gt;Embora a Petrobras tenha vivido em 2022 um dos seus melhores anos no quesito lucratividade e remuneração aos acionistas, a expectativa é de que a história não se repita neste ano.&lt;/p&gt;&lt;p&gt;A estatal foi a maior pagadora de dividendos da B3 em 2022, distribuindo R$ 16,74 por ação, com um &lt;em&gt;dividend yield&lt;/em&gt; (taxa de retorno com dividendos) de 58,84%. Em valores brutos, foi responsável por mais da metade dos proventos das companhias listadas na Bolsa. No segundo trimestre de 2022, chegou a figurar como a maior pagadora de dividendos do mundo, e foi a terceira no terceiro trimestre, segundo ranking da gestora Janus Henderson.&lt;/p&gt;&lt;p&gt;Contudo, apesar da companhia ter a capacidade de entregar um &lt;em&gt;dividend yield&lt;/em&gt; entre 6% e 22% em 2023, segundo projeções de casas de análise e corretoras, muitos analistas já retiraram a petrolífera das suas carteiras de dividendos e substituíram a empresa por opções com melhor relação de risco e retorno.&lt;/p&gt;&lt;p&gt;Na lista de pagadoras de janeiro também está a empresa de autopeças Mahle Metal Leve (&lt;a href=&#39;&#39;/&gt;LEVE3&lt;/a&gt;), que distribui JCP de R$ 0,84 por ação no dia 26, para quem tinha os papéis em carteira em 29 de dezembro.&lt;/p&gt;&lt;p&gt;Segundo Sergio Biz, sócio e analista do GuiaInvest, a Metal Leve tem um dos melhores históricos de dividendos do setor industrial e continua entregando resultados resilientes. Um dos seus pontos fortes é a tendência positiva para o segmento de peças de reposição (&lt;em&gt;aftermarket&lt;/em&gt;) no Brasil, com veículos com idade avançada, o que deve se traduzir em aumento da demanda, avalia Biz.&lt;/p&gt;&lt;p&gt;Ainda entre os maiores dividendos de janeiro estão os da Arezzo  (&lt;a href=&#39;&#39;/&gt;ARZZ3&lt;/a&gt;) e da Direcional  (&lt;a href=&#39;&#39;/&gt;DIRR3&lt;/a&gt;). A varejista de calçados paga JCP de R$ 0,75 por ação no dia 30. Já a construtora, focada em empreendimentos populares de grande porte, deve remunerar os seus acionistas com dividendos de R$ 0,70 no dia 9.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Leia também:&lt;/strong&gt;&lt;/p&gt;&lt;p class=&#39;&#39;&gt;• &lt;a href=&#39;&#39;/&gt;BEES3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,021&lt;/td&gt;&lt;td style=&#39;&#39;&gt;02/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;30/11/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Banestes (&lt;a href=&#39;&#39;/&gt;BEES4&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,021&lt;/td&gt;&lt;td style=&#39;&#39;&gt;02/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;30/11/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Bradesco (&lt;a href=&#39;&#39;/&gt;BBDC3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,017&lt;/td&gt;&lt;td style=&#39;&#39;&gt;02/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;01/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Bradesco (&lt;a href=&#39;&#39;/&gt;BBDC4&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,019&lt;/td&gt;&lt;td style=&#39;&#39;&gt;02/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;01/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Hypera (&lt;a href=&#39;&#39;/&gt;HYPE3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,31&lt;/td&gt;&lt;td style=&#39;&#39;&gt;02/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;22/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Hypera (&lt;a href=&#39;&#39;/&gt;HYPE3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,31&lt;/td&gt;&lt;td style=&#39;&#39;&gt;02/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;28/03/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Hypera (&lt;a href=&#39;&#39;/&gt;HYPE3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,31&lt;/td&gt;&lt;td style=&#39;&#39;&gt;02/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;28/09/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Hypera (&lt;a href=&#39;&#39;/&gt;HYPE3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,31&lt;/td&gt;&lt;td style=&#39;&#39;&gt;02/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;27/06/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Itaúsa (&lt;a href=&#39;&#39;/&gt;ITSA3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,024&lt;/td&gt;&lt;td style=&#39;&#39;&gt;02/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;30/11/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Itaúsa (&lt;a href=&#39;&#39;/&gt;ITSA4&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,024&lt;/td&gt;&lt;td style=&#39;&#39;&gt;02/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;30/11/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Itaú  (&lt;a href=&#39;&#39;/&gt;ITUB3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,018&lt;/td&gt;&lt;td style=&#39;&#39;&gt;02/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;30/11/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Itaú  (&lt;a href=&#39;&#39;/&gt;ITUB4&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,018&lt;/td&gt;&lt;td style=&#39;&#39;&gt;02/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;30/11/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Hermes Pardini (&lt;a href=&#39;&#39;/&gt;PARD3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,13&lt;/td&gt;&lt;td style=&#39;&#39;&gt;03/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;22/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Vittia (&lt;a href=&#39;&#39;/&gt;VITT3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,14&lt;/td&gt;&lt;td style=&#39;&#39;&gt;04/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;16/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Comgás (&lt;a href=&#39;&#39;/&gt;CGAS3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,12&lt;/td&gt;&lt;td style=&#39;&#39;&gt;05/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;26/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Comgás (&lt;a href=&#39;&#39;/&gt;CGAS5&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,13&lt;/td&gt;&lt;td style=&#39;&#39;&gt;05/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;26/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Lojas Renner (&lt;a href=&#39;&#39;/&gt;LREN3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,18&lt;/td&gt;&lt;td style=&#39;&#39;&gt;06/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;21/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Movida (&lt;a href=&#39;&#39;/&gt;MOVI3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,15&lt;/td&gt;&lt;td style=&#39;&#39;&gt;06/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;30/09/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;JSL (&lt;a href=&#39;&#39;/&gt;JSLG3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,24&lt;/td&gt;&lt;td style=&#39;&#39;&gt;06/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;27/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Simpar  (&lt;a href=&#39;&#39;/&gt;SIMH3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,14&lt;/td&gt;&lt;td style=&#39;&#39;&gt;06/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;27/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Direcional  (&lt;a href=&#39;&#39;/&gt;DIRR3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;Dividendo&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,70&lt;/td&gt;&lt;td style=&#39;&#39;&gt;09/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;16/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Even (&lt;a href=&#39;&#39;/&gt;EVEN3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;Dividendo&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,15&lt;/td&gt;&lt;td style=&#39;&#39;&gt;11/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;18/11/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Melnick (&lt;a href=&#39;&#39;/&gt;MELK3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;Dividendo&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,05&lt;/td&gt;&lt;td style=&#39;&#39;&gt;11/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;16/11/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Profarma  (&lt;a href=&#39;&#39;/&gt;PFRM3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,17&lt;/td&gt;&lt;td style=&#39;&#39;&gt;13/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;20/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;SLC Agrícola (&lt;a href=&#39;&#39;/&gt;SLCE3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,35&lt;/td&gt;&lt;td style=&#39;&#39;&gt;13/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;26/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;B3 (&lt;a href=&#39;&#39;/&gt;B3SA3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,064&lt;/td&gt;&lt;td style=&#39;&#39;&gt;13/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;29/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Banco ABC (&lt;a href=&#39;&#39;/&gt;ABCB4&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,37&lt;/td&gt;&lt;td style=&#39;&#39;&gt;13/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;29/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Fonte: InfoMoney com Quantum Axis e RI das empresas. JCP = &lt;a href=&#39;&#39;/&gt;ITSA4&lt;/a&gt; em 2023. O preço-teto de compra sugerido é de R$ 9,50. Cleide, por sua vez, projeta uma taxa de 7%.&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;Direcional&lt;/strong&gt;: &lt;strong&gt;há melhores construtoras para ganhar dividendos&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Daniel Nigri, fundador e analista da Dica de Hoje Research&lt;strong&gt;, &lt;/strong&gt;explica que a Direcional (&lt;a href=&#39;&#39;/&gt;DIRR3&lt;/a&gt;) iniciou um processo de reestruturação entre 2015 e 2017, tornando-se uma empresa mais enxuta. “A companhia decidiu diversificar e não depender apenas dos riscos do programa Minha Casa Minha Vida”, afirma. Criou, então, a Incorporadora Riva – o seu braço para atuar em segmentos de médio e alto padrão.&lt;/p&gt;&lt;p&gt;Diferentemente de concorrentes, a Direcional não foca apenas na capital paulista, já saturada de lançamentos, segundo Nigri. “Como houve um crescimento muito forte de 2018 a 2021 em São Paulo, com muita oferta de imóvel, a demanda retraiu rapidamente depois”, explica.&lt;/p&gt;&lt;p&gt;Embora pertença a um setor cíclico, Nigri destaca que a Direcional poderia pagar dividendos de R$ 0,70  a R$ 1 por ação, com uma média de 6% de &lt;em&gt;dividend yield&lt;/em&gt; em um cenário em que ainda haja demanda por obras. &amp;#8220;Mesmo assim, vejo com bons olhos outras empresas do setor”, aponta.&lt;/p&gt;&lt;p&gt;O analista destaca, por exemplo, a Eztec (&lt;a href=&#39;&#39;/&gt;EZTC3&lt;/a&gt;), com boas perspectivas para proventos no médio e longo prazo. “Para dividendos, o &lt;em&gt;turnaround&lt;/em&gt; [reestruturação] da Direcional me parece muito recente”, avalia.&lt;/p&gt;&lt;p&gt;O preço das ações também é um risco, na visão de Nigri, já que os fundamentos de qualidade da empresa já estão precificados pelo mercado. “O investidor vai pagar um valor muito acima daquele que o mercado paga, por conta da expectativa de crescimento futuro”, diz. A maioria das construtoras, segundo o analista, negocia a 1 vez o preço sobre valor patrimonial (P/VP), enquanto o múltiplo da Direcional é de 1,7 vez. Já em relação ao preço sobre lucro (P/L), a Direcional negocia a 13 vezes, enquanto o setor de construção apresenta um indicador de no máximo 6 vezes.&lt;/p&gt;&lt;p&gt;Entre as vantagens estão o banco de terrenos da companhia e o fato de ser a empresa com maior margem bruta no programa Minha Casa Minha Vida. “Mas isso já está embutido no preço”, reforça. Nigri projeta dividendos de R$ 0,80 a R$ 0,90 por ação em 2023, um &lt;em&gt;dividend yield&lt;/em&gt; de 5% a 7%. Contudo, a recomendação do analista é neutra.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Leia também:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;• &lt;a href=&#39;&#39;/&gt;CSUD3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,16&lt;/td&gt;&lt;td style=&#39;&#39;&gt;16/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;30/09/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;CSU Digital  (&lt;a href=&#39;&#39;/&gt;CSUD3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,13&lt;/td&gt;&lt;td style=&#39;&#39;&gt;16/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;21/06/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;CSU Digital (&lt;a href=&#39;&#39;/&gt; CSUD3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,097&lt;/td&gt;&lt;td style=&#39;&#39;&gt;16/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;11/03/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;CSU Digital (&lt;a href=&#39;&#39;/&gt; CSUD3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,16&lt;/td&gt;&lt;td style=&#39;&#39;&gt;16/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;02/01/2023&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Santos Brasil  (&lt;a href=&#39;&#39;/&gt;STBP3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,015&lt;/td&gt;&lt;td style=&#39;&#39;&gt;16/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;20/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt; Romi (&lt;a href=&#39;&#39;/&gt;ROMI3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,21&lt;/td&gt;&lt;td style=&#39;&#39;&gt;18/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;21/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Fras-le  (&lt;a href=&#39;&#39;/&gt;FRAS3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,18&lt;/td&gt;&lt;td style=&#39;&#39;&gt;19/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;21/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Petrobras (&lt;a href=&#39;&#39;/&gt;PETR3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;Dividendo&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 1,60&lt;/td&gt;&lt;td style=&#39;&#39;&gt;19/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;21/11/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Petrobras  (&lt;a href=&#39;&#39;/&gt;PETR3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,07&lt;/td&gt;&lt;td style=&#39;&#39;&gt;19/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;21/11/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Petrobras (&lt;a href=&#39;&#39;/&gt;PETR4&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;Dividendo&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 1,60&lt;/td&gt;&lt;td style=&#39;&#39;&gt;19/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;21/11/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Petrobras (&lt;a href=&#39;&#39;/&gt;PETR4&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,07&lt;/td&gt;&lt;td style=&#39;&#39;&gt;19/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;21/11/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Randon (&lt;a href=&#39;&#39;/&gt;RAPT3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,29&lt;/td&gt;&lt;td style=&#39;&#39;&gt;20/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;22/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Randon (&lt;a href=&#39;&#39;/&gt;RAPT4&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,29&lt;/td&gt;&lt;td style=&#39;&#39;&gt;20/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;22/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Tim (&lt;a href=&#39;&#39;/&gt;TIMS3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,19&lt;/td&gt;&lt;td style=&#39;&#39;&gt;24/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;21/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Banco Pan (&lt;a href=&#39;&#39;/&gt;BPAN4&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,25&lt;/td&gt;&lt;td style=&#39;&#39;&gt;24/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;27/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;JHSF (&lt;a href=&#39;&#39;/&gt;JHSF3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;Dividendo&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,05&lt;/td&gt;&lt;td style=&#39;&#39;&gt;26/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;17/01/2023&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Mahle Metal Leve (&lt;a href=&#39;&#39;/&gt;LEVE3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,84&lt;/td&gt;&lt;td style=&#39;&#39;&gt;26/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;29/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Cielo (&lt;a href=&#39;&#39;/&gt;CIEL3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,089&lt;/td&gt;&lt;td style=&#39;&#39;&gt;27/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;23/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Totvs (&lt;a href=&#39;&#39;/&gt;TOTS3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,21&lt;/td&gt;&lt;td style=&#39;&#39;&gt;27/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;29/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Arezzo  (&lt;a href=&#39;&#39;/&gt;ARZZ3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,75&lt;/td&gt;&lt;td style=&#39;&#39;&gt;30/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;16/12/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#39;&#39;&gt;&lt;td style=&#39;&#39;&gt;Tim (&lt;a href=&#39;&#39;/&gt;TIMS3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,10&lt;/td&gt;&lt;td style=&#39;&#39;&gt;31/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;21/09/2022&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&#39;&#39;&gt;Valid (&lt;a href=&#39;&#39;/&gt;VLID3&lt;/a&gt;)&lt;/td&gt;&lt;td style=&#39;&#39;&gt;JCP&lt;/td&gt;&lt;td style=&#39;&#39;&gt;R$ 0,26&lt;/td&gt;&lt;td style=&#39;&#39;&gt;31/01/2023&lt;/td&gt;&lt;td style=&#39;&#39;&gt;05/01/2023&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Fonte: InfoMoney com Quantum Axis e RI das empresas. JCP = &lt;a href=&#39;&#39;/&gt;STBP3&lt;/a&gt;) atua no setor de infraestrutura e tem como principal operação o Porto de Santos – por onde passa quase 40% da balança comercial brasileira. “O Porto de Santos é uma região muito importante para o desenvolvimento do País e está captando todo o crescimento, tanto via exportações de produtos do agronegócio, principalmente soja, como importações de condutores”, destaca.&lt;/p&gt;&lt;p&gt;Embora concorra com outros quatro operadores no Porto de Santos, a Santos Brasil é a empresa com maior participação de mercado do setor. Ele destaca que alguns contratos são de médio prazo, renegociados com armadores há cada dois anos.&lt;/p&gt;&lt;p&gt;Fora isso, a empresa está investindo fora do estado de São Paulo – no Maranhão, por exemplo, onde venceu uma concessão em 2022. “A Santos Brasil tem capital para crescer, dívida baixa, está investindo e consegue pagar bons dividendos em um setor com risco relativamente baixo”, afirma Alves. Ele projeta um &lt;em&gt;dividend yield &lt;/em&gt;de 8,2% em 2023. “Isso considerando que a companhia não distribua todo o lucro, por estar reinvestindo na operação”.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Leia também:&lt;/strong&gt;&lt;/p&gt;&lt;p class=&#39;&#39;&gt;• &lt;a href=&#39;&#39; target=\&quot;_blank\&quot; rel=\&quot;noopener\&quot;&gt;11 small caps que ainda pagam dividendos acima da Selic de 13,75%; em quais vale a pena investir em 2023?&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;É o fim da Petrobras nas carteiras de dividendos?&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Muitos analistas já retiraram ou pretendem retirar a Petrobras das carteiras recomendadas de dividendos para 2023.&lt;/p&gt;&lt;p&gt;A XP, por exemplo, fez esse movimento ainda em dezembro de 2022. Destacou que, apesar do desconto das ações e de acreditar no potencial de crescimento da empresa nos próximos anos, as incertezas políticas e possíveis interferências pesam mais. Recentemente, a corretora projetava um&lt;em&gt; dividend yield&lt;/em&gt; de 49% para as ações PETR4 e PETR3 em 2023.&lt;/p&gt;&lt;p&gt;Outra que deve retirar a Petrobras da carteira recomendada em 2023 é a Guide. “Não vale a pena ser sócio de uma empresa que não tem como objetivo gerar valor ao acionista”, destaca Mateus Haag, analista de equity da Guide. A projeção é de um &lt;em&gt;dividend yield&lt;/em&gt; de 22% no próximo ano.&lt;/p&gt;&lt;p&gt;Considerando que a Petrobras pode ter um &lt;em&gt;payout&lt;/em&gt; de 25% do lucro líquido em 2023, Júlio Borba, analista da Benndorf Research, espera um &lt;em&gt;dividend yield&lt;/em&gt; de 10% para a Petrobras, com destaque para as ações preferenciais. Contudo, não recomenda para uma carteira de renda passiva. “Os dividendos devem cair consideravelmente nos próximos quatro anos. Mas acho que o preço está suficientemente atrativo para quem busca valorização no longuíssimo prazo”.&lt;/p&gt;&lt;p&gt;A Levante passa longe da Petrobras há tempos. Flávio Conde, analista da casa, projeta que caso o lucro líquido da petrolífera recue 10%, os dividendos somariam R$ 2,64 por ação em 2023, um &lt;em&gt;dividend yield&lt;/em&gt; de 11,8%. Num cenário de queda de 20% no lucro, o retorno seria de 7,7%, ou R$ 1,73 por ação.&lt;/p&gt;&lt;p&gt;O único otimista entre os analistas ouvidos pelo &lt;strong&gt;InfoMoney&lt;/strong&gt; é Alves, da VG Research.  A casa recomenda compra de Petrobras desde 2020, e manteve o papel mesmo quando superou o preço-teto e o valor justo. “Temos ainda uma boa perspectiva para os dividendos da Petrobras em 2023. Após a queda de mais de 40% desde o pico recente, ela voltou ao radar”, destaca. Ele projeta &lt;em&gt;dividend yield&lt;/em&gt; de 11% no próximo ano – desde que a política de preços e os níveis do câmbio e da cotação do petróleo se mantenham.&lt;/p&gt;&lt;p&gt;“Os avanços feitos na gestão da companhia entre 2017 e 2022 a tornaram uma empresa de alta lucratividade e rentabilidade. Por isso, por pior que seja a próxima gestão, parte destes avanços permanecerão. De todo modo, nossa visão é de longo prazo. Para 20 ou 30 anos, a empresa continua e continuará a ser um bom negócio”, destaca Alves.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Leia também:&lt;/strong&gt;&lt;/p&gt;&lt;p class=&#39;&#39;&gt;• &lt;a href=&#39;&#39; target=\&quot;_blank\&quot; rel=\&quot;noopener\&quot;&gt;Petrobras perde espaço nas carteiras de dividendos em 2023, apesar de retorno previsto de até 22%; por quê?&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel=\&quot;nofollow\&quot; href=&#39;&#39;&gt;Agenda de dividendos de janeiro: Petrobras, Santos Brasil, Itaúsa e Direcional pagam nesse mês&lt;/a&gt; appeared first on &lt;a rel=\&quot;nofollow\&quot; href=&#39;&#39;&gt;InfoMoney&lt;/a&gt;.&lt;/p&gt;\n&quot;,
      &quot;tags&quot;: [
        &quot;Onde Investir&quot;,
        &quot;Agenda de dividendos&quot;,
        &quot;Direcional&quot;,
        &quot;Dividend yield&quot;,
        &quot;Dividendos&quot;,
        &quot;Itaúsa&quot;,
        &quot;Petrobras&quot;,
        &quot;Santos Brasil Participações&quot;,
        &quot;Viver de renda&quot;
      ],
      &quot;assets&quot;: [
        {
          &quot;assetId&quot;: 529,
          &quot;assetMainId&quot;: 408,
          &quot;ticker&quot;: &quot;PETR3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;PETR3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/petr3&quot;
        },
        {
          &quot;assetId&quot;: 530,
          &quot;assetMainId&quot;: 408,
          &quot;ticker&quot;: &quot;PETR4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;PETR4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/petr4&quot;
        },
        {
          &quot;assetId&quot;: 239,
          &quot;assetMainId&quot;: 213,
          &quot;ticker&quot;: &quot;LEVE3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;LEVE3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/leve3&quot;
        },
        {
          &quot;assetId&quot;: 253,
          &quot;assetMainId&quot;: 221,
          &quot;ticker&quot;: &quot;ARZZ3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ARZZ3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/arzz3&quot;
        },
        {
          &quot;assetId&quot;: 267,
          &quot;assetMainId&quot;: 231,
          &quot;ticker&quot;: &quot;DIRR3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;DIRR3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/dirr3&quot;
        },
        {
          &quot;assetId&quot;: 392,
          &quot;assetMainId&quot;: 326,
          &quot;ticker&quot;: &quot;BEES3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;BEES3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/bees3&quot;
        },
        {
          &quot;assetId&quot;: 393,
          &quot;assetMainId&quot;: 326,
          &quot;ticker&quot;: &quot;BEES4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;BEES4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/bees4&quot;
        },
        {
          &quot;assetId&quot;: 398,
          &quot;assetMainId&quot;: 330,
          &quot;ticker&quot;: &quot;BBDC3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;BBDC3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/bbdc3&quot;
        },
        {
          &quot;assetId&quot;: 399,
          &quot;assetMainId&quot;: 330,
          &quot;ticker&quot;: &quot;BBDC4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;BBDC4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/bbdc4&quot;
        },
        {
          &quot;assetId&quot;: 540,
          &quot;assetMainId&quot;: 417,
          &quot;ticker&quot;: &quot;HYPE3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;HYPE3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/hype3&quot;
        },
        {
          &quot;assetId&quot;: 426,
          &quot;assetMainId&quot;: 345,
          &quot;ticker&quot;: &quot;ITSA3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITSA3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itsa3&quot;
        },
        {
          &quot;assetId&quot;: 427,
          &quot;assetMainId&quot;: 345,
          &quot;ticker&quot;: &quot;ITSA4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITSA4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itsa4&quot;
        },
        {
          &quot;assetId&quot;: 424,
          &quot;assetMainId&quot;: 344,
          &quot;ticker&quot;: &quot;ITUB3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITUB3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itub3&quot;
        },
        {
          &quot;assetId&quot;: 425,
          &quot;assetMainId&quot;: 344,
          &quot;ticker&quot;: &quot;ITUB4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITUB4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itub4&quot;
        },
        {
          &quot;assetId&quot;: 551,
          &quot;assetMainId&quot;: 427,
          &quot;ticker&quot;: &quot;PARD3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;PARD3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/pard3&quot;
        },
        {
          &quot;assetId&quot;: 994,
          &quot;assetMainId&quot;: 803,
          &quot;ticker&quot;: &quot;VITT3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;VITT3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/vitt3&quot;
        },
        {
          &quot;assetId&quot;: 652,
          &quot;assetMainId&quot;: 482,
          &quot;ticker&quot;: &quot;CGAS3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;CGAS3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/cgas3&quot;
        },
        {
          &quot;assetId&quot;: 653,
          &quot;assetMainId&quot;: 482,
          &quot;ticker&quot;: &quot;CGAS5&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;CGAS5&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/cgas5&quot;
        },
        {
          &quot;assetId&quot;: 259,
          &quot;assetMainId&quot;: 224,
          &quot;ticker&quot;: &quot;LREN3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;LREN3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/lren3&quot;
        },
        {
          &quot;assetId&quot;: 284,
          &quot;assetMainId&quot;: 247,
          &quot;ticker&quot;: &quot;MOVI3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;MOVI3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/movi3&quot;
        },
        {
          &quot;assetId&quot;: 819,
          &quot;assetMainId&quot;: 635,
          &quot;ticker&quot;: &quot;JSLG3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;JSLG3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/jslg3&quot;
        },
        {
          &quot;assetId&quot;: 236,
          &quot;assetMainId&quot;: 210,
          &quot;ticker&quot;: &quot;SIMH3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;SIMH3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/simh3&quot;
        },
        {
          &quot;assetId&quot;: 268,
          &quot;assetMainId&quot;: 232,
          &quot;ticker&quot;: &quot;EVEN3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;EVEN3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/even3&quot;
        },
        {
          &quot;assetId&quot;: 820,
          &quot;assetMainId&quot;: 636,
          &quot;ticker&quot;: &quot;MELK3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;MELK3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/melk3&quot;
        },
        {
          &quot;assetId&quot;: 542,
          &quot;assetMainId&quot;: 419,
          &quot;ticker&quot;: &quot;PFRM3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;PFRM3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/pfrm3&quot;
        },
        {
          &quot;assetId&quot;: 338,
          &quot;assetMainId&quot;: 283,
          &quot;ticker&quot;: &quot;SLCE3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;SLCE3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/slce3&quot;
        },
        {
          &quot;assetId&quot;: 463,
          &quot;assetMainId&quot;: 367,
          &quot;ticker&quot;: &quot;B3SA3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;B3SA3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/b3sa3&quot;
        },
        {
          &quot;assetId&quot;: 394,
          &quot;assetMainId&quot;: 327,
          &quot;ticker&quot;: &quot;ABCB4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ABCB4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/abcb4&quot;
        },
        {
          &quot;assetId&quot;: 269,
          &quot;assetMainId&quot;: 233,
          &quot;ticker&quot;: &quot;EZTC3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;EZTC3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/eztc3&quot;
        },
        {
          &quot;assetId&quot;: 179,
          &quot;assetMainId&quot;: 170,
          &quot;ticker&quot;: &quot;CSUD3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;CSUD3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/csud3&quot;
        },
        {
          &quot;assetId&quot;: 221,
          &quot;assetMainId&quot;: 200,
          &quot;ticker&quot;: &quot;STBP3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;STBP3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/stbp3&quot;
        },
        {
          &quot;assetId&quot;: 196,
          &quot;assetMainId&quot;: 182,
          &quot;ticker&quot;: &quot;ROMI3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ROMI3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/romi3&quot;
        },
        {
          &quot;assetId&quot;: 208,
          &quot;assetMainId&quot;: 191,
          &quot;ticker&quot;: &quot;FRAS3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;FRAS3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/fras3&quot;
        },
        {
          &quot;assetId&quot;: 213,
          &quot;assetMainId&quot;: 194,
          &quot;ticker&quot;: &quot;RAPT3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;RAPT3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/rapt3&quot;
        },
        {
          &quot;assetId&quot;: 214,
          &quot;assetMainId&quot;: 194,
          &quot;ticker&quot;: &quot;RAPT4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;RAPT4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/rapt4&quot;
        },
        {
          &quot;assetId&quot;: 566,
          &quot;assetMainId&quot;: 439,
          &quot;ticker&quot;: &quot;TIMS3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;TIMS3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/tims3&quot;
        },
        {
          &quot;assetId&quot;: 417,
          &quot;assetMainId&quot;: 340,
          &quot;ticker&quot;: &quot;BPAN4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;BPAN4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/bpan4&quot;
        },
        {
          &quot;assetId&quot;: 273,
          &quot;assetMainId&quot;: 236,
          &quot;ticker&quot;: &quot;JHSF3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;JHSF3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/jhsf3&quot;
        },
        {
          &quot;assetId&quot;: 464,
          &quot;assetMainId&quot;: 368,
          &quot;ticker&quot;: &quot;CIEL3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;CIEL3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/ciel3&quot;
        },
        {
          &quot;assetId&quot;: 559,
          &quot;assetMainId&quot;: 435,
          &quot;ticker&quot;: &quot;TOTS3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;TOTS3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/tots3&quot;
        },
        {
          &quot;assetId&quot;: 186,
          &quot;assetMainId&quot;: 176,
          &quot;ticker&quot;: &quot;VLID3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;VLID3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/vlid3&quot;
        }
      ],
      &quot;priority&quot;: 0,
      &quot;imageUrl&quot;: &quot;https://www.infomoney.com.br/wp-content/uploads/2022/03/Dividendos.jpg&quot;,
      &quot;contentType&quot;: 2,
      &quot;resourceType&quot;: 0,
      &quot;isSponsored&quot;: false,
      &quot;isInstitutional&quot;: false,
      &quot;assetsSerialized&quot;: &quot;[{\&quot;AssetId\&quot;:529,\&quot;AssetMainId\&quot;:408,\&quot;Ticker\&quot;:\&quot;PETR3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;PETR3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/petr3\&quot;},{\&quot;AssetId\&quot;:530,\&quot;AssetMainId\&quot;:408,\&quot;Ticker\&quot;:\&quot;PETR4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;PETR4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/petr4\&quot;},{\&quot;AssetId\&quot;:239,\&quot;AssetMainId\&quot;:213,\&quot;Ticker\&quot;:\&quot;LEVE3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;LEVE3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/leve3\&quot;},{\&quot;AssetId\&quot;:253,\&quot;AssetMainId\&quot;:221,\&quot;Ticker\&quot;:\&quot;ARZZ3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ARZZ3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/arzz3\&quot;},{\&quot;AssetId\&quot;:267,\&quot;AssetMainId\&quot;:231,\&quot;Ticker\&quot;:\&quot;DIRR3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;DIRR3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/dirr3\&quot;},{\&quot;AssetId\&quot;:392,\&quot;AssetMainId\&quot;:326,\&quot;Ticker\&quot;:\&quot;BEES3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;BEES3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/bees3\&quot;},{\&quot;AssetId\&quot;:393,\&quot;AssetMainId\&quot;:326,\&quot;Ticker\&quot;:\&quot;BEES4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;BEES4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/bees4\&quot;},{\&quot;AssetId\&quot;:398,\&quot;AssetMainId\&quot;:330,\&quot;Ticker\&quot;:\&quot;BBDC3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;BBDC3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/bbdc3\&quot;},{\&quot;AssetId\&quot;:399,\&quot;AssetMainId\&quot;:330,\&quot;Ticker\&quot;:\&quot;BBDC4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;BBDC4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/bbdc4\&quot;},{\&quot;AssetId\&quot;:540,\&quot;AssetMainId\&quot;:417,\&quot;Ticker\&quot;:\&quot;HYPE3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;HYPE3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/hype3\&quot;},{\&quot;AssetId\&quot;:426,\&quot;AssetMainId\&quot;:345,\&quot;Ticker\&quot;:\&quot;ITSA3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITSA3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itsa3\&quot;},{\&quot;AssetId\&quot;:427,\&quot;AssetMainId\&quot;:345,\&quot;Ticker\&quot;:\&quot;ITSA4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITSA4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itsa4\&quot;},{\&quot;AssetId\&quot;:424,\&quot;AssetMainId\&quot;:344,\&quot;Ticker\&quot;:\&quot;ITUB3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITUB3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itub3\&quot;},{\&quot;AssetId\&quot;:425,\&quot;AssetMainId\&quot;:344,\&quot;Ticker\&quot;:\&quot;ITUB4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITUB4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itub4\&quot;},{\&quot;AssetId\&quot;:551,\&quot;AssetMainId\&quot;:427,\&quot;Ticker\&quot;:\&quot;PARD3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;PARD3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/pard3\&quot;},{\&quot;AssetId\&quot;:994,\&quot;AssetMainId\&quot;:803,\&quot;Ticker\&quot;:\&quot;VITT3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;VITT3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/vitt3\&quot;},{\&quot;AssetId\&quot;:652,\&quot;AssetMainId\&quot;:482,\&quot;Ticker\&quot;:\&quot;CGAS3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;CGAS3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/cgas3\&quot;},{\&quot;AssetId\&quot;:653,\&quot;AssetMainId\&quot;:482,\&quot;Ticker\&quot;:\&quot;CGAS5\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;CGAS5\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/cgas5\&quot;},{\&quot;AssetId\&quot;:259,\&quot;AssetMainId\&quot;:224,\&quot;Ticker\&quot;:\&quot;LREN3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;LREN3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/lren3\&quot;},{\&quot;AssetId\&quot;:284,\&quot;AssetMainId\&quot;:247,\&quot;Ticker\&quot;:\&quot;MOVI3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;MOVI3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/movi3\&quot;},{\&quot;AssetId\&quot;:819,\&quot;AssetMainId\&quot;:635,\&quot;Ticker\&quot;:\&quot;JSLG3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;JSLG3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/jslg3\&quot;},{\&quot;AssetId\&quot;:236,\&quot;AssetMainId\&quot;:210,\&quot;Ticker\&quot;:\&quot;SIMH3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;SIMH3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/simh3\&quot;},{\&quot;AssetId\&quot;:268,\&quot;AssetMainId\&quot;:232,\&quot;Ticker\&quot;:\&quot;EVEN3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;EVEN3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/even3\&quot;},{\&quot;AssetId\&quot;:820,\&quot;AssetMainId\&quot;:636,\&quot;Ticker\&quot;:\&quot;MELK3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;MELK3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/melk3\&quot;},{\&quot;AssetId\&quot;:542,\&quot;AssetMainId\&quot;:419,\&quot;Ticker\&quot;:\&quot;PFRM3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;PFRM3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/pfrm3\&quot;},{\&quot;AssetId\&quot;:338,\&quot;AssetMainId\&quot;:283,\&quot;Ticker\&quot;:\&quot;SLCE3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;SLCE3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/slce3\&quot;},{\&quot;AssetId\&quot;:463,\&quot;AssetMainId\&quot;:367,\&quot;Ticker\&quot;:\&quot;B3SA3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;B3SA3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/b3sa3\&quot;},{\&quot;AssetId\&quot;:394,\&quot;AssetMainId\&quot;:327,\&quot;Ticker\&quot;:\&quot;ABCB4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ABCB4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/abcb4\&quot;},{\&quot;AssetId\&quot;:269,\&quot;AssetMainId\&quot;:233,\&quot;Ticker\&quot;:\&quot;EZTC3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;EZTC3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/eztc3\&quot;},{\&quot;AssetId\&quot;:179,\&quot;AssetMainId\&quot;:170,\&quot;Ticker\&quot;:\&quot;CSUD3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;CSUD3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/csud3\&quot;},{\&quot;AssetId\&quot;:221,\&quot;AssetMainId\&quot;:200,\&quot;Ticker\&quot;:\&quot;STBP3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;STBP3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/stbp3\&quot;},{\&quot;AssetId\&quot;:196,\&quot;AssetMainId\&quot;:182,\&quot;Ticker\&quot;:\&quot;ROMI3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ROMI3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/romi3\&quot;},{\&quot;AssetId\&quot;:208,\&quot;AssetMainId\&quot;:191,\&quot;Ticker\&quot;:\&quot;FRAS3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;FRAS3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/fras3\&quot;},{\&quot;AssetId\&quot;:213,\&quot;AssetMainId\&quot;:194,\&quot;Ticker\&quot;:\&quot;RAPT3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;RAPT3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/rapt3\&quot;},{\&quot;AssetId\&quot;:214,\&quot;AssetMainId\&quot;:194,\&quot;Ticker\&quot;:\&quot;RAPT4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;RAPT4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/rapt4\&quot;},{\&quot;AssetId\&quot;:566,\&quot;AssetMainId\&quot;:439,\&quot;Ticker\&quot;:\&quot;TIMS3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;TIMS3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/tims3\&quot;},{\&quot;AssetId\&quot;:417,\&quot;AssetMainId\&quot;:340,\&quot;Ticker\&quot;:\&quot;BPAN4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;BPAN4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/bpan4\&quot;},{\&quot;AssetId\&quot;:273,\&quot;AssetMainId\&quot;:236,\&quot;Ticker\&quot;:\&quot;JHSF3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;JHSF3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/jhsf3\&quot;},{\&quot;AssetId\&quot;:464,\&quot;AssetMainId\&quot;:368,\&quot;Ticker\&quot;:\&quot;CIEL3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;CIEL3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/ciel3\&quot;},{\&quot;AssetId\&quot;:559,\&quot;AssetMainId\&quot;:435,\&quot;Ticker\&quot;:\&quot;TOTS3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;TOTS3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/tots3\&quot;},{\&quot;AssetId\&quot;:186,\&quot;AssetMainId\&quot;:176,\&quot;Ticker\&quot;:\&quot;VLID3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;VLID3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/vlid3\&quot;}]&quot;,
      &quot;tagsSerialized&quot;: &quot;[\&quot;Onde Investir\&quot;,\&quot;Agenda de dividendos\&quot;,\&quot;Direcional\&quot;,\&quot;Dividend yield\&quot;,\&quot;Dividendos\&quot;,\&quot;Itaúsa\&quot;,\&quot;Petrobras\&quot;,\&quot;Santos Brasil Participações\&quot;,\&quot;Viver de renda\&quot;]&quot;,
      &quot;publishDate&quot;: &quot;2023-01-02T17:37:54+00:00&quot;,
      &quot;publishDate_F&quot;: &quot;há 4 dias&quot;
    },
    {
      &quot;contentId&quot;: 6138,
      &quot;providerConfigurationId&quot;: 35,
      &quot;contentUrl&quot;: &quot;https://url.statusinvest.com.br/JAwoSBaGlv&quot;,
      &quot;title&quot;: &quot;Ibovespa hoje: o movimento da Bolsa Ao Vivo&quot;,
      &quot;description&quot;: null,
      &quot;content&quot;: &quot;&lt;h2&gt;Resumo dos mercados&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&#39;&#39;/&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Ticker&amp;quot;}\&quot;&gt;Ticker&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Entrada&amp;quot;}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;0.00&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;Entrada&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Parcial&amp;quot;}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;0.00&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;Parcial&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;%&amp;quot;}\&quot;&gt;%&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Objetivo&amp;quot;}\&quot;&gt;Objetivo&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;%&amp;quot;}\&quot;&gt;%&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Stop&amp;quot;}\&quot;&gt;Stop&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;%&amp;quot;}\&quot;&gt;%&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;PCAR3&amp;quot;}\&quot;&gt;PCAR3&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:16.86}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;0.00&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;16,86&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:17.14}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;0.00&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;17,14&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:1.66}\&quot;&gt;1,66&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:17.39}\&quot;&gt;17,39&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:3.14}\&quot;&gt;3,14&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:16.58}\&quot;&gt;16,58&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:-1.66}\&quot;&gt;-1,66&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;BBAS3&amp;quot;}\&quot;&gt;BBAS3&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:34.82}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;0.00&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;34,82&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:35.37}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;0.00&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;35,37&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:1.58}\&quot;&gt;1,58&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:35.87}\&quot;&gt;35,87&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:3.02}\&quot;&gt;3,02&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:34.28}\&quot;&gt;34,28&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:-1.55}\&quot;&gt;-1,55&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Ativos para venda&lt;/strong&gt;&lt;/p&gt;&lt;div class=&#39;&#39;&gt;&lt;table dir=\&quot;ltr\&quot; border=\&quot;1\&quot; cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot;&gt;&lt;colgroup&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;col width=\&quot;100\&quot; /&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Ticker&amp;quot;}\&quot;&gt;Ticker&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Entrada&amp;quot;}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;0.00&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;Entrada&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Parcial&amp;quot;}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;0.00&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;Parcial&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;%&amp;quot;}\&quot;&gt;%&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Objetivo&amp;quot;}\&quot;&gt;Objetivo&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;%&amp;quot;}\&quot;&gt;%&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Stop&amp;quot;}\&quot;&gt;Stop&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;%&amp;quot;}\&quot;&gt;%&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;GGBR4&amp;quot;}\&quot;&gt;GGBR4&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:29.34}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;0.00&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;29,34&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:29.01}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;0.00&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;29,01&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:0.0112}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;2&amp;quot;:&amp;quot;0.00%&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;1,12%&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:28.47}\&quot;&gt;28,47&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:0.0297}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;2&amp;quot;:&amp;quot;0.00%&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;2,97%&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:29.67}\&quot;&gt;29,67&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:-0.0112}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;2&amp;quot;:&amp;quot;0.00%&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;-1,12%&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;TASA4&amp;quot;}\&quot;&gt;TASA4&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:13.48}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;0.00&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;13,48&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:13.32}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;0.00&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;13,32&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:0.0119}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;2&amp;quot;:&amp;quot;0.00%&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;1,19%&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:13.18}\&quot;&gt;13,18&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:0.0223}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;2&amp;quot;:&amp;quot;0.00%&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;2,23%&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:13.63}\&quot;&gt;13,63&lt;/td&gt;&lt;td data-sheets-value=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;3&amp;quot;:-0.0111}\&quot; data-sheets-numberformat=\&quot;{&amp;quot;1&amp;quot;:3,&amp;quot;2&amp;quot;:&amp;quot;0.00%&amp;quot;,&amp;quot;3&amp;quot;:1}\&quot;&gt;-1,11%&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&#39;&#39;&gt;        &lt;span class=&#39;&#39;&gt;            &lt;span class=&#39;&#39;&gt;update&lt;/span&gt;            7h54        &lt;/span&gt;        &lt;h2 class=&#39;&#39; &gt;BRF fecha acordo de leniência por Operação Carne Fraca, por R$ 583,9 mi&lt;/h2&gt;        &lt;div class=&#39;&#39; &gt;&lt;p&gt;A BRF (&lt;a href=&#39;&#39;/&gt;08:00 Confiança de Serviços &amp;#8211; FGV (Dezembro)&lt;br /&gt;9:30 Estatísticas Fiscais &amp;#8211; BC (Novembro)&lt;br /&gt;11:00 Lula anuncia novos ministros&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;EUA&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;10:30: Auxílio-desemprego (semanal)&lt;/p&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&#39;&#39;&gt;        &lt;span class=&#39;&#39;&gt;            &lt;span class=&#39;&#39;&gt;update&lt;/span&gt;            7h44        &lt;/span&gt;        &lt;h2 class=&#39;&#39; &gt;Petróleo operam em baixa; minério em alta&lt;/h2&gt;        &lt;div class=&#39;&#39; &gt;&lt;p&gt;As preocupações com a recessão global atingem as cotações dos preços do petróleo, que recuam nesta manhã. Os preços estão em queda por conta das preocupações com um aumento nos casos de covid-19 na segunda economia do planeta, que é o maior importador mundial da commodity. Ou seja, a expectativa de que o alívio das restrições à pandemia levaria à recuperação econômica e ao crescimento da demanda por combustível ainda não se concretizou. Entretanto, no mercado de minério de ferro, o efeito é contrário, e os seus preços sobem, com a reabertura.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Petróleo WTI, -2,14%, a US$ 77,27 o barril;&lt;/li&gt;&lt;li&gt;Petróleo Brent, -1,81%, a US$ 81,75 o barril;&lt;/li&gt;&lt;li&gt;Minério de Ferro: +1,56%, a US$ 121,36.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&#39;&#39;&gt;        &lt;span class=&#39;&#39;&gt;            &lt;span class=&#39;&#39;&gt;update&lt;/span&gt;            7h41        &lt;/span&gt;        &lt;h2 class=&#39;&#39; &gt;Mercados na Ásia fecharam em baixa&lt;/h2&gt;        &lt;div class=&#39;&#39; &gt;&lt;p&gt;Já os mercados da Ásia negociaram em baixa, seguindo a tendência de Wall Street, do pregão de ontem, também com os investidores olhando para o próximo ano. O índice Hang Seng de Hong Kong caiu forte em sua última hora de negociação, mesmo com a maior flexibilização das restrições da covid-19 começando a vigorar hoje. Na China, ainda existe uma ponderação se a reabertura terá efeitos mais fortes do que os riscos de recordes de contaminação.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Confira os fechamentos das bolsas:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Shanghai SE (China), -0,44%;&lt;/li&gt;&lt;li&gt;Nikkei (Japão), -0,94%;&lt;/li&gt;&lt;li&gt;Hang Seng Index (Hong Kong), -0,79%;&lt;/li&gt;&lt;li&gt;Kospi (Coreia do Sul), -1,93%.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&#39;&#39;&gt;        &lt;span class=&#39;&#39;&gt;            &lt;span class=&#39;&#39;&gt;update&lt;/span&gt;            7h40        &lt;/span&gt;        &lt;h2 class=&#39;&#39; &gt;Bolsas na Europa operam, em sua maioria, com ganhos&lt;/h2&gt;        &lt;div class=&#39;&#39; &gt;&lt;p&gt;Enquanto isso, os mercados europeus abriram em queda, em compasso de cautela nessa virada de ano, mas acompanharam os EUA e subiam no início da manhã. O impulso dado na terça-feira pelo relaxamento das medidas de controle da pandemia na China se mostra misto. No mais, os investidores continuam com a perspectiva de inflação persistentemente alta, aperto da política monetária dos bancos centrais e já prenunciam um período prolongado de crescimento econômico lento.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Confira os desempenhos&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;FTSE 100 (Reino Unido), -0,28%;&lt;/li&gt;&lt;li&gt;DAX (Alemanha), +0,21%;&lt;/li&gt;&lt;li&gt;CAC 40 (França), +0,06%;&lt;/li&gt;&lt;li&gt;FTSE MIB (Itália), +0,29%;&lt;/li&gt;&lt;li&gt;Stoxx600, +0,01%.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&#39;&#39;&gt;        &lt;span class=&#39;&#39;&gt;            &lt;span class=&#39;&#39;&gt;update&lt;/span&gt;            7h35        &lt;/span&gt;        &lt;h2 class=&#39;&#39; &gt;Bolsas em NY operam com ganhos&lt;/h2&gt;        &lt;div class=&#39;&#39; &gt;&lt;p&gt;Os futuros de Nova York viraram e passaram a operar com ganhos no início desta manhã, em recuperação das perdas da véspera, no apagar das luzes de 2022, que foi marcado por grandes perdas no acumulado do período no mercado acionário americano. Nesta quinta-feira, os investidores esperam os dados mais recentes sobre pedidos semanais de auxílio-desemprego, um dos indicadores mais observados pelo Federal Reserve em suas decisões sobre a taxa de juros. Economistas estão prevendo pedidos iniciais de auxílio-desemprego na faixa de 223.000 na semana encerrada em 24 de dezembro, ante 216.000 no período anterior.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Confira os desempenhos:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Dow Jones Futuro (EUA), +0,12%;&lt;/li&gt;&lt;li&gt;S&amp;amp;P 500 Futuro (EUA), +0,30%;&lt;/li&gt;&lt;li&gt;Nasdaq Futuro (EUA), -0,57%.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&#39;&#39;&gt;        &lt;span class=&#39;&#39;&gt;            &lt;span class=&#39;&#39;&gt;update&lt;/span&gt;            7h34        &lt;/span&gt;        &lt;h2 class=&#39;&#39; &gt;Abertura dos mercados&lt;/h2&gt;        &lt;div class=&#39;&#39; &gt;&lt;p&gt;As bolsas no exterior operam majoritariamente em alta na manhã desta quinta-feira (29), com destaque positivo para os índices futuros das bolsas de Nova York, que avançam. No entanto, os ganhos não atingiram os mercados asiáticos que fecharam em baixa. Mesmo com o início de pregão positivo, em Wall Street, os investidores seguem cautelosos, se antecipando a uma provável recessão no início de 2023, conforme saem novos indicadores econômicos, que mostram desaceleração. A questão que pesa agora é saber quanto tempo deve durar essa recessão e qual sua intensidade. &lt;strong&gt;Brasil&lt;/strong&gt; – Por aqui, espera-se para as 11 horas que o presidente eleito Luiz Inácio Lula da Silva anuncie os últimos nomes que vão compor seu ministério amanhã. Lula passou os últimos dias em negociações para encaixar os partidos do Centrão, como MDB, PSD e União Brasil no primeiro escalão e garantir uma base sólida no Congresso Nacional.&lt;/p&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;InfoTrade: notícias, análises, vídeos, podcasts e guias no &lt;/i&gt;&lt;/b&gt;&lt;a href=&#39;&#39;&gt;&lt;b&gt;&lt;i&gt;novo canal do InfoMoney sobre Mercados&lt;/i&gt;&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel=\&quot;nofollow\&quot; href=&#39;&#39;&gt;Ibovespa hoje: o movimento da Bolsa Ao Vivo&lt;/a&gt; appeared first on &lt;a rel=\&quot;nofollow\&quot; href=&#39;&#39;&gt;InfoMoney&lt;/a&gt;.&lt;/p&gt;\n&quot;,
      &quot;tags&quot;: [
        &quot;Mercados&quot;,
        &quot;Ações&quot;,
        &quot;Ao Vivo&quot;,
        &quot;Ibovespa&quot;,
        &quot;Trader&quot;
      ],
      &quot;assets&quot;: [
        {
          &quot;assetId&quot;: 355,
          &quot;assetMainId&quot;: 299,
          &quot;ticker&quot;: &quot;PCAR3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;PCAR3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/pcar3&quot;
        },
        {
          &quot;assetId&quot;: 657,
          &quot;assetMainId&quot;: 299,
          &quot;ticker&quot;: &quot;PCAR4&quot;,
          &quot;isMainContentAsset&quot;: false,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;PCAR4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/pcar4&quot;
        },
        {
          &quot;assetId&quot;: 400,
          &quot;assetMainId&quot;: 331,
          &quot;ticker&quot;: &quot;BBAS3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;BBAS3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/bbas3&quot;
        },
        {
          &quot;assetId&quot;: 516,
          &quot;assetMainId&quot;: 398,
          &quot;ticker&quot;: &quot;GGBR4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;GGBR4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/ggbr4&quot;
        },
        {
          &quot;assetId&quot;: 515,
          &quot;assetMainId&quot;: 398,
          &quot;ticker&quot;: &quot;GGBR3&quot;,
          &quot;isMainContentAsset&quot;: false,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;GGBR3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/ggbr3&quot;
        },
        {
          &quot;assetId&quot;: 188,
          &quot;assetMainId&quot;: 177,
          &quot;ticker&quot;: &quot;TASA4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;TASA4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/tasa4&quot;
        },
        {
          &quot;assetId&quot;: 187,
          &quot;assetMainId&quot;: 177,
          &quot;ticker&quot;: &quot;TASA3&quot;,
          &quot;isMainContentAsset&quot;: false,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;TASA3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/tasa3&quot;
        }
      ],
      &quot;priority&quot;: 0,
      &quot;imageUrl&quot;: &quot;https://www.infomoney.com.br/wp-content/uploads/2022/07/estavel4.jpg&quot;,
      &quot;contentType&quot;: 2,
      &quot;resourceType&quot;: 0,
      &quot;isSponsored&quot;: false,
      &quot;isInstitutional&quot;: false,
      &quot;assetsSerialized&quot;: &quot;[{\&quot;AssetId\&quot;:355,\&quot;AssetMainId\&quot;:299,\&quot;Ticker\&quot;:\&quot;PCAR3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;PCAR3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/pcar3\&quot;},{\&quot;AssetId\&quot;:657,\&quot;AssetMainId\&quot;:299,\&quot;Ticker\&quot;:\&quot;PCAR4\&quot;,\&quot;IsMainContentAsset\&quot;:false,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;PCAR4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/pcar4\&quot;},{\&quot;AssetId\&quot;:400,\&quot;AssetMainId\&quot;:331,\&quot;Ticker\&quot;:\&quot;BBAS3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;BBAS3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/bbas3\&quot;},{\&quot;AssetId\&quot;:516,\&quot;AssetMainId\&quot;:398,\&quot;Ticker\&quot;:\&quot;GGBR4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;GGBR4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/ggbr4\&quot;},{\&quot;AssetId\&quot;:515,\&quot;AssetMainId\&quot;:398,\&quot;Ticker\&quot;:\&quot;GGBR3\&quot;,\&quot;IsMainContentAsset\&quot;:false,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;GGBR3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/ggbr3\&quot;},{\&quot;AssetId\&quot;:188,\&quot;AssetMainId\&quot;:177,\&quot;Ticker\&quot;:\&quot;TASA4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;TASA4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/tasa4\&quot;},{\&quot;AssetId\&quot;:187,\&quot;AssetMainId\&quot;:177,\&quot;Ticker\&quot;:\&quot;TASA3\&quot;,\&quot;IsMainContentAsset\&quot;:false,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;TASA3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/tasa3\&quot;}]&quot;,
      &quot;tagsSerialized&quot;: &quot;[\&quot;Mercados\&quot;,\&quot;Ações\&quot;,\&quot;Ao Vivo\&quot;,\&quot;Ibovespa\&quot;,\&quot;Trader\&quot;]&quot;,
      &quot;publishDate&quot;: &quot;2022-12-29T10:45:20+00:00&quot;,
      &quot;publishDate_F&quot;: &quot;há 8 dias&quot;
    },
    {
      &quot;contentId&quot;: 5604,
      &quot;providerConfigurationId&quot;: 34,
      &quot;contentUrl&quot;: &quot;https://url.statusinvest.com.br/1uah1vUCsm&quot;,
      &quot;title&quot;: &quot;Alupar (ALUP11) muda mínimo obrigatório de dividendos; entenda&quot;,
      &quot;description&quot;: null,
      &quot;content&quot;: &quot;&lt;figure&gt;&lt;figcaption&gt;Lucro da Alupar (ALUP11) sobe 88,6% no 3T22, a R$ 146,4 milhões. Foto: Reprodução Facebook&lt;/figcaption&gt;&lt;/figure&gt;\n&lt;p&gt;Os acionistas da &lt;a class=&#39;&#39; data-force=\&quot;yes\&quot; data-priority=\&quot;2\&quot; href=\&quot;https://www.suno.com.br/acoes/ALUP11/\&quot; target=\&quot;_blank\&quot; rel=\&quot;noopener\&quot;&gt;&lt;strong&gt;Alupar&lt;/strong&gt; (ALUP11)&lt;/a&gt;, por meio de assembleia, reduziram o mínimo obrigatório de lucro a ser distribuído por meio de &lt;a class=&#39;&#39; data-force=\&quot;no\&quot; data-priority=\&quot;1\&quot; href=\&quot;https://www.suno.com.br/guias/dividendos/\&quot; target=\&quot;_blank\&quot; rel=\&quot;noopener\&quot;&gt;dividendos&lt;/a&gt; para 25%. &lt;a href=\&quot;https://www.rad.cvm.gov.br/ENET/frmExibirArquivoIPEExterno.aspx?NumeroProtocoloEntrega=1038669\&quot; target=\&quot;_blank\&quot; rel=\&quot;noreferrer noopener\&quot;&gt;A companhia comunicou a decisão da Assembleia Geral Extraordinária (AGE)&lt;/a&gt; nesta terça-feira (6), por meio de &lt;a href=\&quot;https://www.suno.com.br/artigos/fato-relevante/\&quot; target=\&quot;_blank\&quot; rel=\&quot;noreferrer noopener\&quot;&gt;fato relevante&lt;/a&gt;.&lt;/p&gt;\n\n\n\n\n\n&lt;p&gt;Com a nova alteração estatutária, caso os 25% do &lt;a class=&#39;&#39; target=\&quot;_blank\&quot; data-force=\&quot;no\&quot; data-priority=\&quot;1\&quot; href=\&quot;https://www.suno.com.br/artigos/lucro-liquido/\&quot; rel=\&quot;noopener\&quot;&gt;lucro líquido&lt;/a&gt; do &lt;a class=&#39;&#39; target=\&quot;_blank\&quot; data-force=\&quot;no\&quot; data-priority=\&quot;1\&quot; href=\&quot;https://www.suno.com.br/artigos/exercicio-social/\&quot; rel=\&quot;noopener\&quot;&gt;exercício social&lt;/a&gt; representem um valor menor do que os 50% do lucro líquido regulatório, a Alupar irá remunerar acionistas em no mínimo 50% do lucro líquido regulatório&lt;/p&gt;\n\n\n\n&lt;p&gt;Antes da decisão, os &lt;strong&gt;dividendos da Alupar&lt;/strong&gt; tinham que representar 50% do &lt;a class=&#39;&#39; target=\&quot;_blank\&quot; data-force=\&quot;no\&quot; data-priority=\&quot;1\&quot; href=\&quot;https://www.suno.com.br/artigos/lucro-liquido/\&quot; rel=\&quot;noopener\&quot;&gt;lucro líquido&lt;/a&gt; apurado pela companhia, conforme o &lt;a class=&#39;&#39; target=\&quot;_blank\&quot; data-force=\&quot;no\&quot; data-priority=\&quot;1\&quot; href=\&quot;https://www.suno.com.br/artigos/estatuto-social/\&quot; rel=\&quot;noopener\&quot;&gt;estatuto social&lt;/a&gt;.&lt;/p&gt;\n\n\n\n&lt;p&gt;Além disso, a companhia buscará pagar &lt;a class=&#39;&#39; data-force=\&quot;no\&quot; data-priority=\&quot;1\&quot; href=\&quot;https://www.suno.com.br/guias/dividendos/\&quot; target=\&quot;_blank\&quot; rel=\&quot;noopener\&quot;&gt;dividendos&lt;/a&gt; a quem detém ações &lt;strong&gt;ALUP11 &lt;/strong&gt;com recorrência trimestral, com pagamento a serem feitos até no máximo de 60 dias após o a decisão pela distribuição de proventos.&lt;/p&gt;\n\n\n\n\t&lt;div data-element=\&quot;shortcode-read-more\&quot; class=&#39;&#39;&gt;\n\t\t\t\t&lt;span class=&#39;&#39;&gt;Leia mais&lt;/span&gt;\n\t\t\t\t&lt;ul class=&#39;&#39;&gt;\n\t\t\t&lt;li&gt;&lt;a href=\&quot;https://www.suno.com.br/noticias/banco-do-brasil-bbas3-xp-dividendos/\&quot;&gt;Banco do Brasil (BBAS3) deve pagar 11,8% em dividendos em 2023, diz XP&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\&quot;https://www.suno.com.br/noticias/raizen-raiz4-pagara-dividendos/\&quot;&gt;Raízen (RAIZ4) pagará R$ 918,8 milhões em dividendos; veja valor por ação&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\&quot;https://www.suno.com.br/noticias/petrobras-petr4-xp-alerta-risco-politico/\&quot;&gt;Petrobras (PETR4): XP vê bons dividendos, mas alerta para &amp;#8220;alto risco político&amp;#8221; em 2023&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\&quot;https://www.suno.com.br/noticias/itausa-itsa4-retomar-dividendos/\&quot;&gt;Itaúsa (ITSA4) retomará nível histórico de dividendos, diz CEO&lt;/a&gt;&lt;/li&gt;\t\t&lt;/ul&gt;\n\t&lt;/div&gt;\n\n\n\n\n&lt;p&gt;O resultado da AGE passa a ter vigor imediatamente e tem prazo intedeterminado.&lt;/p&gt;\n\n\n\n&lt;p&gt;Conforme a área de relação com investidores (RI) da Alupar, o controlador da companhia &amp;#8211; o grupo Guarupart &amp;#8211; possui 76% das &lt;a class=&#39;&#39; target=\&quot;_blank\&quot; data-force=\&quot;no\&quot; data-priority=\&quot;1\&quot; href=\&quot;https://www.suno.com.br/artigos/o-que-sao-acoes-ordinarias-preferenciais-e-units/\&quot; rel=\&quot;noopener\&quot;&gt;ações ordinárias&lt;/a&gt; da empresa e 0,6% das preferenciais, representando 52% do capital social total.&lt;/p&gt;\n\n\n\n&lt;p&gt;Os demais acionistas somam 23,4% das &lt;a class=&#39;&#39; target=\&quot;_blank\&quot; data-force=\&quot;no\&quot; data-priority=\&quot;1\&quot; href=\&quot;https://www.suno.com.br/artigos/o-que-sao-acoes-ordinarias-preferenciais-e-units/\&quot; rel=\&quot;noopener\&quot;&gt;ações ordinárias&lt;/a&gt; e 99,4% das preferenciais, detendo uma fatia de 47,8% do capital social da Alupar.&lt;/p&gt;\n\n\n\n&lt;p&gt;Atualmente a companhia tem um &lt;a class=&#39;&#39; target=\&quot;_blank\&quot; data-force=\&quot;no\&quot; data-priority=\&quot;1\&quot; href=\&quot;https://www.suno.com.br/artigos/free-float/\&quot; rel=\&quot;noopener\&quot;&gt;free float&lt;/a&gt; &amp;#8211; porcentagem de ações da companhia que estão em livre circulação no mercado &amp;#8211; de 47,8%.&lt;/p&gt;\n\n\n\n\n\n&lt;h2 id=\&quot;h-quanto-a-alupar-paga-em-dividendos\&quot;&gt;Quanto a Alupar paga em dividendos?&lt;/h2&gt;\n\n\n\n&lt;p&gt;&lt;a href=\&quot;https://statusinvest.com.br/acoes/alup11\&quot; target=\&quot;_blank\&quot; rel=\&quot;noreferrer noopener\&quot;&gt;Conforme dados do Status Invest&lt;/a&gt;, o dividend yield (DY) da Alupar é de 4,65%, com R$ 1,23 pagos por unit nos últimos 12 meses.&lt;/p&gt;\n\n\n\n&lt;p&gt;A porcentagem do &lt;a class=&#39;&#39; target=\&quot;_blank\&quot; data-force=\&quot;no\&quot; data-priority=\&quot;1\&quot; href=\&quot;https://www.suno.com.br/artigos/lucro-liquido/\&quot; rel=\&quot;noopener\&quot;&gt;lucro líquido&lt;/a&gt; distribuída como forma de proventos &amp;#8211; justamente o &amp;#8216;alvo&amp;#8217; da assembleia &amp;#8211; foi de 49,6% neste ano de 2022.&lt;/p&gt;\n\n\n\n&lt;p&gt;Isso, fruto de R$ 726 milhões apurados nos balanços e R$ 360 milhões pagos aos acionistas no acumulado do ano até então.&lt;/p&gt;\n\n\n\n&lt;p&gt;Proporcionalmente, os &lt;a class=&#39;&#39; data-force=\&quot;no\&quot; data-priority=\&quot;1\&quot; href=\&quot;https://www.suno.com.br/guias/dividendos/\&quot; target=\&quot;_blank\&quot; rel=\&quot;noopener\&quot;&gt;dividendos&lt;/a&gt; pagos por ação estão no maior nível desde 2015. O único ano a superar o atual foi o de 2014, quando a &lt;strong&gt;Alupar&lt;/strong&gt; pagou R$ 2,16 por unit em proventos.&lt;/p&gt;\n\n\n&quot;,
      &quot;tags&quot;: [
        &quot;Negócios&quot;,
        &quot;Ações&quot;,
        &quot;Alupar (ALUP11/ALUP3/ALUP4)&quot;,
        &quot;Assembleia Geral&quot;,
        &quot;proventos&quot;
      ],
      &quot;assets&quot;: [
        {
          &quot;assetId&quot;: 580,
          &quot;assetMainId&quot;: 446,
          &quot;ticker&quot;: &quot;ALUP11&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ALUP11&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/alup11&quot;
        },
        {
          &quot;assetId&quot;: 578,
          &quot;assetMainId&quot;: 446,
          &quot;ticker&quot;: &quot;ALUP3&quot;,
          &quot;isMainContentAsset&quot;: false,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ALUP3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/alup3&quot;
        },
        {
          &quot;assetId&quot;: 579,
          &quot;assetMainId&quot;: 446,
          &quot;ticker&quot;: &quot;ALUP4&quot;,
          &quot;isMainContentAsset&quot;: false,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ALUP4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/alup4&quot;
        },
        {
          &quot;assetId&quot;: 400,
          &quot;assetMainId&quot;: 331,
          &quot;ticker&quot;: &quot;BBAS3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;BBAS3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/bbas3&quot;
        },
        {
          &quot;assetId&quot;: 987,
          &quot;assetMainId&quot;: 798,
          &quot;ticker&quot;: &quot;RAIZ4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;RAIZ4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/raiz4&quot;
        },
        {
          &quot;assetId&quot;: 530,
          &quot;assetMainId&quot;: 408,
          &quot;ticker&quot;: &quot;PETR4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;PETR4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/petr4&quot;
        },
        {
          &quot;assetId&quot;: 529,
          &quot;assetMainId&quot;: 408,
          &quot;ticker&quot;: &quot;PETR3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;PETR3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/petr3&quot;
        },
        {
          &quot;assetId&quot;: 427,
          &quot;assetMainId&quot;: 345,
          &quot;ticker&quot;: &quot;ITSA4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITSA4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itsa4&quot;
        },
        {
          &quot;assetId&quot;: 426,
          &quot;assetMainId&quot;: 345,
          &quot;ticker&quot;: &quot;ITSA3&quot;,
          &quot;isMainContentAsset&quot;: false,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITSA3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itsa3&quot;
        }
      ],
      &quot;priority&quot;: 0,
      &quot;imageUrl&quot;: &quot;https://files.sunoresearch.com.br/n/uploads/2021/05/fb94654d-18739314_1326765467415188_9147479433665342283_o-1.jpg&quot;,
      &quot;contentType&quot;: 2,
      &quot;resourceType&quot;: 0,
      &quot;isSponsored&quot;: false,
      &quot;isInstitutional&quot;: false,
      &quot;assetsSerialized&quot;: &quot;[{\&quot;AssetId\&quot;:580,\&quot;AssetMainId\&quot;:446,\&quot;Ticker\&quot;:\&quot;ALUP11\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ALUP11\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/alup11\&quot;},{\&quot;AssetId\&quot;:578,\&quot;AssetMainId\&quot;:446,\&quot;Ticker\&quot;:\&quot;ALUP3\&quot;,\&quot;IsMainContentAsset\&quot;:false,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ALUP3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/alup3\&quot;},{\&quot;AssetId\&quot;:579,\&quot;AssetMainId\&quot;:446,\&quot;Ticker\&quot;:\&quot;ALUP4\&quot;,\&quot;IsMainContentAsset\&quot;:false,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ALUP4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/alup4\&quot;},{\&quot;AssetId\&quot;:400,\&quot;AssetMainId\&quot;:331,\&quot;Ticker\&quot;:\&quot;BBAS3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;BBAS3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/bbas3\&quot;},{\&quot;AssetId\&quot;:987,\&quot;AssetMainId\&quot;:798,\&quot;Ticker\&quot;:\&quot;RAIZ4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;RAIZ4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/raiz4\&quot;},{\&quot;AssetId\&quot;:530,\&quot;AssetMainId\&quot;:408,\&quot;Ticker\&quot;:\&quot;PETR4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;PETR4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/petr4\&quot;},{\&quot;AssetId\&quot;:529,\&quot;AssetMainId\&quot;:408,\&quot;Ticker\&quot;:\&quot;PETR3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;PETR3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/petr3\&quot;},{\&quot;AssetId\&quot;:427,\&quot;AssetMainId\&quot;:345,\&quot;Ticker\&quot;:\&quot;ITSA4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITSA4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itsa4\&quot;},{\&quot;AssetId\&quot;:426,\&quot;AssetMainId\&quot;:345,\&quot;Ticker\&quot;:\&quot;ITSA3\&quot;,\&quot;IsMainContentAsset\&quot;:false,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITSA3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itsa3\&quot;}]&quot;,
      &quot;tagsSerialized&quot;: &quot;[\&quot;Negócios\&quot;,\&quot;Ações\&quot;,\&quot;Alupar (ALUP11/ALUP3/ALUP4)\&quot;,\&quot;Assembleia Geral\&quot;,\&quot;proventos\&quot;]&quot;,
      &quot;publishDate&quot;: &quot;2022-12-07T12:18:09+00:00&quot;,
      &quot;publishDate_F&quot;: &quot;há 1 mês&quot;
    },
    {
      &quot;contentId&quot;: 5594,
      &quot;providerConfigurationId&quot;: 34,
      &quot;contentUrl&quot;: &quot;https://url.statusinvest.com.br/EGcQGoTkas&quot;,
      &quot;title&quot;: &quot;Fiesp: ‘Levante’ quer impeachment de presidente e marca assembleia&quot;,
      &quot;description&quot;: null,
      &quot;content&quot;: &quot;&lt;figure&gt;&lt;img width=&#39;620&#39; height=&#39;324&#39; src=&#39;https://www.suno.com.br/noticias/wp-content/themes/suno/resources/images/rss-default-image.jpg&#39; /&gt;&lt;figcaption&gt;Fiesp: &amp;#8216;Levante&amp;#8217; quer impeachment de presidente e marca assembleia&lt;/figcaption&gt;&lt;/figure&gt;\n&lt;p&gt;A &lt;a href=\&quot;https://www.suno.com.br/noticias/agronegocio-defendem-estado-democratico-manifesto/\&quot; target=\&quot;_blank\&quot; rel=\&quot;noreferrer noopener\&quot;&gt;Federação das Indústrias do Estado de São Paulo&lt;/a&gt;, ou &lt;strong&gt;Fiesp&lt;/strong&gt;, passa por um conflito interno após a eleição de Josué Gomes da Silva. Na próxima semana, a expectativa é de que essa intriga um &amp;#8216;novo capítulo&amp;#8217;.&lt;/p&gt;\n\n\n\n\n\n&lt;p&gt;Representantes de 86 &lt;a href=\&quot;https://www.suno.com.br/noticias/servidores-dizem-que-reajuste-de-5-nao-cobre-perdas-inflacionarias/\&quot; target=\&quot;_blank\&quot; rel=\&quot;noreferrer noopener\&quot;&gt;sindicatos &lt;/a&gt;conseguiram marcar para as 14 horas da próxima segunda-feira uma assembleia-geral para afastar o atual mandatário da Fiesp. &lt;/p&gt;\n\n\n\n&lt;p&gt;O movimento é um desdobramento de uma disputa que começou durante as &lt;a href=\&quot;https://www.suno.com.br/noticias/lula-pt-ministro-da-economia-fazenda-eleicoes/\&quot; target=\&quot;_blank\&quot; rel=\&quot;noreferrer noopener\&quot;&gt;eleições presidenciais&lt;/a&gt;. &lt;/p&gt;\n\n\n\n&lt;p&gt;Um observador do embate na Fiesp afirma que a queda de braço joga luz sobre os chamados &amp;#8220;sindicatos de gaveta&amp;#8221;, que têm pouca ou nenhuma representatividade, mas acabam sendo úteis para fins políticos. As assinaturas para a reunião partiram de sindicatos menores, com as grandes entidades ficando de fora.&lt;/p&gt;\n\n\n\n&lt;p&gt;Por trás do &amp;#8220;levante&amp;#8221; está &lt;a href=\&quot;https://www.suno.com.br/noticias/michel-temer-conselho-economico/\&quot; target=\&quot;_blank\&quot; rel=\&quot;noreferrer noopener\&quot;&gt;Paulo Skaf&lt;/a&gt;, que comandou a Fiesp por 18 anos. &lt;/p&gt;\n\n\n\n&lt;p&gt;Pouco antes das eleições, a Fiesp foi signatária de uma carta a favor da democracia. O apoio ao documento foi visto como um aceno da instituição ao então candidato Luiz Inácio Lula da Silva (PT) &amp;#8211; Josué é filho de José Alencar, vice nos dois mandatos anteriores do petista.&lt;/p&gt;\n\n\n\t\t&lt;div class=&#39;&#39; data-id=\&quot;1\&quot;&gt;\n\t\t\t&lt;div class=&#39;&#39; style=&#39;&#39;&gt;\n\t\t\t\t\t\t\t\t\t&lt;div class=&#39;&#39; data-id=\&quot;carousel-1\&quot;&gt;\n\t\t\t\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t&lt;a href=\&quot;https://www.suno.com.br/noticias/web-stories/banco-do-brasil-bbas3-aumentar-dividendos-2023/\&quot; &gt;\n\t\t\t\t\t\n\t\t\t\t&lt;/a&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\tBanco do Brasil (BBAS3) aumentará dividendos em 2023, projeta XP\t\t\t\t&lt;/div&gt;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t&lt;a href=\&quot;https://www.suno.com.br/noticias/web-stories/passagens-custo-1-classe/\&quot; &gt;\n\t\t\t\t\t&lt;img\n\t\t\t\t\t\tsrc=\&quot;https://files.sunoresearch.com.br/n/uploads/2021/08/cropped-b5df2603-plane-841441_1920-1-640x853.jpg\&quot;\n\t\t\t\t\t\talt=\&quot;Quanto custa hoje uma passagem de avião na 1º classe?\&quot;\n\t\t\t\t\t\twidth=\&quot;185\&quot;\n\t\t\t\t\t\theight=\&quot;308\&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrcset=\&quot;https://files.sunoresearch.com.br/n/uploads/2021/08/cropped-b5df2603-plane-841441_1920-1.jpg 640w, https://files.sunoresearch.com.br/n/uploads/2021/08/cropped-b5df2603-plane-841441_1920-1-225x300.jpg 225w, https://files.sunoresearch.com.br/n/uploads/2021/08/cropped-b5df2603-plane-841441_1920-1-150x200.jpg 150w\&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsizes=\&quot;(max-width: 640px) 100vw, 640px\&quot;\n\t\t\t\t\t\t\t\t\t\t\t\tloading=\&quot;lazy\&quot;\n\t\t\t\t\t\tdecoding=\&quot;async\&quot;\n\t\t\t\t\t&gt;\n\t\t\t\t&lt;/a&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\tQuanto custa hoje uma passagem de avião na 1º classe?\t\t\t\t&lt;/div&gt;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t&lt;a href=\&quot;https://www.suno.com.br/noticias/web-stories/itausa-itsa4-acoes-desconto/\&quot; &gt;\n\t\t\t\t\t&lt;img\n\t\t\t\t\t\tsrc=\&quot;https://files.sunoresearch.com.br/n/uploads/2021/02/cropped-0c17d55a-itausa-640x853.jpg\&quot;\n\t\t\t\t\t\talt=\&quot;Itaúsa (ITSA4): Ações estão com &amp;#8216;desconto fora do normal&amp;#8217;, diz BTG\&quot;\n\t\t\t\t\t\twidth=\&quot;185\&quot;\n\t\t\t\t\t\theight=\&quot;308\&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrcset=\&quot;https://files.sunoresearch.com.br/n/uploads/2021/02/cropped-0c17d55a-itausa.jpg 640w, https://files.sunoresearch.com.br/n/uploads/2021/02/cropped-0c17d55a-itausa-225x300.jpg 225w, https://files.sunoresearch.com.br/n/uploads/2021/02/cropped-0c17d55a-itausa-150x200.jpg 150w\&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsizes=\&quot;(max-width: 640px) 100vw, 640px\&quot;\n\t\t\t\t\t\t\t\t\t\t\t\tloading=\&quot;lazy\&quot;\n\t\t\t\t\t\tdecoding=\&quot;async\&quot;\n\t\t\t\t\t&gt;\n\t\t\t\t&lt;/a&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\tItaúsa (ITSA4): Ações estão com &amp;#8216;desconto fora do normal&amp;#8217;, diz BTG\t\t\t\t&lt;/div&gt;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t&lt;a href=\&quot;https://www.suno.com.br/noticias/web-stories/preco-da-gasolina-e-cortado-pela-petrobras-petr4-veja-como-ficou/\&quot; &gt;\n\t\t\t\t\t&lt;img\n\t\t\t\t\t\tsrc=\&quot;https://files.sunoresearch.com.br/n/uploads/2022/09/cropped-posto_de_combustivel_mcajr_abr_1609210447-scaled-1-640x853.jpg\&quot;\n\t\t\t\t\t\talt=\&quot;Preço da gasolina é cortado pela Petrobras (PETR4); veja como ficou\&quot;\n\t\t\t\t\t\twidth=\&quot;185\&quot;\n\t\t\t\t\t\theight=\&quot;308\&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrcset=\&quot;https://files.sunoresearch.com.br/n/uploads/2022/09/cropped-posto_de_combustivel_mcajr_abr_1609210447-scaled-1.jpg 640w, https://files.sunoresearch.com.br/n/uploads/2022/09/cropped-posto_de_combustivel_mcajr_abr_1609210447-scaled-1-225x300.jpg 225w, https://files.sunoresearch.com.br/n/uploads/2022/09/cropped-posto_de_combustivel_mcajr_abr_1609210447-scaled-1-150x200.jpg 150w\&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsizes=\&quot;(max-width: 640px) 100vw, 640px\&quot;\n\t\t\t\t\t\t\t\t\t\t\t\tloading=\&quot;lazy\&quot;\n\t\t\t\t\t\tdecoding=\&quot;async\&quot;\n\t\t\t\t\t&gt;\n\t\t\t\t&lt;/a&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\tPreço da gasolina é cortado pela Petrobras (PETR4); veja como ficou\t\t\t\t&lt;/div&gt;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t&lt;a href=\&quot;https://www.suno.com.br/noticias/web-stories/fim-do-dinheiro-camara-projeto-de-lei/\&quot; &gt;\n\t\t\t\t\t&lt;img\n\t\t\t\t\t\tsrc=\&quot;https://files.sunoresearch.com.br/n/uploads/2021/02/cropped-b0b79995-dinheiro-640x853.jpg\&quot;\n\t\t\t\t\t\talt=\&quot;&amp;#8216;Fim do dinheiro&amp;#8217;: Câmara aprova projeto para reduzir notas e moedas\&quot;\n\t\t\t\t\t\twidth=\&quot;185\&quot;\n\t\t\t\t\t\theight=\&quot;308\&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrcset=\&quot;https://files.sunoresearch.com.br/n/uploads/2021/02/cropped-b0b79995-dinheiro.jpg 640w, https://files.sunoresearch.com.br/n/uploads/2021/02/cropped-b0b79995-dinheiro-225x300.jpg 225w, https://files.sunoresearch.com.br/n/uploads/2021/02/cropped-b0b79995-dinheiro-150x200.jpg 150w\&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsizes=\&quot;(max-width: 640px) 100vw, 640px\&quot;\n\t\t\t\t\t\t\t\t\t\t\t\tloading=\&quot;lazy\&quot;\n\t\t\t\t\t\tdecoding=\&quot;async\&quot;\n\t\t\t\t\t&gt;\n\t\t\t\t&lt;/a&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t\t\t&amp;#8216;Fim do dinheiro&amp;#8217;: Câmara aprova projeto para reduzir notas e moedas\t\t\t\t&lt;/div&gt;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;div tabindex=\&quot;0\&quot; aria-label=\&quot;Voltar\&quot; class=&#39;&#39;&gt;&lt;/div&gt;\n\t\t\t\t\t&lt;div tabindex=\&quot;0\&quot; aria-label=\&quot;Avançar\&quot; class=&#39;&#39;&gt;&lt;/div&gt;\n\t\t\t\t\t\t\t&lt;div class=&#39;&#39;&gt;\n\t\t\t&lt;a href=\&quot;https://www.suno.com.br/noticias/web-stories/\&quot;&gt;\n\t\t\t\tVisualizando todos Stories\t\t\t&lt;/a&gt;\n\t\t&lt;/div&gt;\n\t\t\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\t\t\n\n\n&lt;p&gt;Após a divulgação da carta, Skaf, que não havia se posicionado no primeiro turno, se manifestou favorável à reeleição de &lt;a href=\&quot;https://www.suno.com.br/noticias/tags/jair-bolsonaro/\&quot; target=\&quot;_blank\&quot; rel=\&quot;noreferrer noopener\&quot;&gt;Jair Bolsonaro (PL)&lt;/a&gt;, que foi derrotado. &lt;/p&gt;\n\n\n\n&lt;p&gt;Maior e mais forte entidade empresarial do País, a Fiesp reúne 131 sindicatos filiados, divididos em 23 setores produtivos, que representam por volta de 150 mil empresas do Estado de São Paulo.&lt;/p&gt;\n\n\n\n&lt;h2 id=\&quot;h-impeachment-na-fiesp\&quot;&gt;Impeachment na Fiesp&lt;/h2&gt;\n\n\n\n&lt;p&gt;Para uma pessoa que acompanha a disputa, Josué estaria em uma situação difícil, e as chances de um &lt;strong&gt;impeachment &lt;/strong&gt;são reais &amp;#8211; é preciso metade dos votos dos filiados para afastar o presidente. &lt;/p&gt;\n\n\n\n\n\n&lt;p&gt;Ele, porém, não está parado: Josué é assessorado pelo jurista Miguel Reale Júnior para tentar encontrar brechas legais para barrar a tentativa de afastá-lo do cargo. &lt;/p&gt;\n\n\n\n&lt;p&gt;Um ponto que é analisado pela equipe do jurista é se a convocação para a assembleia cumpriu os prazos do estatuto da entidade.&lt;/p&gt;\n\n\n\n&lt;p&gt;O presidente da Associação Brasileira da Indústria do Plástico (Abiplast), José Ricardo Roriz Coelho, disse que o movimento neste momento &amp;#8220;está totalmente fora do razoável&amp;#8221; e que &amp;#8220;a entidade deveria estar convergente para se construir uma proposta de mais competitividade para a indústria&amp;#8221;. &lt;/p&gt;\n\n\n\n&lt;p&gt;Procurada, a &lt;strong&gt;Fiesp &lt;/strong&gt;não comentou o caso.&lt;/p&gt;\n\n\n\n&lt;p&gt;&lt;em&gt;As informações são do jornal O Estado de S. Paulo&lt;/em&gt;&lt;/p&gt;\n\n\n&quot;,
      &quot;tags&quot;: [
        &quot;Política&quot;,
        &quot;Agências&quot;,
        &quot;São Paulo&quot;
      ],
      &quot;assets&quot;: [
        {
          &quot;assetId&quot;: 400,
          &quot;assetMainId&quot;: 331,
          &quot;ticker&quot;: &quot;BBAS3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;BBAS3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/bbas3&quot;
        },
        {
          &quot;assetId&quot;: 427,
          &quot;assetMainId&quot;: 345,
          &quot;ticker&quot;: &quot;ITSA4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITSA4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itsa4&quot;
        },
        {
          &quot;assetId&quot;: 426,
          &quot;assetMainId&quot;: 345,
          &quot;ticker&quot;: &quot;ITSA3&quot;,
          &quot;isMainContentAsset&quot;: false,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITSA3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itsa3&quot;
        },
        {
          &quot;assetId&quot;: 530,
          &quot;assetMainId&quot;: 408,
          &quot;ticker&quot;: &quot;PETR4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;PETR4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/petr4&quot;
        },
        {
          &quot;assetId&quot;: 529,
          &quot;assetMainId&quot;: 408,
          &quot;ticker&quot;: &quot;PETR3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;PETR3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/petr3&quot;
        }
      ],
      &quot;priority&quot;: 0,
      &quot;imageUrl&quot;: &quot;https://files.sunoresearch.com.br/n/uploads/2021/01/cropped-238ba7a5-banco-do-brasil-1-640x853.jpg&quot;,
      &quot;contentType&quot;: 2,
      &quot;resourceType&quot;: 0,
      &quot;isSponsored&quot;: false,
      &quot;isInstitutional&quot;: false,
      &quot;assetsSerialized&quot;: &quot;[{\&quot;AssetId\&quot;:400,\&quot;AssetMainId\&quot;:331,\&quot;Ticker\&quot;:\&quot;BBAS3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;BBAS3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/bbas3\&quot;},{\&quot;AssetId\&quot;:427,\&quot;AssetMainId\&quot;:345,\&quot;Ticker\&quot;:\&quot;ITSA4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITSA4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itsa4\&quot;},{\&quot;AssetId\&quot;:426,\&quot;AssetMainId\&quot;:345,\&quot;Ticker\&quot;:\&quot;ITSA3\&quot;,\&quot;IsMainContentAsset\&quot;:false,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITSA3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itsa3\&quot;},{\&quot;AssetId\&quot;:530,\&quot;AssetMainId\&quot;:408,\&quot;Ticker\&quot;:\&quot;PETR4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;PETR4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/petr4\&quot;},{\&quot;AssetId\&quot;:529,\&quot;AssetMainId\&quot;:408,\&quot;Ticker\&quot;:\&quot;PETR3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;PETR3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/petr3\&quot;}]&quot;,
      &quot;tagsSerialized&quot;: &quot;[\&quot;Política\&quot;,\&quot;Agências\&quot;,\&quot;São Paulo\&quot;]&quot;,
      &quot;publishDate&quot;: &quot;2022-12-07T11:25:24+00:00&quot;,
      &quot;publishDate_F&quot;: &quot;há 1 mês&quot;
    }
  ],
  &quot;providers&quot;: [
    {
      &quot;id&quot;: 35,
      &quot;name&quot;: &quot;InfoMoney&quot;,
      &quot;logoUrl&quot;: &quot;https://www.infomoney.com.br/wp-content/uploads/2019/10/IM-Favicon.png&quot;,
      &quot;contentType&quot;: 2,
      &quot;resourceType&quot;: 2,
      &quot;issponsored&quot;: false,
      &quot;isinstitutional&quot;: false
    },
    {
      &quot;id&quot;: 34,
      &quot;name&quot;: &quot;Suno Notícias&quot;,
      &quot;logoUrl&quot;: &quot;https://yt3.ggpht.com/sLXnIsLUzIfz0gEXV8rJHGHUt1g6WmoWeSaBN59dqbiHJTQKv8_Z294av-TPF6Qr8F2vURpbtQ=s88-c-k-c0x00ffffff-no-rj&quot;,
      &quot;contentType&quot;: 2,
      &quot;resourceType&quot;: 2,
      &quot;issponsored&quot;: false,
      &quot;isinstitutional&quot;: false
    },
    {
      &quot;id&quot;: 67,
      &quot;name&quot;: &quot;Suno&quot;,
      &quot;logoUrl&quot;: &quot;https://yt3.ggpht.com/P_zzp_lzslOmQuVBYA9htomIrOBJ4aENpqOEjmnKsm6knuBnP9rL7utbggGKfOg_acy-reqNsrw=s88-c-k-c0x00ffffff-no-rj&quot;,
      &quot;contentType&quot;: 1,
      &quot;resourceType&quot;: 1,
      &quot;issponsored&quot;: false,
      &quot;isinstitutional&quot;: false
    }
  ]
}">
                <input id="news-text-related" name="news-text-related" type="hidden"
                    value="[&quot;BGIP4&quot;,&quot;BNBR3&quot;,&quot;BIDI4&quot;,&quot;BRBI11&quot;,&quot;BBDC4&quot;,&quot;RPAD6&quot;,&quot;BMEB4&quot;,&quot;IDVL4&quot;,&quot;BPAN4&quot;,&quot;BRSR3&quot;]">
                <input id="news-text-categoryType" name="news-text-categoryType" type="hidden" value="1">
                <h2 class="fs-4 fs-xs-5 mt-0 mb-3 fw-900 text-main">
                    NOTÍCIAS
                    <span class="d-block fs-2 fw-700 lh-2">sobre ITAUSA</span>
                </h2>
                <div class="news-text-scroll-y w-100">
                    <div class="news-text-container d-md-flex flex-wrap justify-start w-100">
                        <div class="item w-100 w-md-50 w-lg-25 img-lazy-group">
                            <a data-href="undefined" role="button" rel="noopener noreferrer nofollow"
                                class="d-flex flex-md-column align-items-center justify-between">
                                <div class="w-md-100">
                                    <div class="image bg-lazy"
                                        data-img="url(https://www.infomoney.com.br/wp-content/uploads/2022/03/Dividendos.jpg)">
                                    </div>
                                </div>
                                <div class="
                         w-100 card-texts
                         pt-1 pt-md-0
                         pb-1 pb-md-0
                         pr-1 pr-md-2
                         pl-1 pl-md-1
                         d-md-flex flex-md-column justify-between
                         ">
                                    <div class="title mt-md-1 ">
                                        Agenda de dividendos de janeiro: Petrobras, Santos Brasil, Itaúsa e Direcional
                                        pagam nesse mês
                                    </div>
                                    <div class="mt-1 author w-100 d-flex align-items-center">
                                        <div>
                                            <div class="bg-lazy"
                                                data-img="url(https://www.infomoney.com.br/wp-content/uploads/2019/10/IM-Favicon.png)">
                                            </div>
                                        </div>
                                        <div class="ml-1 ">
                                            <div class="d-flex">


                                            </div>
                                            <div class="name truncate lh-3 ">
                                                por <strong class="fw-700">InfoMoney</strong>
                                            </div>
                                            <div class="date ">
                                                há 4 dias
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                        <div class="item w-100 w-md-50 w-lg-25 img-lazy-group">
                            <a data-href="undefined" role="button" rel="noopener noreferrer nofollow"
                                class="d-flex flex-md-column align-items-center justify-between">
                                <div class="w-md-100">
                                    <div class="image bg-lazy"
                                        data-img="url(https://www.infomoney.com.br/wp-content/uploads/2022/07/estavel4.jpg)">
                                    </div>
                                </div>
                                <div class="
                         w-100 card-texts
                         pt-1 pt-md-0
                         pb-1 pb-md-0
                         pr-1 pr-md-2
                         pl-1 pl-md-1
                         d-md-flex flex-md-column justify-between
                         ">
                                    <div class="title mt-md-1 ">
                                        Ibovespa hoje: o movimento da Bolsa Ao Vivo
                                    </div>
                                    <div class="mt-1 author w-100 d-flex align-items-center">
                                        <div>
                                            <div class="bg-lazy"
                                                data-img="url(https://www.infomoney.com.br/wp-content/uploads/2019/10/IM-Favicon.png)">
                                            </div>
                                        </div>
                                        <div class="ml-1 ">
                                            <div class="d-flex">


                                            </div>
                                            <div class="name truncate lh-3 ">
                                                por <strong class="fw-700">InfoMoney</strong>
                                            </div>
                                            <div class="date ">
                                                há 8 dias
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                        <div class="item w-100 w-md-50 w-lg-25 img-lazy-group">
                            <a data-href="undefined" role="button" rel="noopener noreferrer nofollow"
                                class="d-flex flex-md-column align-items-center justify-between">
                                <div class="w-md-100">
                                    <div class="image bg-lazy"
                                        data-img="url(https://files.sunoresearch.com.br/n/uploads/2021/05/fb94654d-18739314_1326765467415188_9147479433665342283_o-1.jpg)">
                                    </div>
                                </div>
                                <div class="
                         w-100 card-texts
                         pt-1 pt-md-0
                         pb-1 pb-md-0
                         pr-1 pr-md-2
                         pl-1 pl-md-1
                         d-md-flex flex-md-column justify-between
                         ">
                                    <div class="title mt-md-1 ">
                                        Alupar (ALUP11) muda mínimo obrigatório de dividendos; entenda
                                    </div>
                                    <div class="mt-1 author w-100 d-flex align-items-center">
                                        <div>
                                            <div class="bg-lazy"
                                                data-img="url(https://yt3.ggpht.com/sLXnIsLUzIfz0gEXV8rJHGHUt1g6WmoWeSaBN59dqbiHJTQKv8_Z294av-TPF6Qr8F2vURpbtQ=s88-c-k-c0x00ffffff-no-rj)">
                                            </div>
                                        </div>
                                        <div class="ml-1 ">
                                            <div class="d-flex">


                                            </div>
                                            <div class="name truncate lh-3 ">
                                                por <strong class="fw-700">Suno Notícias</strong>
                                            </div>
                                            <div class="date ">
                                                há 1 mês
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                        <div class="item w-100 w-md-50 w-lg-25 img-lazy-group">
                            <a data-href="undefined" role="button" rel="noopener noreferrer nofollow"
                                class="d-flex flex-md-column align-items-center justify-between">
                                <div class="w-md-100">
                                    <div class="image bg-lazy"
                                        data-img="url(https://files.sunoresearch.com.br/n/uploads/2021/01/cropped-238ba7a5-banco-do-brasil-1-640x853.jpg)">
                                    </div>
                                </div>
                                <div class="
                         w-100 card-texts
                         pt-1 pt-md-0
                         pb-1 pb-md-0
                         pr-1 pr-md-2
                         pl-1 pl-md-1
                         d-md-flex flex-md-column justify-between
                         ">
                                    <div class="title mt-md-1 ">
                                        Fiesp: ‘Levante’ quer impeachment de presidente e marca assembleia
                                    </div>
                                    <div class="mt-1 author w-100 d-flex align-items-center">
                                        <div>
                                            <div class="bg-lazy"
                                                data-img="url(https://yt3.ggpht.com/sLXnIsLUzIfz0gEXV8rJHGHUt1g6WmoWeSaBN59dqbiHJTQKv8_Z294av-TPF6Qr8F2vURpbtQ=s88-c-k-c0x00ffffff-no-rj)">
                                            </div>
                                        </div>
                                        <div class="ml-1 ">
                                            <div class="d-flex">


                                            </div>
                                            <div class="name truncate lh-3 ">
                                                por <strong class="fw-700">Suno Notícias</strong>
                                            </div>
                                            <div class="date ">
                                                há 1 mês
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
                <div class=" text-center mt-3">
                    <div class="d-inline-block p-relative">
                        <div class="need-login-cover" data-position="top"
                            data-tooltip="Faça o login para ver videos sobre essa empresa e muito +!">
                        </div>
                        <a title="Ir para a tela de distribuição de capital"
                            href="https://statusinvest.com.br/cliente/noticias/acoes/427/itsa4?type=texto"
                            class="link btn btn-secondary fs-3 lh-3_5 d-flex justify-between align-items-center">
                            <span class="d-block mr-2">
                                <strong>+</strong> notícas
                            </span>
                            <i style="max-width: 15px;" class="material-icons fs-3_5 ">arrow_forward</i>
                        </a>
                    </div>
                </div>
                <template id="news-text-item-template" style="display:none"></template>
                <template id="news-text-modal-template"></template>
                <template id="news-text-modal-related-template" style="display:none"></template>
            </div>
            <div class="container mt-5 news-container">
                <h2 class="fs-4 fs-xs-5 mt-0 mb-3 fw-900 text-main">
                    VÍDEOS
                    <span class="d-block fs-2 fw-700 lh-2">sobre ITAUSA</span>
                </h2>
                <input id="news-video-hidden" name="news-video-hidden" type="hidden" value="{
  &quot;content&quot;: [
    {
      &quot;contentId&quot;: 17145,
      &quot;providerConfigurationId&quot;: 67,
      &quot;contentUrl&quot;: &quot;https://www.youtube.com/embed/q5YtZ0aGbog?rel=0&quot;,
      &quot;title&quot;: &quot;ITSA4: DIVIDENDOS DE ITAÚSA SÃO BAIXOS? #shorts&quot;,
      &quot;description&quot;: &quot;ITSA4: DIVIDENDOS DE ITAÚSA SÃO BAIXOS? #shorts [Ebook gratuito] Guia Completo: ...&quot;,
      &quot;content&quot;: null,
      &quot;tags&quot;: [],
      &quot;assets&quot;: [
        {
          &quot;assetId&quot;: 427,
          &quot;assetMainId&quot;: 345,
          &quot;ticker&quot;: &quot;ITSA4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITSA4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itsa4&quot;
        },
        {
          &quot;assetId&quot;: 426,
          &quot;assetMainId&quot;: 345,
          &quot;ticker&quot;: &quot;ITSA3&quot;,
          &quot;isMainContentAsset&quot;: false,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITSA3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itsa3&quot;
        }
      ],
      &quot;priority&quot;: 0,
      &quot;imageUrl&quot;: &quot;https://i.ytimg.com/vi/q5YtZ0aGbog/hqdefault.jpg&quot;,
      &quot;contentType&quot;: 1,
      &quot;resourceType&quot;: 0,
      &quot;isSponsored&quot;: false,
      &quot;isInstitutional&quot;: false,
      &quot;assetsSerialized&quot;: &quot;[{\&quot;AssetId\&quot;:427,\&quot;AssetMainId\&quot;:345,\&quot;Ticker\&quot;:\&quot;ITSA4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITSA4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itsa4\&quot;},{\&quot;AssetId\&quot;:426,\&quot;AssetMainId\&quot;:345,\&quot;Ticker\&quot;:\&quot;ITSA3\&quot;,\&quot;IsMainContentAsset\&quot;:false,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITSA3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itsa3\&quot;}]&quot;,
      &quot;tagsSerialized&quot;: &quot;[]&quot;,
      &quot;publishDate&quot;: &quot;2022-12-01T00:30:12+00:00&quot;,
      &quot;publishDate_F&quot;: &quot;há 1 mês&quot;
    },
    {
      &quot;contentId&quot;: 17390,
      &quot;providerConfigurationId&quot;: 67,
      &quot;contentUrl&quot;: &quot;https://www.youtube.com/embed/DD4fEwTX87Y?rel=0&quot;,
      &quot;title&quot;: &quot;BANCOS PARA 2023? | BBAS3, ITSA4 e BBDC4&quot;,
      &quot;description&quot;: &quot;[Relatório gratuito] Banco do Brasil (BBAS3)​ ...&quot;,
      &quot;content&quot;: null,
      &quot;tags&quot;: [],
      &quot;assets&quot;: [
        {
          &quot;assetId&quot;: 400,
          &quot;assetMainId&quot;: 331,
          &quot;ticker&quot;: &quot;BBAS3&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;BBAS3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/bbas3&quot;
        },
        {
          &quot;assetId&quot;: 427,
          &quot;assetMainId&quot;: 345,
          &quot;ticker&quot;: &quot;ITSA4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITSA4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itsa4&quot;
        },
        {
          &quot;assetId&quot;: 426,
          &quot;assetMainId&quot;: 345,
          &quot;ticker&quot;: &quot;ITSA3&quot;,
          &quot;isMainContentAsset&quot;: false,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITSA3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itsa3&quot;
        },
        {
          &quot;assetId&quot;: 399,
          &quot;assetMainId&quot;: 330,
          &quot;ticker&quot;: &quot;BBDC4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;BBDC4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/bbdc4&quot;
        },
        {
          &quot;assetId&quot;: 398,
          &quot;assetMainId&quot;: 330,
          &quot;ticker&quot;: &quot;BBDC3&quot;,
          &quot;isMainContentAsset&quot;: false,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;BBDC3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/bbdc3&quot;
        }
      ],
      &quot;priority&quot;: 0,
      &quot;imageUrl&quot;: &quot;https://i.ytimg.com/vi/DD4fEwTX87Y/hqdefault.jpg&quot;,
      &quot;contentType&quot;: 1,
      &quot;resourceType&quot;: 0,
      &quot;isSponsored&quot;: false,
      &quot;isInstitutional&quot;: false,
      &quot;assetsSerialized&quot;: &quot;[{\&quot;AssetId\&quot;:400,\&quot;AssetMainId\&quot;:331,\&quot;Ticker\&quot;:\&quot;BBAS3\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;BBAS3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/bbas3\&quot;},{\&quot;AssetId\&quot;:427,\&quot;AssetMainId\&quot;:345,\&quot;Ticker\&quot;:\&quot;ITSA4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITSA4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itsa4\&quot;},{\&quot;AssetId\&quot;:426,\&quot;AssetMainId\&quot;:345,\&quot;Ticker\&quot;:\&quot;ITSA3\&quot;,\&quot;IsMainContentAsset\&quot;:false,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITSA3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itsa3\&quot;},{\&quot;AssetId\&quot;:399,\&quot;AssetMainId\&quot;:330,\&quot;Ticker\&quot;:\&quot;BBDC4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;BBDC4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/bbdc4\&quot;},{\&quot;AssetId\&quot;:398,\&quot;AssetMainId\&quot;:330,\&quot;Ticker\&quot;:\&quot;BBDC3\&quot;,\&quot;IsMainContentAsset\&quot;:false,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;BBDC3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/bbdc3\&quot;}]&quot;,
      &quot;tagsSerialized&quot;: &quot;[]&quot;,
      &quot;publishDate&quot;: &quot;2022-12-07T23:38:17+00:00&quot;,
      &quot;publishDate_F&quot;: &quot;há 1 mês&quot;
    },
    {
      &quot;contentId&quot;: 17561,
      &quot;providerConfigurationId&quot;: 67,
      &quot;contentUrl&quot;: &quot;https://www.youtube.com/embed/xNP9EMoGou0?rel=0&quot;,
      &quot;title&quot;: &quot;Investir em renda fixa ou renda variável? e questões sobre a ITAÚSA (ITSA4)&quot;,
      &quot;description&quot;: &quot;Relatório GRATUITO de ITSA4: ...&quot;,
      &quot;content&quot;: null,
      &quot;tags&quot;: [],
      &quot;assets&quot;: [
        {
          &quot;assetId&quot;: 427,
          &quot;assetMainId&quot;: 345,
          &quot;ticker&quot;: &quot;ITSA4&quot;,
          &quot;isMainContentAsset&quot;: true,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITSA4&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itsa4&quot;
        },
        {
          &quot;assetId&quot;: 426,
          &quot;assetMainId&quot;: 345,
          &quot;ticker&quot;: &quot;ITSA3&quot;,
          &quot;isMainContentAsset&quot;: false,
          &quot;normalizedName&quot;: null,
          &quot;categoryType&quot;: 1,
          &quot;identificationType&quot;: 0,
          &quot;normalizedTicker&quot;: &quot;ITSA3&quot;,
          &quot;assetUrl&quot;: &quot;http://statusinvest.com.br/acoes/itsa3&quot;
        }
      ],
      &quot;priority&quot;: 0,
      &quot;imageUrl&quot;: &quot;https://i.ytimg.com/vi/xNP9EMoGou0/hqdefault.jpg&quot;,
      &quot;contentType&quot;: 1,
      &quot;resourceType&quot;: 0,
      &quot;isSponsored&quot;: false,
      &quot;isInstitutional&quot;: false,
      &quot;assetsSerialized&quot;: &quot;[{\&quot;AssetId\&quot;:427,\&quot;AssetMainId\&quot;:345,\&quot;Ticker\&quot;:\&quot;ITSA4\&quot;,\&quot;IsMainContentAsset\&quot;:true,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITSA4\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itsa4\&quot;},{\&quot;AssetId\&quot;:426,\&quot;AssetMainId\&quot;:345,\&quot;Ticker\&quot;:\&quot;ITSA3\&quot;,\&quot;IsMainContentAsset\&quot;:false,\&quot;NormalizedName\&quot;:null,\&quot;CategoryType\&quot;:1,\&quot;IdentificationType\&quot;:0,\&quot;NormalizedTicker\&quot;:\&quot;ITSA3\&quot;,\&quot;AssetUrl\&quot;:\&quot;http://statusinvest.com.br/acoes/itsa3\&quot;}]&quot;,
      &quot;tagsSerialized&quot;: &quot;[]&quot;,
      &quot;publishDate&quot;: &quot;2022-12-12T16:00:33+00:00&quot;,
      &quot;publishDate_F&quot;: &quot;há 25 dias&quot;
    }
  ],
  &quot;providers&quot;: [
    {
      &quot;id&quot;: 35,
      &quot;name&quot;: &quot;InfoMoney&quot;,
      &quot;logoUrl&quot;: &quot;https://www.infomoney.com.br/wp-content/uploads/2019/10/IM-Favicon.png&quot;,
      &quot;contentType&quot;: 2,
      &quot;resourceType&quot;: 2,
      &quot;issponsored&quot;: false,
      &quot;isinstitutional&quot;: false
    },
    {
      &quot;id&quot;: 34,
      &quot;name&quot;: &quot;Suno Notícias&quot;,
      &quot;logoUrl&quot;: &quot;https://yt3.ggpht.com/sLXnIsLUzIfz0gEXV8rJHGHUt1g6WmoWeSaBN59dqbiHJTQKv8_Z294av-TPF6Qr8F2vURpbtQ=s88-c-k-c0x00ffffff-no-rj&quot;,
      &quot;contentType&quot;: 2,
      &quot;resourceType&quot;: 2,
      &quot;issponsored&quot;: false,
      &quot;isinstitutional&quot;: false
    },
    {
      &quot;id&quot;: 67,
      &quot;name&quot;: &quot;Suno&quot;,
      &quot;logoUrl&quot;: &quot;https://yt3.ggpht.com/P_zzp_lzslOmQuVBYA9htomIrOBJ4aENpqOEjmnKsm6knuBnP9rL7utbggGKfOg_acy-reqNsrw=s88-c-k-c0x00ffffff-no-rj&quot;,
      &quot;contentType&quot;: 1,
      &quot;resourceType&quot;: 1,
      &quot;issponsored&quot;: false,
      &quot;isinstitutional&quot;: false
    }
  ]
}">
                <div class="news-video-container">
                    <div class="shadow d-md-flex w-100">
                        <div class="video w-100 w-md-55 w-xl-60">
                            <div>
                            </div>
                        </div>
                        <div class="w-100 w-md-45 w-xl-40 mt-3 mt-md-0">
                            <div class="playlist">
                                <div class="item d-flex selected">
                                    <div>
                                        <div class="thumbnail" data-img=""></div>
                                    </div>
                                    <div class="d-flex flex-column justify-around w-100">
                                        <div class="title">
                                            <span class="text"></span>
                                            <span class="text"></span>
                                            <span class="text"></span>
                                        </div>
                                        <div class="mt-1 author w-100 d-flex align-items-center">
                                            <div class="mr-1">
                                                <div data-img=""></div>
                                            </div>
                                            <div class="name text">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="item d-flex ">
                                    <div>
                                        <div class="thumbnail" data-img=""></div>
                                    </div>
                                    <div class="d-flex flex-column justify-around w-100">
                                        <div class="title">
                                            <span class="text"></span>
                                            <span class="text"></span>
                                            <span class="text"></span>
                                        </div>
                                        <div class="mt-1 author w-100 d-flex align-items-center">
                                            <div class="mr-1">
                                                <div data-img=""></div>
                                            </div>
                                            <div class="name text">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="item d-flex ">
                                    <div>
                                        <div class="thumbnail" data-img=""></div>
                                    </div>
                                    <div class="d-flex flex-column justify-around w-100">
                                        <div class="title">
                                            <span class="text"></span>
                                            <span class="text"></span>
                                            <span class="text"></span>
                                        </div>
                                        <div class="mt-1 author w-100 d-flex align-items-center">
                                            <div class="mr-1">
                                                <div data-img=""></div>
                                            </div>
                                            <div class="name text">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class=" text-center mt-3">
                    <div class="d-inline-block p-relative">
                        <div class="need-login-cover" data-position="top"
                            data-tooltip="Faça o login para ver videos sobre ITAUSA e muito +!">
                        </div>
                        <a title="Ir para a tela de notícias" rel="noopener noreferrer nofollow"
                            href="https://statusinvest.com.br/cliente/noticias/acoes/427/itsa4?type=video"
                            class="link btn btn-secondary fs-3 lh-3_5 d-flex justify-between align-items-center">
                            <span class="d-block mr-2">
                                <strong>+</strong> vídeos
                            </span>
                            <i style="max-width: 15px;" class="material-icons fs-3_5 ">arrow_forward</i>
                        </a>
                    </div>
                </div>
                <template id="news-video-template" style="display:none"></template>
                <template id="playlist-item-template" style="display:none"></template>
            </div>
            <div class="container">
                <div class="content-show-moreless mt-5">
                    <div class="content md">
                        <div>
                            <h2> Sobre a Itaúsa (ITSA4) </h2>
                            <p> A Itaúsa S.A., mais conhecida como Itaúsa, é uma das maiores holdings do país,
                                especialmente por sua
                                atuação no controle de empresas da área financeira, com destaque para o Banco Itaú
                                Unibanco. </p>
                            <p> Criada nos anos 1960, a Itaúsa também é responsável pela gestão de empresas ligadas a
                                outros segmentos
                                como papel, celulose e tecnologia, por exemplo. Por anos o grupo ainda atuou como a
                                principal frente da
                                área de investimentos do Banco Itaú. </p>
                            <p> Além disso, a Itaúsa é constituída como sociedade anônima de capital aberto, sendo suas
                                ações
                                negociadas na Bolsa do Brasil, a B3, sob os códigos ITSA3 e ITSA4. </p>
                            <h2> Histórico da Itaúsa (ITSA4) </h2>
                            <p> A Itaúsa foi criada no ano de 1966, sob o nome de Banco Itaú de Investimentos S.A. Seu
                                grande objetivo
                                inicial era reforçar a atuação da instituição financeira no setor de investimentos, área
                                que era o carro
                                chefe do grupo na época. </p>
                            <p> Naquele mesmo ano, o negócio passou a negociar suas ações na Bolsa de Valores nacional.
                            </p>
                            <p> Ao longo da década de 1970, o Banco Itaú começou a ganhar força como banco múltiplo e,
                                no processo, o
                                grupo passou por diversas reformulações. </p>
                            <p> Em 1974, o Banco Itaú de Investimentos passou a ser chamado Investimentos Itaú S.A. Foi
                                neste período
                                que a holding aumentou sua participação acionária em outros negócios, visando esta
                                modalidade como
                                principal campo de atuação da área. </p>
                            <p> Assim, a instituição financeira diversificou seu campo de atuação para além da área
                                financeira,
                                especialmente por ter adquirido participação acionária em negócios de outros segmentos,
                                como foi nos
                                casos da Duratex e da NTS, entre outras. </p>
                            <p> Em 1991 o negócio passou por outra alteração em sua razão social, passando a se chamar
                                Itaúsa -
                                Investimentos Itaú S.A. </p>
                            <p> Em 2006, já como Itaúsa, a instituição financeira passou a integrar o segmento de
                                listagem Nível 1 da
                                BM&amp;FBovespa e, na década seguinte, a empresa passou por uma série de reformulações.
                            </p>
                            <p> No processo, os investimentos na Itautec - principal negócio de tecnologia do grupo -
                                foram
                                encerrados, e em 2018 a Itaúsa vendeu a participação que possuía na Elekeiroz por cerca
                                de R$160
                                milhões. </p>
                            <h2> Atuação da Itaúsa (ITSA4) </h2>
                            <p> Sendo a holding responsável pelo banco Itaú Unibanco, a Itaúsa está presente em todas as
                                regiões do
                                Brasil, além de atuar em mais de 20 países espalhados pelo globo. A instituição
                                financeira também
                                trabalha no campo digital. </p>
                            <p> Além de seu trabalho no setor financeiro, a Itaúsa também tem participação em empresas
                                de outros
                                segmentos, diversificando o seu campo de atuação. </p>
                            <h2> Produtos/Serviços da Itaúsa (ITSA4) </h2>
                            <p> A Itaúsa trabalha especialmente com a administração de outros negócios, com destaque
                                para sua atuação
                                na área financeira, segmento em que é responsável pela gestão do maior banco privado do
                                Brasil: o Itaú
                                Unibanco. </p>
                            <p> Além disso, a Itaúsa está presente em outros segmentos, e a holding tem participação em
                                empresas como
                                Alpargatas, NTS e Duratex, entre outras. O grupo ainda atua na área cultural,
                                patrocinando eventos
                                através de suas marcas. </p>
                            <h2> Como investir em ações da Itaúsa (ITSA4) </h2>
                            <p> Para adquirir ações da Itaúsa, o investidor deve acessar o site ou aplicativo de sua
                                corretora e
                                buscar pelo código ITSA4. </p>
                        </div>
                    </div>
                    <div class="text-center div-action">
                        <button title="Ver tudo" type="button"
                            class="btn btn-show btn-xsmall btn-secondary waves-effect">
                            ver mais
                        </button>
                    </div>
                </div>
            </div>
            <div class="container advertising ads-lazy-group
                pl-sm-0 pr-sm-0
                pt-5
         ">
                <div class="a_x_d_x_s-banner
                    pt-1 pb-1 pl-0 pl-md-1 pr-0 pr-md-1
             " style="overflow: hidden;" data-id="banner-3">
                    <pubguru data-pg-ad="statusinvest_desktop_banner"></pubguru>
                </div>
            </div>
            <div class="pb-7 pt-7 mt-5 white ">
                <div class="container">
                    <h2 title="ACIONISTAS  da  ITAUSA" class="fs-4 fs-xs-5 mt-0 mb-4 mb-sm-5 fw-900 text-main">
                        ACIONISTAS DA ITAUSA
                    </h2>
                    <div id="distribuicaoCapital" class="card ov-hidden rounded  mt-5">
                        <div class="d-md-flex justify-between align-items-center mb-2">
                            <div class="d-flex justify-start align-items-center">
                                <i class="material-icons mr-1 text-main">
                                    account_balance_wallet
                                </i>
                                <h3 class="card-title m-0">Distribuição de capital da ITAUSA</h3>
                            </div>
                            <div class="d-flex align-items-center  mt-2 mt-md-0">
                                <small class="d-block fs-2 fs-md-3 lh-2 text-center">
                                    DATA BASE <span class="d-xs-none d-sm-inline-block">- </span>
                                    <strong class="fw-900 d-xs-block d-sm-inline-block">21/11/2022</strong>
                                </small>
                                <div class="p-relative text-center">
                                    <div class="need-login-cover" data-position="top"
                                        data-tooltip="&lt;span&gt;Veja o &lt;b class=&#39;fw-900&#39;&gt;histórico&lt;/b&gt; da distribuição de capital acionária, a &lt;b class=&#39;fw-900&#39;&gt;variação&lt;/b&gt; da quantidade e percentual dos &lt;b class=&#39;fw-900&#39;&gt;principais acionistas&lt;/b&gt; da empresa! &lt;small class=&#39;d-block&#39;&gt;Disponível a partir do &lt;b&gt;plano TOURO&lt;/b&gt;&lt;/small&gt;&lt;/span&gt;">
                                    </div>
                                    <a title="Ir para a tela de distribuição de capital"
                                        href="https://statusinvest.com.br/cliente/posicao-acionaria/itsa4"
                                        class="link btn btn-secondary btn-xsmall pl-1 pr-1  ml-3">
                                        <div class="d-flex align-items-center">
                                            <span class="fs-2"><b>Histórico</b></span>&nbsp;<i
                                                class="material-icons">arrow_forward</i>
                                        </div>
                                    </a>
                                </div>
                            </div>
                        </div>
                        <div
                            class="top-info top-info-1 top-info-xs-2 top-info-sm-2 top-info-md-n sm d-flex justify-between img-lazy-group">
                            <div class="info pr-md-2 bg-main-gd-h white-text rounded">
                                <div>
                                    <div>
                                        <div class="d-flex align-items-center">
                                            <div>
                                                <span class="sub-value">Investidores</span>
                                                <strong class="value">
                                                    903.591
                                                </strong>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="info pr-md-2 pb-sm-0 p-md-0 ">
                                <div>
                                    <div>
                                        <div class="d-flex align-items-center">
                                            <img width="40" height="40" alt="ícone para Institucional"
                                                src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/dot-30.png"
                                                data-img="/img/pages/asset/inv-institucional.png" class="mr-1 mr-lg-2">
                                            <div>
                                                <span class="sub-value mb-0 lh-1">Institucional</span>
                                                <strong class="value">
                                                    0
                                                </strong>
                                                <span title="" class="sub-value">
                                                    <b class="v-align-middle mb-0 lh-2">
                                                        -%
                                                        <span class="fs-2 fw-100"></span>
                                                    </b>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="info pr-md-2 pb-xs-0 p-md-0 ">
                                <div>
                                    <div>
                                        <div class="d-flex align-items-center">
                                            <img width="40" height="40" alt="ícone para Pessoa jurídica"
                                                src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/dot-30.png"
                                                data-img="/img/pages/asset/inv-pj.png" class="mr-1 mr-lg-2">
                                            <div>
                                                <span class="sub-value mb-0 lh-1">Pessoa jurídica</span>
                                                <strong class="value">
                                                    3.911
                                                </strong>
                                                <span title="" class="sub-value mb-0 lh-2">
                                                    <b class="v-align-middle">
                                                        0,433%
                                                        <span class="fs-2 fw-100"></span>
                                                    </b>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="info pr-md-2 pb-0 p-md-0 ">
                                <div>
                                    <div>
                                        <div class="d-flex align-items-center">
                                            <img width="40" height="40" alt="ícone para Pessoa física"
                                                src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/dot-30.png"
                                                data-img="/img/pages/asset/inv-pf.png" class="mr-1 mr-lg-2">
                                            <div>
                                                <span class="sub-value mb-0  lh-1">Pessoa física</span>
                                                <strong class="value ">
                                                    899.680
                                                </strong>
                                                <span title="" class="sub-value mb-0 lh-2">
                                                    <b class="v-align-middle">
                                                        99,567%
                                                        <span class="fs-2 fw-100"></span>
                                                    </b>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="d-block fs-2 lh-3 text-center mt-3 p-1 grey lighten-3 rounded">
                            A <strong class="fw-700">quantidade de investidores</strong> é atualizada na B3. Dependendo
                            da <strong class="fw-700">data base</strong>, a informação pode ser antes mesmo do IPO,
                            <strong class="fw-700">fazendo com que a quantidade fique bem baixa</strong>
                        </div>
                    </div>
                    <div id="posicaoacionaria" class="card chart-and-list rounded pt-3 pb-3 mt-3 "
                        style="background-color: #f2f2f2;">
                        <input id="results" name="results" type="hidden"
                            value="[{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Alfredo Egydio Arruda Villela Filho&quot;,&quot;NormalizedAcionista&quot;:&quot;alfredo-egydio-arruda-villela-filho&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;12,7860&quot;,&quot;PercentualPreferencial&quot;:&quot;3,9210&quot;,&quot;PercentualTotal&quot;:&quot;6,9670&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;426.272.232&quot;,&quot;QuantidadePreferencial&quot;:&quot;249.673.320&quot;,&quot;QuantidadeTotal&quot;:&quot;675.945.552&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Ana Lúcia de Mattos Barretto Villela&quot;,&quot;NormalizedAcionista&quot;:&quot;ana-lúcia-de-mattos-barretto-villela&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;12,7860&quot;,&quot;PercentualPreferencial&quot;:&quot;3,6580&quot;,&quot;PercentualTotal&quot;:&quot;6,7950&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;426.272.202&quot;,&quot;QuantidadePreferencial&quot;:&quot;232.931.834&quot;,&quot;QuantidadeTotal&quot;:&quot;659.204.036&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Fundação Antonio e Helena Zerrener Instituição Nacional de Beneficência&quot;,&quot;NormalizedAcionista&quot;:&quot;fundação-antonio-e-helena-zerrener-instituição-nacional-de-beneficência&quot;,&quot;CpfCnpj&quot;:&quot;60.480.480/0001-67&quot;,&quot;PessoaFisica&quot;:false,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;15,3910&quot;,&quot;PercentualPreferencial&quot;:&quot;2,0080&quot;,&quot;PercentualTotal&quot;:&quot;6,6080&quot;,&quot;AcionistaControlador&quot;:&quot;não&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;513.137.094&quot;,&quot;QuantidadePreferencial&quot;:&quot;127.887.904&quot;,&quot;QuantidadeTotal&quot;:&quot;641.024.998&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Fundação Itaú para Educação e Cultura&quot;,&quot;NormalizedAcionista&quot;:&quot;fundação-itaú-para-educação-e-cultura&quot;,&quot;CpfCnpj&quot;:&quot;59.573.030/0001-30&quot;,&quot;PessoaFisica&quot;:false,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;11,6990&quot;,&quot;PercentualPreferencial&quot;:&quot;0,7520&quot;,&quot;PercentualTotal&quot;:&quot;4,5140&quot;,&quot;AcionistaControlador&quot;:&quot;não&quot;,&quot;AcordoAcionistas&quot;:&quot;não&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;390.019.195&quot;,&quot;QuantidadePreferencial&quot;:&quot;47.901.674&quot;,&quot;QuantidadeTotal&quot;:&quot;437.920.869&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Rodolfo Villela Marino&quot;,&quot;NormalizedAcionista&quot;:&quot;rodolfo-villela-marino&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;6,4020&quot;,&quot;PercentualPreferencial&quot;:&quot;2,5900&quot;,&quot;PercentualTotal&quot;:&quot;3,9000&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;213.441.264&quot;,&quot;QuantidadePreferencial&quot;:&quot;164.898.432&quot;,&quot;QuantidadeTotal&quot;:&quot;378.339.696&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Ricardo Villela Marino&quot;,&quot;NormalizedAcionista&quot;:&quot;ricardo-villela-marino&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;6,4000&quot;,&quot;PercentualPreferencial&quot;:&quot;2,5880&quot;,&quot;PercentualTotal&quot;:&quot;3,8980&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;213.377.930&quot;,&quot;QuantidadePreferencial&quot;:&quot;164.795.057&quot;,&quot;QuantidadeTotal&quot;:&quot;378.172.987&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;BlackRock Inc.&quot;,&quot;NormalizedAcionista&quot;:&quot;blackrock-inc.&quot;,&quot;CpfCnpj&quot;:&quot;05.838.687/0001-52&quot;,&quot;PessoaFisica&quot;:false,&quot;Nacionalidade&quot;:&quot;Estrangeira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,0000&quot;,&quot;PercentualPreferencial&quot;:&quot;5,0190&quot;,&quot;PercentualTotal&quot;:&quot;3,2940&quot;,&quot;AcionistaControlador&quot;:&quot;não&quot;,&quot;AcordoAcionistas&quot;:&quot;não&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;0&quot;,&quot;QuantidadePreferencial&quot;:&quot;319.559.515&quot;,&quot;QuantidadeTotal&quot;:&quot;319.559.515&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Ricardo Egydio Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;ricardo-egydio-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;3,5810&quot;,&quot;PercentualPreferencial&quot;:&quot;0,7520&quot;,&quot;PercentualTotal&quot;:&quot;1,7240&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;119.385.217&quot;,&quot;QuantidadePreferencial&quot;:&quot;47.896.563&quot;,&quot;QuantidadeTotal&quot;:&quot;167.281.780&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Alfredo Egydio Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;alfredo-egydio-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;3,5830&quot;,&quot;PercentualPreferencial&quot;:&quot;0,7450&quot;,&quot;PercentualTotal&quot;:&quot;1,7200&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;119.439.919&quot;,&quot;QuantidadePreferencial&quot;:&quot;47.459.970&quot;,&quot;QuantidadeTotal&quot;:&quot;166.899.889&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;José Luiz Egydio Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;josé-luiz-egydio-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;3,0910&quot;,&quot;PercentualPreferencial&quot;:&quot;0,7130&quot;,&quot;PercentualTotal&quot;:&quot;1,5300&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;103.043.895&quot;,&quot;QuantidadePreferencial&quot;:&quot;45.417.104&quot;,&quot;QuantidadeTotal&quot;:&quot;148.460.999&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Roberto Egydio Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;roberto-egydio-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;1,8670&quot;,&quot;PercentualPreferencial&quot;:&quot;0,3660&quot;,&quot;PercentualTotal&quot;:&quot;0,8820&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;62.240.171&quot;,&quot;QuantidadePreferencial&quot;:&quot;23.329.988&quot;,&quot;QuantidadeTotal&quot;:&quot;85.570.159&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Olavo Egydio Setubal Júnior&quot;,&quot;NormalizedAcionista&quot;:&quot;olavo-egydio-setubal-júnior&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,3630&quot;,&quot;PercentualPreferencial&quot;:&quot;0,7640&quot;,&quot;PercentualTotal&quot;:&quot;0,6260&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;12.091.867&quot;,&quot;QuantidadePreferencial&quot;:&quot;48.629.914&quot;,&quot;QuantidadeTotal&quot;:&quot;60.721.781&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Paulo Egydio Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;paulo-egydio-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;1,3600&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0920&quot;,&quot;PercentualTotal&quot;:&quot;0,5280&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;45.350.868&quot;,&quot;QuantidadePreferencial&quot;:&quot;5.852.174&quot;,&quot;QuantidadeTotal&quot;:&quot;51.203.042&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Julia Guidon Setubal Winandy&quot;,&quot;NormalizedAcionista&quot;:&quot;julia-guidon-setubal-winandy&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;1,3600&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0920&quot;,&quot;PercentualTotal&quot;:&quot;0,5280&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;45.350.868&quot;,&quot;QuantidadePreferencial&quot;:&quot;5.852.174&quot;,&quot;QuantidadeTotal&quot;:&quot;51.203.042&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Carolina Marinho Lutz Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;carolina-marinho-lutz-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;1,3600&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0920&quot;,&quot;PercentualTotal&quot;:&quot;0,5280&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;45.350.868&quot;,&quot;QuantidadePreferencial&quot;:&quot;5.852.174&quot;,&quot;QuantidadeTotal&quot;:&quot;51.203.042&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Paula Lucas Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;paula-lucas-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,8660&quot;,&quot;PercentualPreferencial&quot;:&quot;0,1700&quot;,&quot;PercentualTotal&quot;:&quot;0,4090&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;28.877.403&quot;,&quot;QuantidadePreferencial&quot;:&quot;10.824.911&quot;,&quot;QuantidadeTotal&quot;:&quot;39.702.314&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Mariana Lucas Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;mariana-lucas-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,8660&quot;,&quot;PercentualPreferencial&quot;:&quot;0,1700&quot;,&quot;PercentualTotal&quot;:&quot;0,4090&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;28.877.403&quot;,&quot;QuantidadePreferencial&quot;:&quot;10.824.911&quot;,&quot;QuantidadeTotal&quot;:&quot;39.702.314&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Camila Setubal Lenz Cesar&quot;,&quot;NormalizedAcionista&quot;:&quot;camila-setubal-lenz-cesar&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;1,0840&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0010&quot;,&quot;PercentualTotal&quot;:&quot;0,3730&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;36.123.996&quot;,&quot;QuantidadePreferencial&quot;:&quot;24.473&quot;,&quot;QuantidadeTotal&quot;:&quot;36.148.469&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Bruno Rizzo Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;bruno-rizzo-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;1,0840&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0010&quot;,&quot;PercentualTotal&quot;:&quot;0,3730&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;36.123.995&quot;,&quot;QuantidadePreferencial&quot;:&quot;21.940&quot;,&quot;QuantidadeTotal&quot;:&quot;36.145.935&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Luiza Rizzo Setubal Kairalla&quot;,&quot;NormalizedAcionista&quot;:&quot;luiza-rizzo-setubal-kairalla&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira-&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;1,0840&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0010&quot;,&quot;PercentualTotal&quot;:&quot;0,3730&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;36.124.000&quot;,&quot;QuantidadePreferencial&quot;:&quot;32.267&quot;,&quot;QuantidadeTotal&quot;:&quot;36.156.267&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Tide Setubal Souza e Silva Nogueira&quot;,&quot;NormalizedAcionista&quot;:&quot;tide-setubal-souza-e-silva-nogueira&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,7400&quot;,&quot;PercentualPreferencial&quot;:&quot;0,1710&quot;,&quot;PercentualTotal&quot;:&quot;0,3660&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;24.663.958&quot;,&quot;QuantidadePreferencial&quot;:&quot;10.874.101&quot;,&quot;QuantidadeTotal&quot;:&quot;35.538.059&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Fernando Setubal Souza e Silva&quot;,&quot;NormalizedAcionista&quot;:&quot;fernando-setubal-souza-e-silva&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,7400&quot;,&quot;PercentualPreferencial&quot;:&quot;0,1600&quot;,&quot;PercentualTotal&quot;:&quot;0,3600&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;24.663.452&quot;,&quot;QuantidadePreferencial&quot;:&quot;10.215.065&quot;,&quot;QuantidadeTotal&quot;:&quot;34.878.517&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Guilherme Setubal Souza e Silva&quot;,&quot;NormalizedAcionista&quot;:&quot;guilherme-setubal-souza-e-silva&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,7400&quot;,&quot;PercentualPreferencial&quot;:&quot;0,1530&quot;,&quot;PercentualTotal&quot;:&quot;0,3550&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;24.663.576&quot;,&quot;QuantidadePreferencial&quot;:&quot;9.741.525&quot;,&quot;QuantidadeTotal&quot;:&quot;34.405.101&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Paulo Setubal Neto&quot;,&quot;NormalizedAcionista&quot;:&quot;paulo-setubal-neto&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,0010&quot;,&quot;PercentualPreferencial&quot;:&quot;0,4600&quot;,&quot;PercentualTotal&quot;:&quot;0,3020&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;36.423&quot;,&quot;QuantidadePreferencial&quot;:&quot;29.289.630&quot;,&quot;QuantidadeTotal&quot;:&quot;29.326.053&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Companhia ESA&quot;,&quot;NormalizedAcionista&quot;:&quot;companhia-esa&quot;,&quot;CpfCnpj&quot;:&quot;52.117.397/0001-08&quot;,&quot;PessoaFisica&quot;:false,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,6300&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0000&quot;,&quot;PercentualTotal&quot;:&quot;0,2160&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;20.988.112&quot;,&quot;QuantidadePreferencial&quot;:&quot;0&quot;,&quot;QuantidadeTotal&quot;:&quot;20.988.112&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Gabriel de Mattos Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;gabriel-de-mattos-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,1630&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0050&quot;,&quot;PercentualTotal&quot;:&quot;0,0600&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;5.448.828&quot;,&quot;QuantidadePreferencial&quot;:&quot;333.149&quot;,&quot;QuantidadeTotal&quot;:&quot;5.781.977&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Olavo Egydio Mutarelli Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;olavo-egydio-mutarelli-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,1630&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0050&quot;,&quot;PercentualTotal&quot;:&quot;0,0600&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;5.448.828&quot;,&quot;QuantidadePreferencial&quot;:&quot;333.149&quot;,&quot;QuantidadeTotal&quot;:&quot;5.781.977&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Beatriz de Mattos Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;beatriz-de-mattos-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,1630&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0050&quot;,&quot;PercentualTotal&quot;:&quot;0,0600&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;5.448.828&quot;,&quot;QuantidadePreferencial&quot;:&quot;333.149&quot;,&quot;QuantidadeTotal&quot;:&quot;5.781.977&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Rudric ITH Participações Ltda&quot;,&quot;NormalizedAcionista&quot;:&quot;rudric-ith-participações-ltda&quot;,&quot;CpfCnpj&quot;:&quot;67.569.061/0001-45&quot;,&quot;PessoaFisica&quot;:false,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,0830&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0350&quot;,&quot;PercentualTotal&quot;:&quot;0,0510&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;2.783.476&quot;,&quot;QuantidadePreferencial&quot;:&quot;2.197.334&quot;,&quot;QuantidadeTotal&quot;:&quot;4.980.810&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Rodrigo Ribeiro do Valle Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;rodrigo-ribeiro-do-valle-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,0010&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0050&quot;,&quot;PercentualTotal&quot;:&quot;0,0030&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;2.439&quot;,&quot;QuantidadePreferencial&quot;:&quot;316.522&quot;,&quot;QuantidadeTotal&quot;:&quot;318.961&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Patricia Ribeiro do Valle Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;patricia-ribeiro-do-valle-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,0010&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0050&quot;,&quot;PercentualTotal&quot;:&quot;0,0030&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;2.439&quot;,&quot;QuantidadePreferencial&quot;:&quot;336.069&quot;,&quot;QuantidadeTotal&quot;:&quot;338.508&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Marcelo Ribeiro do Valle Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;marcelo-ribeiro-do-valle-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,0010&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0050&quot;,&quot;PercentualTotal&quot;:&quot;0,0030&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;2.439&quot;,&quot;QuantidadePreferencial&quot;:&quot;336.069&quot;,&quot;QuantidadeTotal&quot;:&quot;338.508&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Marina Nugent Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;marina-nugent-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,0010&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0010&quot;,&quot;PercentualTotal&quot;:&quot;0,0010&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;2.403&quot;,&quot;QuantidadePreferencial&quot;:&quot;242&quot;,&quot;QuantidadeTotal&quot;:&quot;2.645&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Alfredo Egydio Nugent Setubal&quot;,&quot;NormalizedAcionista&quot;:&quot;alfredo-egydio-nugent-setubal&quot;,&quot;CpfCnpj&quot;:&quot;&quot;,&quot;PessoaFisica&quot;:true,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;16/11/2022&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,0010&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0010&quot;,&quot;PercentualTotal&quot;:&quot;0,0010&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;2.403&quot;,&quot;QuantidadePreferencial&quot;:&quot;242&quot;,&quot;QuantidadeTotal&quot;:&quot;2.645&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;O. E. Setubal S.A.&quot;,&quot;NormalizedAcionista&quot;:&quot;o.-e.-setubal-s.a.&quot;,&quot;CpfCnpj&quot;:&quot;61.074.456/0001-90&quot;,&quot;PessoaFisica&quot;:false,&quot;Nacionalidade&quot;:&quot;Brasileira&quot;,&quot;DataUltimaAlteracao&quot;:&quot;19/06/2019&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,0010&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0010&quot;,&quot;PercentualTotal&quot;:&quot;0,0010&quot;,&quot;AcionistaControlador&quot;:&quot;sim&quot;,&quot;AcordoAcionistas&quot;:&quot;sim&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;6&quot;,&quot;QuantidadePreferencial&quot;:&quot;8&quot;,&quot;QuantidadeTotal&quot;:&quot;14&quot;,&quot;Order&quot;:0},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Ações Tesouraria&quot;,&quot;NormalizedAcionista&quot;:&quot;ações-tesouraria&quot;,&quot;CpfCnpj&quot;:&quot;-&quot;,&quot;PessoaFisica&quot;:false,&quot;Nacionalidade&quot;:&quot;&quot;,&quot;DataUltimaAlteracao&quot;:&quot;-&quot;,&quot;PercentualOrdinarias&quot;:&quot;0,0000&quot;,&quot;PercentualPreferencial&quot;:&quot;0,0000&quot;,&quot;PercentualTotal&quot;:&quot;0,0000&quot;,&quot;AcionistaControlador&quot;:&quot;não&quot;,&quot;AcordoAcionistas&quot;:&quot;não&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;0&quot;,&quot;QuantidadePreferencial&quot;:&quot;0&quot;,&quot;QuantidadeTotal&quot;:&quot;0&quot;,&quot;Order&quot;:1},{&quot;Rank&quot;:0,&quot;Acionista&quot;:&quot;Outros&quot;,&quot;NormalizedAcionista&quot;:&quot;outros&quot;,&quot;CpfCnpj&quot;:&quot;-&quot;,&quot;PessoaFisica&quot;:false,&quot;Nacionalidade&quot;:&quot;&quot;,&quot;DataUltimaAlteracao&quot;:&quot;-&quot;,&quot;PercentualOrdinarias&quot;:&quot;9,5580&quot;,&quot;PercentualPreferencial&quot;:&quot;74,4930&quot;,&quot;PercentualTotal&quot;:&quot;52,1790&quot;,&quot;AcionistaControlador&quot;:&quot;não&quot;,&quot;AcordoAcionistas&quot;:&quot;não&quot;,&quot;QuantidadeOrdinarias&quot;:&quot;318.863.098&quot;,&quot;QuantidadePreferencial&quot;:&quot;4.743.516.067&quot;,&quot;QuantidadeTotal&quot;:&quot;5.062.379.165&quot;,&quot;Order&quot;:2}]">
                        <div class="d-md-flex justify-between align-items-center mb-2">
                            <div class="d-flex justify-start align-items-center">
                                <i class="material-icons mr-1 text-main">
                                    people_alt
                                </i>
                                <h3 class="card-title m-0">Posição acionária da ITAUSA</h3>
                            </div>
                            <div>
                                <div class="p-relative text-center mt-2 mt-md-0">
                                    <div class="need-login-cover" data-position="top"
                                        data-tooltip="&lt;span&gt;Veja o &lt;b class=&#39;fw-900&#39;&gt;histórico&lt;/b&gt; da posição acionária, a &lt;b class=&#39;fw-900&#39;&gt;variação&lt;/b&gt; da quantidade e percentual dos &lt;b class=&#39;fw-900&#39;&gt;principais acionistas&lt;/b&gt; da empresa! &lt;small class=&#39;d-block&#39;&gt;Disponível a partir do &lt;b&gt;plano TOURO&lt;/b&gt;&lt;/small&gt;&lt;/span&gt;">
                                    </div>
                                    <a title="Ir para a tela de posição acionária"
                                        href="https://statusinvest.com.br/cliente/posicao-acionaria/itsa4"
                                        class="link btn btn-secondary btn-xsmall pl-1 pr-1  ml-3">
                                        <div class="d-flex align-items-center">
                                            <span class="fs-2"><b>Histórico</b> + detalhe</span>&nbsp;
                                            <i class="material-icons">arrow_forward</i>
                                        </div>
                                    </a>
                                </div>
                            </div>
                        </div>
                        <div class="list">
                            <div class="list-content" tabindex="0" data-scroll-spy="891"
                                style="overflow: auto;min-height:506px">
                                <table style="min-width: 810px;">
                                    <thead class="uppercase">
                                        <tr class="fs-2 fw-900">
                                            <th title="">Acionista</th>
                                            <th title="">Controlador</th>
                                            <th title="">Acordo&nbsp;Acion.</th>
                                            <th title="">últ.&nbsp;Alteração</th>
                                            <th title="" class="text-right">Ordinárias</th>
                                            <th title="" class="text-right">Preferencial</th>
                                            <th title="" class="text-right">Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                    </tbody>
                                </table>
                                <span
                                    class="list-empty fs-4 fw-100 grey-text text-center text-darken-1 uppercase mt-4 mb-4"
                                    style="display:none">Não há histórico <span class="d-block d-md-inline-block">de
                                        proventos para</span>
                                    este ativo</span>
                            </div>
                            <div class="pagination-control d-flex justify-start align-items-center pl-3">
                                <div class="select-wrapper"><input class="select-dropdown dropdown-trigger" type="text"
                                        readonly="true"
                                        data-target="select-options-518397be-05db-231a-e6aa-4c21d1c0b7cd"
                                        aria-label="null">
                                    <ul id="select-options-518397be-05db-231a-e6aa-4c21d1c0b7cd"
                                        class="dropdown-content select-dropdown" tabindex="0">
                                        <li id="select-options-518397be-05db-231a-e6aa-4c21d1c0b7cd0" tabindex="0"
                                            class="selected">
                                            <span>10</span>
                                        </li>
                                        <li id="select-options-518397be-05db-231a-e6aa-4c21d1c0b7cd1" tabindex="0">
                                            <span>20</span>
                                        </li>
                                        <li id="select-options-518397be-05db-231a-e6aa-4c21d1c0b7cd2" tabindex="0">
                                            <span>TODOS</span>
                                        </li>
                                    </ul><svg class="caret" height="24" viewBox="0 0 24 24" width="24"
                                        xmlns="http://www.w3.org/2000/svg">
                                        <path d="M7 10l5 5 5-5z"></path>
                                        <path d="M0 0h24v24H0z" fill="none"></path>
                                    </svg><select id="total-page-2" class=" small" data-formselect="" tabindex="-1">
                                        <option value="10">10</option>
                                        <option value="20">20</option>
                                        <option value="-1">TODOS</option>
                                    </select>
                                </div>
                                <ul class="pagination" data-total-page="#total-page-2"></ul>
                            </div>
                        </div>
                    </div>
                    <div id="companyremuneracaoconselho" class="card chart-and-list rounded pt-3 pb-3 mt-5"
                        style="background-color: #f2f2f2;">
                        <input id="results" name="results" type="hidden"
                            value="[{&quot;Id&quot;:788,&quot;AssetMainId&quot;:345,&quot;Type&quot;:1,&quot;Rank&quot;:2022,&quot;DataInicial&quot;:&quot;2022-01-01T00:00:00&quot;,&quot;DataFinal&quot;:&quot;2022-12-31T00:00:00&quot;,&quot;TotalMembros&quot;:7.00,&quot;TotalMembrosRemunerados&quot;:7.00,&quot;TotalRemuneracao&quot;:38000000.00,&quot;SalarioProLabore&quot;:18000000.00,&quot;BeneficiosDiretoIndireto&quot;:1600000.00,&quot;ParticipacaoComites&quot;:0.00,&quot;OutrosValoresFixos&quot;:0.00,&quot;DescricaoRemuneracaoFixa&quot;:&quot;&quot;,&quot;Bonus&quot;:6500000.00,&quot;ParticipacoesResultados&quot;:11500000.00,&quot;ParticipacoesReunioes&quot;:0.00,&quot;Comissoes&quot;:0.00,&quot;OutrosValoresVariaveis&quot;:0.00,&quot;DescricaoRemuneracaoVariavel&quot;:&quot;&quot;,&quot;PosEmprego&quot;:400000.00,&quot;CessacaoCargo&quot;:0.00,&quot;AcoesOpcoes&quot;:0.00,&quot;Observacao&quot;:&quot;(*) Média anual calculada de acordo com o Ofício Circular/Anual-2022-CVM/SEP.&quot;,&quot;CreateDate&quot;:&quot;0001-01-01T00:00:00+00:00&quot;,&quot;UpdateDate&quot;:&quot;0001-01-01T00:00:00+00:00&quot;,&quot;IsEnabled&quot;:false,&quot;Type_F&quot;:&quot;Diretoria Estatutária&quot;,&quot;Data_F&quot;:&quot;01/01/22 até 31/12/22&quot;},{&quot;Id&quot;:787,&quot;AssetMainId&quot;:345,&quot;Type&quot;:0,&quot;Rank&quot;:2022,&quot;DataInicial&quot;:&quot;2022-01-01T00:00:00&quot;,&quot;DataFinal&quot;:&quot;2022-12-31T00:00:00&quot;,&quot;TotalMembros&quot;:9.00,&quot;TotalMembrosRemunerados&quot;:9.00,&quot;TotalRemuneracao&quot;:12000000.00,&quot;SalarioProLabore&quot;:9740000.00,&quot;BeneficiosDiretoIndireto&quot;:1200000.00,&quot;ParticipacaoComites&quot;:960000.00,&quot;OutrosValoresFixos&quot;:0.00,&quot;DescricaoRemuneracaoFixa&quot;:&quot;&quot;,&quot;Bonus&quot;:0.00,&quot;ParticipacoesResultados&quot;:0.00,&quot;ParticipacoesReunioes&quot;:0.00,&quot;Comissoes&quot;:0.00,&quot;OutrosValoresVariaveis&quot;:0.00,&quot;DescricaoRemuneracaoVariavel&quot;:&quot;&quot;,&quot;PosEmprego&quot;:100000.00,&quot;CessacaoCargo&quot;:0.00,&quot;AcoesOpcoes&quot;:0.00,&quot;Observacao&quot;:&quot;(*) Média anual calculada de acordo com o Ofício Circular/Anual-2022-CVM/SEP.&quot;,&quot;CreateDate&quot;:&quot;0001-01-01T00:00:00+00:00&quot;,&quot;UpdateDate&quot;:&quot;0001-01-01T00:00:00+00:00&quot;,&quot;IsEnabled&quot;:false,&quot;Type_F&quot;:&quot;Conselho Administração&quot;,&quot;Data_F&quot;:&quot;01/01/22 até 31/12/22&quot;},{&quot;Id&quot;:789,&quot;AssetMainId&quot;:345,&quot;Type&quot;:2,&quot;Rank&quot;:2022,&quot;DataInicial&quot;:&quot;2022-01-01T00:00:00&quot;,&quot;DataFinal&quot;:&quot;2022-12-31T00:00:00&quot;,&quot;TotalMembros&quot;:10.00,&quot;TotalMembrosRemunerados&quot;:10.00,&quot;TotalRemuneracao&quot;:1740000.00,&quot;SalarioProLabore&quot;:1740000.00,&quot;BeneficiosDiretoIndireto&quot;:0.00,&quot;ParticipacaoComites&quot;:0.00,&quot;OutrosValoresFixos&quot;:0.00,&quot;DescricaoRemuneracaoFixa&quot;:&quot;&quot;,&quot;Bonus&quot;:0.00,&quot;ParticipacoesResultados&quot;:0.00,&quot;ParticipacoesReunioes&quot;:0.00,&quot;Comissoes&quot;:0.00,&quot;OutrosValoresVariaveis&quot;:0.00,&quot;DescricaoRemuneracaoVariavel&quot;:&quot;&quot;,&quot;PosEmprego&quot;:0.00,&quot;CessacaoCargo&quot;:0.00,&quot;AcoesOpcoes&quot;:0.00,&quot;Observacao&quot;:&quot;(*) Média anual calculada de acordo com o Ofício Circular/Anual-2022-CVM/SEP.&quot;,&quot;CreateDate&quot;:&quot;0001-01-01T00:00:00+00:00&quot;,&quot;UpdateDate&quot;:&quot;0001-01-01T00:00:00+00:00&quot;,&quot;IsEnabled&quot;:false,&quot;Type_F&quot;:&quot;Conselho Fiscal&quot;,&quot;Data_F&quot;:&quot;01/01/22 até 31/12/22&quot;},{&quot;Id&quot;:-1,&quot;AssetMainId&quot;:345,&quot;Type&quot;:-1,&quot;Rank&quot;:2022,&quot;DataInicial&quot;:&quot;2022-01-01T00:00:00&quot;,&quot;DataFinal&quot;:&quot;2022-12-31T00:00:00&quot;,&quot;TotalMembros&quot;:26.00,&quot;TotalMembrosRemunerados&quot;:26.00,&quot;TotalRemuneracao&quot;:51740000.00,&quot;SalarioProLabore&quot;:29480000.00,&quot;BeneficiosDiretoIndireto&quot;:2800000.00,&quot;ParticipacaoComites&quot;:960000.00,&quot;OutrosValoresFixos&quot;:0.00,&quot;DescricaoRemuneracaoFixa&quot;:null,&quot;Bonus&quot;:6500000.00,&quot;ParticipacoesResultados&quot;:11500000.00,&quot;ParticipacoesReunioes&quot;:0.00,&quot;Comissoes&quot;:0.00,&quot;OutrosValoresVariaveis&quot;:0.00,&quot;DescricaoRemuneracaoVariavel&quot;:null,&quot;PosEmprego&quot;:500000.00,&quot;CessacaoCargo&quot;:0.00,&quot;AcoesOpcoes&quot;:0.00,&quot;Observacao&quot;:null,&quot;CreateDate&quot;:&quot;0001-01-01T00:00:00+00:00&quot;,&quot;UpdateDate&quot;:&quot;0001-01-01T00:00:00+00:00&quot;,&quot;IsEnabled&quot;:false,&quot;Type_F&quot;:&quot;Total&quot;,&quot;Data_F&quot;:&quot;01/01/22 até 31/12/22&quot;}]">
                        <div class="d-md-flex justify-between align-items-center mb-2">
                            <div class="d-flex justify-start align-items-center ">
                                <i class="material-icons mr-1 text-main">
                                    groups
                                </i>
                                <h3 class="card-title m-0">
                                    Remuneração
                                    <span class="d-block fs-2 lh-2">
                                        da ITAUSA
                                    </span>
                                </h3>
                            </div>
                            <div class="d-flex justify-center justify-lg-start align-items-center mt-2 mt-md-0">
                                <div class="">
                                    <div
                                        class="btn-toggle btn-companyremuneracaoconselho-view-type d-flex justify-center">
                                        <button type="button" data-value="0"
                                            class="pl-1 pr-1 btn-small btn-xsmall btn btn-main btn-flat active">
                                            <div class="d-flex align-items-center lh-3">
                                                TOTAL
                                            </div>
                                        </button>
                                        <button type="button" data-value="1"
                                            class="pl-1 pr-1 btn-small btn-xsmall btn btn-main btn-flat  ">
                                            <div class="d-xs-flex align-items-center lh-2 fs-2">
                                                Média
                                                p/ membro
                                            </div>
                                        </button>
                                    </div>
                                </div>
                                <div class="p-relative">
                                    <div class="need-login-cover" data-position="top"
                                        data-tooltip="&lt;span&gt;Veja tanto o &lt;b class=&#39;fw-900&#39;&gt;histórico&lt;/b&gt; de remuneração do conselho quanto o &lt;b class=&#39;fw-900&#39;&gt;detalhe&lt;/b&gt; dessas remunerações! &lt;small class=&#39;d-block&#39;&gt;Disponível a partir do &lt;b&gt;plano TOURO&lt;/b&gt;&lt;/small&gt;&lt;/span&gt;">
                                    </div>
                                    <a title="Ir para a tela de com o detalhe da remuneração"
                                        href="https://statusinvest.com.br/cliente/posicao-acionaria/itsa4"
                                        class="link btn btn-secondary btn-xsmall pl-1 pr-1  ml-2">
                                        <div class="d-flex align-items-center">
                                            <span class="fs-2 d-xs-flex fs-2 lh-2">
                                                <b class="d-block">Histórico</b>
                                                <span class="d-block">&nbsp;+ detalhe</span>
                                            </span>&nbsp;
                                            <i class="material-icons">arrow_forward</i>
                                        </div>
                                    </a>
                                </div>
                            </div>
                        </div>
                        <div class="list">
                            <div class="list-content" tabindex="0" data-scroll-spy="891"
                                style="overflow: auto;min-height:230px">
                                <table style="min-width: 1000px;">
                                    <thead class="uppercase">
                                        <tr class="fs-2 fw-900">
                                            <th title="">Tipo</th>
                                            <th title="" class="lh-3 text-right">Membros<br>Remunerados</th>
                                            <th title="" class="lh-3 text-right">Salário<br>/ProLabore</th>
                                            <th title="" class="lh-3 text-right">Benefícios <br>Direto/Indireto</th>
                                            <th title="" class="lh-3 text-right">Participação <br>de Comites</th>
                                            <th title="" class="lh-3 text-right">Bonus</th>
                                            <th title="" class="lh-3 text-right">Participações <br>de Resultados</th>
                                            <th title="" class="lh-3 text-right">
                                                <div class="d-flex justify-end align-items-center ">
                                                    <div>Outros</div>
                                                    <i data-position="top"
                                                        class="ml-1 v-align-middle material-icons help-icon tooltipped tooltipped-html fs-3 d-block"
                                                        data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100 text-center&quot;&gt;
São + de &lt;b class=&quot;fw-700&quot;&gt;10&lt;/b&gt; outras &lt;b class=&quot;fw-700&quot;&gt;formas de remuneração&lt;/b&gt;
&lt;small class=&quot;d-block&quot;&gt;Disponível a partir do &lt;b&gt;plano TOURO&lt;/b&gt;&lt;/small&gt;
&lt;/div&gt;
">
                                                        report

                                                    </i>
                                                </div>
                                            </th>
                                            <th title="" class="text-right">Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr style="undefined">
                                            <td>
                                                <div class="lh-3">Diretoria Estatutária</div>
                                                <div class="fw-700 fs-2 lh-3_5"> <span class="">01/01/22 até
                                                        31/12/22</span> </div>
                                            </td>
                                            <td class="text-right">7</td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">18.000.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">1.600.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">0</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">6.500.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">11.500.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">400.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right fw-700">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">38.000.000</div>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr style="undefined">
                                            <td>
                                                <div class="lh-3">Conselho Administração</div>
                                                <div class="fw-700 fs-2 lh-3_5"> <span class="">01/01/22 até
                                                        31/12/22</span> </div>
                                            </td>
                                            <td class="text-right">9</td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">9.740.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">1.200.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">960.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">0</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">0</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">100.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right fw-700">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">12.000.000</div>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr style="undefined">
                                            <td>
                                                <div class="lh-3">Conselho Fiscal</div>
                                                <div class="fw-700 fs-2 lh-3_5"> <span class="">01/01/22 até
                                                        31/12/22</span> </div>
                                            </td>
                                            <td class="text-right">10</td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">1.740.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">0</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">0</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">0</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">0</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">0</div>
                                                </div>
                                            </td>
                                            <td class="text-right fw-700">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">1.740.000</div>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr style="background-color: #e4e4e4;">
                                            <td>
                                                <div class="lh-3">Total</div>
                                                <div class="fw-700 fs-2 lh-3_5"> <span class="">01/01/22 até
                                                        31/12/22</span> </div>
                                            </td>
                                            <td class="text-right">26</td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">29.480.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">2.800.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">960.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">6.500.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">11.500.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">500.000</div>
                                                </div>
                                            </td>
                                            <td class="text-right fw-700">
                                                <div class="d-flex align-items-center justify-end lh-3_5 "> <small
                                                        class="fs-2 d-block fw-100">R$</small> &nbsp; <div
                                                        class="fs-3 d-block">51.740.000</div>
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <span
                                    class="list-empty fs-4 fw-100 grey-text text-center text-darken-1 uppercase mt-4 mb-4"
                                    style="display:none">Não há histórico <span class="d-block d-md-inline-block">de
                                        proventos para</span>
                                    este ativo</span>
                            </div>
                            <div class="pagination-control d-flex justify-start align-items-center pl-3">
                                <div class="select-wrapper"><input class="select-dropdown dropdown-trigger" type="text"
                                        readonly="true"
                                        data-target="select-options-7032fed6-f507-239e-b913-58fb725801a6"
                                        aria-label="null">
                                    <ul id="select-options-7032fed6-f507-239e-b913-58fb725801a6"
                                        class="dropdown-content select-dropdown" tabindex="0"></ul><svg class="caret"
                                        height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M7 10l5 5 5-5z"></path>
                                        <path d="M0 0h24v24H0z" fill="none"></path>
                                    </svg><select id="total-page-2" class=" small" data-formselect="" tabindex="-1">
                                    </select>
                                </div>
                                <ul class="pagination" data-total-page="#total-page-2">
                                    <li data-prev="1" class="disabled"><a role="button" tabindex="0"><i
                                                style="max-width: 28px;" class="material-icons">chevron_left</i></a>
                                    </li>
                                    <li data-page="1" class="waves-effect active "><a role="button" tabindex="0">1</a>
                                    </li>
                                    <li data-next="1" class="disabled"><a role="button" tabindex="0"><i
                                                style="max-width: 28px;" class="material-icons">chevron_right</i></a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="container advertising ads-lazy-group
                pl-sm-0 pr-sm-0
                pt-5
         ">
            <div class="a_x_d_x_s-banner
                    pt-1 pb-1 pl-0 pl-md-1 pr-0 pr-md-1
             " style="overflow: hidden;" data-id="banner-4">
                <a role="none" target="_blank" rel="noopener noreferrer nofollow"
                    href="https://lp.statusinvest.com.br/planos/modulo/forecast">
                    <div class="image">anúncio</div>
                </a>
            </div>
        </div>
        <div id="contabil-section" class="pb-7 pt-7">
            <div class="container ">
                <div class=" company accounting">
                    <h2 title="Demonstração do Resultado do Exercício   da  ITAUSA"
                        class="fs-4 fs-xs-5 mt-0 mb-5 fw-900 text-main">
                        DRE DA ITAUSA
                    </h2>
                    <div data-revenue-chart="" data-code="ITSA4"
                        class="card chart-and-list rounded pt-3 pb-3 mb-5 show-empty-callback">
                        <div class="d-sm-flex justify-between align-items-center mb-3">
                            <h3 title="Faturamento deduzido de impostos indiretos (PIS/Cofins, ISS, ICMS etc)"
                                class="card-title m-0">
                                Receita Líquida (mil)
                            </h3>
                            <div>
                                <div class="d-flex justify-center justify-sm-end align-items-center mt-2 mt-sm-0">
                                    <div class="si-dropdown dropdown-mode-grid w-md-auto mr-3">

                                        <a class="btn btn-secondary btn-xsmall dropdown-trigger d-flex justify-between"
                                            href="https://statusinvest.com.br/acoes/itsa4#!"
                                            data-target="dropdown-revenue-view-type">
                                            <span>ANUAL</span>
                                            <i style="max-width:18px"
                                                class="material-icons right ml-1">arrow_drop_down</i>
                                        </a>
                                        <ul id="dropdown-revenue-view-type" class="dropdown-content"
                                            style="min-width:150px" tabindex="0">
                                            <li tabindex="0"><a role="button" data-type="0">ANUAL</a></li>
                                            <li tabindex="0"><a role="button" data-type="1">TRIMESTRAL</a></li>
                                            <li class="optgroup" tabindex="0"><label
                                                    class="d-block pt-1 fs-2 grey-text pl-1">VISÃO POR
                                                    TRIMESTRE</label></li>
                                            <li tabindex="0"><a role="button" data-type="3">1º trimestre</a></li>
                                            <li tabindex="0"><a role="button" data-type="4">2º trimestre</a></li>
                                            <li tabindex="0"><a role="button" data-type="5">3º trimestre</a></li>
                                            <li tabindex="0"><a role="button" data-type="6">4º trimestre</a></li>
                                        </ul>
                                    </div>
                                    <div>
                                        <ul class="tabs transparent d-none d-md-block">
                                            <li title="Receita Líquida dos últimos 5 anos" class="tab col s3">
                                                <a role="button" class="active"
                                                    href="https://statusinvest.com.br/acoes/itsa4#revenue-0"
                                                    data-type="0">5 anos</a>
                                            </li>
                                            <li title="Receita Líquida dos últimos 10 anos" class="tab col s3">
                                                <a role="button"
                                                    href="https://statusinvest.com.br/acoes/itsa4#revenue-1"
                                                    data-type="1">10
                                                    anos</a>
                                            </li>
                                            <li title="Receita Líquida desde a abertura de capital na bolsa de valores"
                                                class="tab col s3">
                                                <a role="button"
                                                    href="https://statusinvest.com.br/acoes/itsa4#revenue-2"
                                                    data-type="2">Max.</a>
                                            </li>
                                            <li class="indicator" style="left: 0px; right: 153px;"></li>
                                        </ul>
                                        <div class="d-block d-md-none">

                                            <a class="bg-main-green-dark btn btn-xsmall dropdown-trigger"
                                                href="https://statusinvest.com.br/acoes/itsa4#!"
                                                data-target="dropdown-revenue">
                                                <span>5 anos</span>
                                                <i style="max-width:18px"
                                                    class="material-icons right ml-1">arrow_drop_down</i>
                                            </a>
                                            <ul id="dropdown-revenue" class="dropdown-content" tabindex="0">
                                                <li title="Receita Líquida dos últimos 5 anos" tabindex="0">
                                                    <a role="button" data-type="0">5 anos</a>
                                                </li>
                                                <li title="Receita Líquida dos últimos 10 anos" tabindex="0">
                                                    <a role="button" data-type="1">10 anos</a>
                                                </li>
                                                <li title="Receita Líquida desde a abertura de capital na bolsa de valores"
                                                    tabindex="0">
                                                    <a role="button" data-type="2">máx.</a>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="revenue-0" tabindex="0" role="region"
                            aria-label="Gráfico com a Demonstração do Resultado do Exercício  da  ITAUSA dos últimos 5 anos"
                            class="chart-container active">
                            <div class="main-charts"></div>
                        </div>
                        <div id="revenue-1" tabindex="0" role="region"
                            aria-label="Gráfico com a Demonstração do Resultado do Exercício  da  ITAUSA dos últimos 10 anos"
                            class="chart-container" style="display:none">
                            <div class="main-charts"></div>
                        </div>
                        <div id="revenue-2" tabindex="0" role="region"
                            aria-label="Gráfico com a demonstração do Resultado do Exercício  da  ITAUSA (máximo disponível)"
                            class="chart-container" style="display:none">
                            <div class="main-charts"></div>
                        </div>
                        <span class="graph-empty fs-4 fw-100 grey-text text-center text-darken-1 uppercase"
                            style="display:none">Não
                            há dados neste período</span>
                    </div>
                    <div data-dre-grid="" data-loadstalker="true" data-asset-id="427" data-category="1"
                        data-code="ITSA4" data-length="23" class="DRE table-info card card-panel white mb-5">
                        <header role="heading" aria-level="2"
                            class="d-flex justify-end align-items-center flex-wrap flex-lg-nowrap">
                            <div class="card-title w-100 d-flex align-items-center mb-2 mb-lg-0">
                                <i class="material-icons v-align-middle d-inline-block   mb-sm-0">attach_money</i>
                                <h3 title="Demonstração do resultado do exercício (DRE). Demonstração contábil que cruza receitas, custos e resultados"
                                    class="m-0 d-inline-block v-align-middle  mb-sm-0">
                                    Resultado
                                </h3>
                                <i data-position="top"
                                    class="material-icons help-icon tooltipped tooltipped-html mr-sm-2" data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;YEAR TO DATE:&lt;/span&gt; Com base no trimestre mais recente que há informação, somamos os valores até o 1T deste mesmo ano, depois, comparamos com os anos anteriores utilizando sempre o mesmo período
&lt;br&gt;
&lt;br&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;ÚLT. 12M:&lt;/span&gt; Com base no trimestre mais recente que há informação, calculamos 12 meses para trás, assim temos os valores da empresa referente ao ultimo ano antes deste ano contábil terminar
&lt;br&gt;
&lt;br&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;Análise horizontal (AH):&lt;/span&gt; Compara um ano/trimestre com a informação do período anterior.
&lt;br&gt;
&lt;br&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;Análise vertical (AV):&lt;/span&gt; Cada célula representa o % do valor sobre a &#39;Receita Líquida&#39;.
&lt;/div&gt;
">
                                    help_outline

                                </i>
                            </div>
                            <div class="d-flex justify-between flex-wrap flex-md-nowrap align-items-center">
                                <div class="cover-estimates card w-100 w-xs-45 mb-1 mb-md-0 mr-xs-2 mr-sm-3 switch "
                                    style="background-color: #565656;padding: 0.3rem 0.5rem;">
                                    <label role="switch" aria-checked="false"
                                        class="fw-100 fs-3 grey-text text-darken-1 d-flex justify-start align-items-center">
                                        <input type="checkbox" name="set-future-data">
                                        <span class="v-align-middle lever m-0"></span>
                                        <span class="v-align-middle d-block fs-3 lh-3 ml-2 white-text">
                                            ESTIMATIVAS
                                        </span>
                                        &nbsp;
                                        <span class="d-block fs-3_5 lh-3_5">
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html lh-3 fs-3 white-text"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
&lt;div class=&quot;white-text&quot;&gt;
&lt;div class=&quot;d-flex justify-start align-items-center fs-4&quot;&gt;
&lt;div class=&quot;ml-1 uppercase fs-3 lh-3&quot;&gt;
Estimativas do DRE
&lt;span class=&quot;d-block fs-2 lh-3&quot;&gt;
&lt;span class=&quot;fw-100&quot;&gt;MÓDULO&lt;/span&gt; &lt;strong class=&quot;fw-900&quot;&gt;FORECAST&lt;/strong&gt;
&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-flex align-items-center justify-end white-text mt-1&quot;&gt;
&lt;div class=&quot;fs-2 lh-2 fw-600&quot;&gt;POR&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;lh-2&quot;&gt;
&lt;img width=&quot;54&quot; height=&quot;12&quot; alt=&quot;Logo da FACTSET&quot; src=&quot;/img/partners/integration/factset-w.png&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </span>
                                    </label>
                                    <div class="need-login-cover" data-position="top"
                                        data-tooltip="&lt;span&gt;Faça o login para ver a estimativa dos próximos anos&lt;/span&gt;">
                                    </div>
                                </div>
                                <div class="si-dropdown dropdown-mode-grid w-50 mb-xs-1 mb-md-0 w-md-auto">

                                    <a class="btn btn-secondary btn-xsmall dropdown-trigger d-flex justify-between"
                                        href="https://statusinvest.com.br/acoes/itsa4#!"
                                        data-target="dropdown-dre-grid">
                                        <span>ANUAL</span>
                                        <i style="max-width:18px" class="material-icons right ml-1">arrow_drop_down</i>
                                    </a>
                                    <ul id="dropdown-dre-grid" class="dropdown-content" tabindex="0">
                                        <li tabindex="0"><a role="button" data-type="0">ANUAL</a></li>
                                        <li tabindex="0"><a role="button" data-type="1">TRIMESTRAL</a></li>
                                        <li tabindex="0"><a role="button" data-type="2">YEAR TO DATE</a></li>
                                        <li class="optgroup" tabindex="0"><label
                                                class="d-block pt-1 fs-2 grey-text pl-1">VISÃO POR
                                                TRIMESTRE</label></li>
                                        <li tabindex="0"><a role="button" data-type="3">1º trimestre</a></li>
                                        <li tabindex="0"><a role="button" data-type="4">2º trimestre</a></li>
                                        <li tabindex="0"><a role="button" data-type="5">3º trimestre</a></li>
                                        <li tabindex="0"><a role="button" data-type="6">4º trimestre</a></li>
                                    </ul>
                                </div>
                                <div class="bg-main-green-dark input-field si-dropdown si-col-view multiple tooltipped ml-0 ml-md-2 btn btn-small pl-1
                             w-45 w-xs-45  w-md-auto" data-position="top"
                                    data-tooltip="Apresentar/esconder colunas do grid">
                                    <div class="select-wrapper"><input class="select-dropdown dropdown-trigger"
                                            type="text" readonly="true"
                                            data-target="select-options-ee927f63-f06d-bc22-e06f-6bb6420f0a24"
                                            aria-label="null">
                                        <ul id="select-options-ee927f63-f06d-bc22-e06f-6bb6420f0a24"
                                            class="dropdown-content select-dropdown multiple-select-dropdown"
                                            tabindex="0">
                                            <li id="select-options-ee927f63-f06d-bc22-e06f-6bb6420f0a240" tabindex="0"
                                                class="selected">
                                                <span><label><input
                                                            type="checkbox" "=""><span>ÚLT. 12M</span></label></span></li><li id="
                                                            select-options-ee927f63-f06d-bc22-e06f-6bb6420f0a241"
                                                            tabindex="0" class="selected"><span><label><input
                                                                    type="checkbox" "=""><span>DATA</span></label></span></li><li id="
                                                                    select-options-ee927f63-f06d-bc22-e06f-6bb6420f0a242"
                                                                    tabindex="0" class="selected"><span><label><input
                                                                            type="checkbox" "=""><span>AH</span></label></span></li><li id="
                                                                            select-options-ee927f63-f06d-bc22-e06f-6bb6420f0a243"
                                                                            tabindex="0"><span><label><input
                                                                                    type="checkbox" "=""><span>AV</span></label></span></li></ul><svg class="
                                                                                    caret" height="24"
                                                                                    viewBox="0 0 24 24" width="24"
                                                                                    xmlns="http://www.w3.org/2000/svg">
                                                                                <path d="M7 10l5 5 5-5z"></path>
                                                                                <path d="M0 0h24v24H0z" fill="none">
                                                                                </path></svg><select id="grid-col-view"
                                                                                    multiple="" data-formselect=""
                                                                                    data-itens="DATA|AH|AV" class=""
                                                                                    tabindex="-1">
                                                                                    <option value="lastTwelveMonths"
                                                                                        selected="">ÚLT. 12M</option>
                                                                                    <option title="Data de referência"
                                                                                        value="DATA" selected="">DATA
                                                                                    </option>
                                                                                    <option title="Análise horizontal"
                                                                                        value="AH" selected="">AH
                                                                                    </option>
                                                                                    <option title="Análise vertical"
                                                                                        value="AV">AV</option>
                                                                                </select>
                                    </div>
                                </div>
                                <div class="si-dropdown single d-flex align-items-center si-group-date border-1 border-grey ml-md-3 mt-3 mt-xs-0
                             w-100 w-xs-50 w-md-auto">
                                    <div class="select-wrapper"><input class="select-dropdown dropdown-trigger"
                                            type="text" readonly="true"
                                            data-target="select-options-62aaa574-8050-465b-aab5-71be42174b27"
                                            aria-label="null">
                                        <ul id="select-options-62aaa574-8050-465b-aab5-71be42174b27"
                                            class="dropdown-content select-dropdown" tabindex="0">
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b270" tabindex="0">
                                                <span>2021</span>
                                            </li>
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b271" tabindex="0">
                                                <span>2020</span>
                                            </li>
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b272" tabindex="0">
                                                <span>2019</span>
                                            </li>
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b273" tabindex="0">
                                                <span>2018</span>
                                            </li>
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b274" tabindex="0"
                                                class="selected">
                                                <span>2017</span>
                                            </li>
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b275" tabindex="0">
                                                <span>2016</span>
                                            </li>
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b276" tabindex="0">
                                                <span>2015</span>
                                            </li>
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b277" tabindex="0">
                                                <span>2014</span>
                                            </li>
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b278" tabindex="0">
                                                <span>2013</span>
                                            </li>
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b279" tabindex="0">
                                                <span>2012</span>
                                            </li>
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b2710" tabindex="0">
                                                <span>2011</span>
                                            </li>
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b2711" tabindex="0">
                                                <span>2010</span>
                                            </li>
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b2712" tabindex="0">
                                                <span>2009</span>
                                            </li>
                                            <li id="select-options-62aaa574-8050-465b-aab5-71be42174b2713" tabindex="0">
                                                <span>2008</span>
                                            </li>
                                        </ul><svg class="caret" height="24" viewBox="0 0 24 24" width="24"
                                            xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10l5 5 5-5z"></path>
                                            <path d="M0 0h24v24H0z" fill="none"></path>
                                        </svg><select id="grid-year-min" data-formselect="" title="De" class=""
                                            tabindex="-1">
                                            <option title="2021" value="2021">2021</option>
                                            <option title="2020" value="2020">2020</option>
                                            <option title="2019" value="2019">2019</option>
                                            <option title="2018" value="2018">2018</option>
                                            <option title="2017" selected="" value="2017">2017</option>
                                            <option title="2016" value="2016">2016</option>
                                            <option title="2015" value="2015">2015</option>
                                            <option title="2014" value="2014">2014</option>
                                            <option title="2013" value="2013">2013</option>
                                            <option title="2012" value="2012">2012</option>
                                            <option title="2011" value="2011">2011</option>
                                            <option title="2010" value="2010">2010</option>
                                            <option title="2009" value="2009">2009</option>
                                            <option title="2008" value="2008">2008</option>
                                        </select>
                                    </div>
                                    <strong>até</strong>
                                    <div class="select-wrapper"><input class="select-dropdown dropdown-trigger"
                                            type="text" readonly="true"
                                            data-target="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c"
                                            aria-label="null">
                                        <ul id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c"
                                            class="dropdown-content select-dropdown" tabindex="0">
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c0" tabindex="0"
                                                class="selected">
                                                <span>2021</span>
                                            </li>
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c1" tabindex="0">
                                                <span>2020</span>
                                            </li>
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c2" tabindex="0">
                                                <span>2019</span>
                                            </li>
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c3" tabindex="0">
                                                <span>2018</span>
                                            </li>
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c4" tabindex="0">
                                                <span>2017</span>
                                            </li>
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c5" tabindex="0">
                                                <span>2016</span>
                                            </li>
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c6" tabindex="0">
                                                <span>2015</span>
                                            </li>
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c7" tabindex="0">
                                                <span>2014</span>
                                            </li>
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c8" tabindex="0">
                                                <span>2013</span>
                                            </li>
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c9" tabindex="0">
                                                <span>2012</span>
                                            </li>
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c10" tabindex="0">
                                                <span>2011</span>
                                            </li>
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c11" tabindex="0">
                                                <span>2010</span>
                                            </li>
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c12" tabindex="0">
                                                <span>2009</span>
                                            </li>
                                            <li id="select-options-6e3952e1-3ec5-99ba-ffcf-80869cd0876c13" tabindex="0">
                                                <span>2008</span>
                                            </li>
                                        </ul><svg class="caret" height="24" viewBox="0 0 24 24" width="24"
                                            xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10l5 5 5-5z"></path>
                                            <path d="M0 0h24v24H0z" fill="none"></path>
                                        </svg><select id="grid-year-max" data-formselect="" title="Até" class=""
                                            tabindex="-1">
                                            <option title="2021" selected="" value="2021">2021</option>
                                            <option title="2020" value="2020">2020</option>
                                            <option title="2019" value="2019">2019</option>
                                            <option title="2018" value="2018">2018</option>
                                            <option title="2017" value="2017">2017</option>
                                            <option title="2016" value="2016">2016</option>
                                            <option title="2015" value="2015">2015</option>
                                            <option title="2014" value="2014">2014</option>
                                            <option title="2013" value="2013">2013</option>
                                            <option title="2012" value="2012">2012</option>
                                            <option title="2011" value="2011">2011</option>
                                            <option title="2010" value="2010">2010</option>
                                            <option title="2009" value="2009">2009</option>
                                            <option title="2008" value="2008">2008</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </header>
                        <div class="scroll" data-scroll-spy="1560" tabindex="0"
                            aria-label="Grid com a demonstração do resultado do exercício (DRE)">
                            <input type="hidden" name="showchart" value="true">
                            <div class="table-info-body small" style="overflow: hidden;height: 380px;min-width:1460px">
                                <table>
                                    <thead class="uppercase">
                                        <tr>
                                            <th class="level-0   " title="">
                                                #
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                Últ. 12M <small class="sub-title">4T2021 - 3T2022</small>
                                            </th>
                                            <th class="level-0 text-right   AH " title="Análise horizontal">
                                                AH
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right d-none  AV " title="Análise vertical">
                                                AV
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2021
                                            </th>
                                            <th class="level-0 text-right   AH " title="Análise horizontal">
                                                AH
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right d-none  AV " title="Análise vertical">
                                                AV
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2020
                                            </th>
                                            <th class="level-0 text-right   AH " title="Análise horizontal">
                                                AH
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right d-none  AV " title="Análise vertical">
                                                AV
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2019
                                            </th>
                                            <th class="level-0 text-right   AH " title="Análise horizontal">
                                                AH
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right d-none  AV " title="Análise vertical">
                                                AV
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2018
                                            </th>
                                            <th class="level-0 text-right   AH " title="Análise horizontal">
                                                AH
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right d-none  AV " title="Análise vertical">
                                                AV
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2017
                                            </th>
                                            <th class="level-0 text-right d-none  AV " title="Análise vertical">
                                                AV
                                                <small class="fw-600">%</small>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/r/receita-liquida"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Receita Líquida - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Custos - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/l/lucro-bruto"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Lucro Bruto - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Despesas/Receitas Operacionais - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/e/ebitda"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">EBITDA - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/a/amortizacao"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Amortização/Depreciação</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/e/ebit"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">EBIT - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/r/resultado-nao-operacional"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Resultado não operacional - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/r/resultado-financeiro"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Resultado Financeiro - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Impostos - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/l/lucro-liquido"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Lucro Líquido - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Lucro atribuído a Controladora</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Lucro atribuído a Não Controladores</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/c/capex"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">CAPEX - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/d/divida-bruta"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Dívida Bruta - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/d/divida-liquida"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Dívida Líquida - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/r/roe"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">ROE - (%)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/r/roic"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">ROIC - (%)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/m/margem-bruta"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Margem Bruta - (%)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Margem Ebitda - (%)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/m/margem-liquida"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Margem Líquida - (%)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/d/divida-liquida-ebitda"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Dívida Líquida/Ebitda</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <span class="grid-empty fs-4 fw-100 grey-text text-center text-darken-1 uppercase mb-6"
                                    style="display:none">NÃO HÁ INFORMAÇÕES</span>
                            </div>
                            <div class="scroll-message"><span></span></div>
                        </div>
                        <div class="w-100 mt-3
                        d-xs-flex align-items-center justify-center ">
                            <div class="action text-center
                w-100 w-xs-45 w-sm-auto
                mr-xs-3
">
                                <button title="Ver tudo" type="button" class="
                                    btn btn-show btn-secondary waves-effect
                                    mb-2 mb-sm-0
                                    w-100
                                    ">
                                    ver mais
                                </button>
                            </div>
                            <div class="p-relative text-center div-btn-admresultados mr-sm-3 mb-2 mb-sm-0"
                                data-feature="analise-resultado" data-href="/cliente/analise-de-resultados">
                                <div class="need-login-cover" data-position="top"
                                    data-tooltip="&lt;span&gt;Faça o login para analisar o resultado (recente e histórico) de todas as empresas&lt;/span&gt;">
                                </div>
                                <a title="tela para analise o resultado das empresas da bolsa"
                                    href="https://statusinvest.com.br/cliente/analise-de-resultados"
                                    class="btn btn-secondary btn-outline btn-flat waves-effect btn-block w-100">
                                    <span class="d-flex justify-start align-items-center">
                                        <span>
                                            <i class="material-icons v-align-middle ">query_stats</i>
                                        </span>
                                        <span class="ml-1  lh-3"><b>Analise o resultado </b> das empresas</span>
                                    </span>
                                </a>
                            </div>
                        </div>
                    </div>
                    <div data-fluxocaixa-grid="" data-loadstalker="true" data-asset-id="427" data-category="1"
                        data-code="ITSA4" data-colsize="40" data-length="14"
                        class="DRE table-info card card-panel white mb-5">
                        <header role="heading" aria-level="2"
                            class="d-flex justify-between align-items-center flex-wrap flex-lg-nowrap">
                            <div class="card-title w-100 w-md-auto w-lg-100 d-flex align-items-center mb-2 mb-lg-0">
                                <i class="material-icons v-align-middle d-inline-block ">compare_arrows</i>
                                <h3 title="Gestão financeira que projeta para períodos futuros todas as entradas e as saídas de recursos financeiros da empresa, indicando como será o saldo de caixa para o período projetado"
                                    class="m-0 d-inline-block v-align-middle">
                                    Fluxo de caixa
                                </h3>
                            </div>
                            <div
                                class="d-flex justify-between flex-wrap flex-md-nowrap align-items-center w-100 w-md-auto">
                                <div class="cover-estimates card w-100 w-xs-45 mb-1 mb-md-0 mr-xs-2 mr-sm-3 switch "
                                    style="background-color: #565656;padding: 0.3rem 0.5rem;">
                                    <label role="switch" aria-checked="false"
                                        class="fw-100 fs-3 grey-text text-darken-1 d-flex justify-start align-items-center">
                                        <input type="checkbox" name="set-future-data">
                                        <span class="v-align-middle lever m-0"></span>
                                        <span class="v-align-middle d-block fs-3 lh-3 ml-2 white-text">
                                            ESTIMATIVAS
                                        </span>
                                        &nbsp;
                                        <span class="d-block fs-3_5 lh-3_5">
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html lh-3 fs-3 white-text"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
&lt;div class=&quot;white-text&quot;&gt;
&lt;div class=&quot;d-flex justify-start align-items-center fs-4&quot;&gt;
&lt;div class=&quot;ml-1 uppercase fs-3 lh-3&quot;&gt;
Estimativa do fluxo de caixa
&lt;span class=&quot;d-block fs-2 lh-3&quot;&gt;
&lt;span class=&quot;fw-100&quot;&gt;MÓDULO&lt;/span&gt; &lt;strong class=&quot;fw-900&quot;&gt;FORECAST&lt;/strong&gt;
&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-flex align-items-center justify-end white-text mt-1&quot;&gt;
&lt;div class=&quot;fs-2 lh-2 fw-600&quot;&gt;POR&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;lh-2&quot;&gt;
&lt;img width=&quot;54&quot; height=&quot;12&quot; alt=&quot;Logo da FACTSET&quot; src=&quot;/img/partners/integration/factset-w.png&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </span>
                                    </label>
                                    <div class="need-login-cover" data-position="top"
                                        data-tooltip="&lt;span&gt;Faça o login para ver a estimativa dos próximos anos&lt;/span&gt;">
                                    </div>
                                </div>
                                <div class="si-dropdown dropdown-mode-grid w-50 mb-xs-1 mb-md-0 w-md-auto">

                                    <a class="btn btn-secondary btn-xsmall dropdown-trigger wi-140 d-flex justify-between"
                                        href="https://statusinvest.com.br/acoes/itsa4#!"
                                        data-target="dropdown-fluxocaixa-grid">
                                        <span class="fs-2">ANUAL</span>
                                        <i style="max-width:18px" class="material-icons right ml-1">arrow_drop_down</i>
                                    </a>
                                    <ul id="dropdown-fluxocaixa-grid" class="dropdown-content" tabindex="0">
                                        <li tabindex="0"><a role="button" data-type="0">ANUAL</a></li>
                                        <li class="optgroup" tabindex="0"><label
                                                class="d-block pt-1 fs-2 grey-text pl-1">VISÃO POR
                                                TRIMESTRE</label></li>
                                        <li tabindex="0"><a role="button" data-type="3">1º trimestre</a></li>
                                        <li tabindex="0"><a role="button" data-type="4">1º - 2º trimestre</a></li>
                                        <li tabindex="0"><a role="button" data-type="5">1º - 3º trimestre</a></li>
                                    </ul>
                                </div>
                                <div class="bg-main-green-dark input-field si-dropdown si-col-view multiple tooltipped ml-0 ml-md-2 btn btn-small pl-1
                             w-45 w-xs-45  w-md-auto" data-position="top"
                                    data-tooltip="Apresentar/esconder colunas do grid">
                                    <div class="select-wrapper"><input class="select-dropdown dropdown-trigger"
                                            type="text" readonly="true"
                                            data-target="select-options-7eae6525-43b2-6158-662b-9c5d60f61c82"
                                            aria-label="null">
                                        <ul id="select-options-7eae6525-43b2-6158-662b-9c5d60f61c82"
                                            class="dropdown-content select-dropdown multiple-select-dropdown"
                                            tabindex="0">
                                            <li id="select-options-7eae6525-43b2-6158-662b-9c5d60f61c820" tabindex="0"
                                                class="selected">
                                                <span><label><input
                                                            type="checkbox" "=""><span>DATA</span></label></span></li><li id="
                                                            select-options-7eae6525-43b2-6158-662b-9c5d60f61c821"
                                                            tabindex="0" class="selected"><span><label><input
                                                                    type="checkbox" "=""><span>AH</span></label></span></li></ul><svg class="
                                                                    caret" height="24" viewBox="0 0 24 24" width="24"
                                                                    xmlns="http://www.w3.org/2000/svg">
                                                                <path d="M7 10l5 5 5-5z"></path>
                                                                <path d="M0 0h24v24H0z" fill="none"></path></svg><select
                                                                    id="grid-col-view" multiple="" data-formselect=""
                                                                    data-itens="DATA|AH" class="" tabindex="-1">
                                                                    <option title="Data de referência" value="DATA"
                                                                        selected="">DATA</option>
                                                                    <option title="Análise horizontal" value="AH"
                                                                        selected="">AH</option>
                                                                </select>
                                    </div>
                                </div>
                                <div class="si-dropdown single d-flex align-items-center si-group-date border-1 border-grey ml-md-3 mt-3 mt-xs-0
                             w-100 w-xs-50 w-md-auto">
                                    <div class="select-wrapper"><input class="select-dropdown dropdown-trigger"
                                            type="text" readonly="true"
                                            data-target="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a"
                                            aria-label="null">
                                        <ul id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a"
                                            class="dropdown-content select-dropdown" tabindex="0">
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a0" tabindex="0">
                                                <span>2021</span>
                                            </li>
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a1" tabindex="0">
                                                <span>2020</span>
                                            </li>
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a2" tabindex="0">
                                                <span>2019</span>
                                            </li>
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a3" tabindex="0">
                                                <span>2018</span>
                                            </li>
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a4" tabindex="0"
                                                class="selected">
                                                <span>2017</span>
                                            </li>
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a5" tabindex="0">
                                                <span>2016</span>
                                            </li>
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a6" tabindex="0">
                                                <span>2015</span>
                                            </li>
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a7" tabindex="0">
                                                <span>2014</span>
                                            </li>
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a8" tabindex="0">
                                                <span>2013</span>
                                            </li>
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a9" tabindex="0">
                                                <span>2012</span>
                                            </li>
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a10" tabindex="0">
                                                <span>2011</span>
                                            </li>
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a11" tabindex="0">
                                                <span>2010</span>
                                            </li>
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a12" tabindex="0">
                                                <span>2009</span>
                                            </li>
                                            <li id="select-options-c48535fa-e3e4-c7db-eae9-85b5f841e65a13" tabindex="0">
                                                <span>2008</span>
                                            </li>
                                        </ul><svg class="caret" height="24" viewBox="0 0 24 24" width="24"
                                            xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10l5 5 5-5z"></path>
                                            <path d="M0 0h24v24H0z" fill="none"></path>
                                        </svg><select id="grid-year-min" data-formselect="" title="De" class=""
                                            tabindex="-1">
                                            <option title="2021" value="2021">2021</option>
                                            <option title="2020" value="2020">2020</option>
                                            <option title="2019" value="2019">2019</option>
                                            <option title="2018" value="2018">2018</option>
                                            <option title="2017" selected="" value="2017">2017</option>
                                            <option title="2016" value="2016">2016</option>
                                            <option title="2015" value="2015">2015</option>
                                            <option title="2014" value="2014">2014</option>
                                            <option title="2013" value="2013">2013</option>
                                            <option title="2012" value="2012">2012</option>
                                            <option title="2011" value="2011">2011</option>
                                            <option title="2010" value="2010">2010</option>
                                            <option title="2009" value="2009">2009</option>
                                            <option title="2008" value="2008">2008</option>
                                        </select>
                                    </div>
                                    <strong>até</strong>
                                    <div class="select-wrapper"><input class="select-dropdown dropdown-trigger"
                                            type="text" readonly="true"
                                            data-target="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e"
                                            aria-label="null">
                                        <ul id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e"
                                            class="dropdown-content select-dropdown" tabindex="0">
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e0" tabindex="0"
                                                class="selected">
                                                <span>2021</span>
                                            </li>
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e1" tabindex="0">
                                                <span>2020</span>
                                            </li>
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e2" tabindex="0">
                                                <span>2019</span>
                                            </li>
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e3" tabindex="0">
                                                <span>2018</span>
                                            </li>
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e4" tabindex="0">
                                                <span>2017</span>
                                            </li>
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e5" tabindex="0">
                                                <span>2016</span>
                                            </li>
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e6" tabindex="0">
                                                <span>2015</span>
                                            </li>
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e7" tabindex="0">
                                                <span>2014</span>
                                            </li>
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e8" tabindex="0">
                                                <span>2013</span>
                                            </li>
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e9" tabindex="0">
                                                <span>2012</span>
                                            </li>
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e10" tabindex="0">
                                                <span>2011</span>
                                            </li>
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e11" tabindex="0">
                                                <span>2010</span>
                                            </li>
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e12" tabindex="0">
                                                <span>2009</span>
                                            </li>
                                            <li id="select-options-ee74a1c8-a7b3-dcb0-34d3-223cfff4776e13" tabindex="0">
                                                <span>2008</span>
                                            </li>
                                        </ul><svg class="caret" height="24" viewBox="0 0 24 24" width="24"
                                            xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10l5 5 5-5z"></path>
                                            <path d="M0 0h24v24H0z" fill="none"></path>
                                        </svg><select id="grid-year-max" data-formselect="" title="Até" class=""
                                            tabindex="-1">
                                            <option title="2021" selected="" value="2021">2021</option>
                                            <option title="2020" value="2020">2020</option>
                                            <option title="2019" value="2019">2019</option>
                                            <option title="2018" value="2018">2018</option>
                                            <option title="2017" value="2017">2017</option>
                                            <option title="2016" value="2016">2016</option>
                                            <option title="2015" value="2015">2015</option>
                                            <option title="2014" value="2014">2014</option>
                                            <option title="2013" value="2013">2013</option>
                                            <option title="2012" value="2012">2012</option>
                                            <option title="2011" value="2011">2011</option>
                                            <option title="2010" value="2010">2010</option>
                                            <option title="2009" value="2009">2009</option>
                                            <option title="2008" value="2008">2008</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </header>
                        <div class="scroll" data-scroll-spy="1000" tabindex="0" aria-label="Grid com o fluxo de caixa">
                            <input type="hidden" name="showchart" value="true">
                            <div class="table-info-body small" style="overflow: hidden;height: 380px;min-width:900px">
                                <table>
                                    <thead class="uppercase">
                                        <tr>
                                            <th class="level-0   " title="">
                                                #
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2021
                                            </th>
                                            <th class="level-0 text-right   AH " title="Análise horizontal">
                                                AH
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2020
                                            </th>
                                            <th class="level-0 text-right   AH " title="Análise horizontal">
                                                AH
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2019
                                            </th>
                                            <th class="level-0 text-right   AH " title="Análise horizontal">
                                                AH
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2018
                                            </th>
                                            <th class="level-0 text-right   AH " title="Análise horizontal">
                                                AH
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2017
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Caixa Líquido Atividades Operacionais - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-1  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Caixa Gerado nas Operações - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-1  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/l/lucro-liquido"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Lucro Líquido - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-1  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Equivalência Patrimonial - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-1  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Depreciação e Amortização - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Variações nos Ativos e Passivos - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Caixa Líquido Atividades de Investimento - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Fluxo de Caixa Livre - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Caixa Líquido Atividades de Financiamento - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Variação Cambial de Caixa e Equivalentes - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Aumento de Caixa e Equivalentes - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-1  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Saldo Inicial de Caixa e Equivalentes - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-1  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Saldo Final de Caixa e Equivalentes - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <span class="grid-empty fs-4 fw-100 grey-text text-center text-darken-1 uppercase mb-6"
                                    style="display:none">NÃO HÁ INFORMAÇÕES</span>
                            </div>
                        </div>
                        <div class="w-100 mt-3
                        d-xs-flex align-items-center justify-center ">
                            <div class="action text-center
                w-100 w-xs-45 w-sm-auto
                mr-xs-3
">
                                <button title="Ver tudo" type="button" class="
                                    btn btn-show btn-secondary waves-effect
                                    mb-2 mb-sm-0
                                    w-100
                                    ">
                                    ver mais
                                </button>
                            </div>
                            <div class="p-relative text-center div-btn-admresultados mr-sm-3 mb-2 mb-sm-0"
                                data-feature="analise-resultado" data-href="/cliente/analise-de-resultados">
                                <div class="need-login-cover" data-position="top"
                                    data-tooltip="&lt;span&gt;Faça o login para analisar o resultado (recente e histórico) de todas as empresas&lt;/span&gt;">
                                </div>
                                <a title="tela para analise o resultado das empresas da bolsa"
                                    href="https://statusinvest.com.br/cliente/analise-de-resultados"
                                    class="btn btn-secondary btn-outline btn-flat waves-effect btn-block w-100">
                                    <span class="d-flex justify-start align-items-center">
                                        <span>
                                            <i class="material-icons v-align-middle ">query_stats</i>
                                        </span>
                                        <span class="ml-1  lh-3"><b>Analise o resultado </b> das empresas</span>
                                    </span>
                                </a>
                            </div>
                        </div>
                    </div>
                    <div data-margin-chart="" data-code="ITSA4"
                        class="card chart-and-list rounded pt-3 pb-3 show-empty-callback">
                        <div class="d-flex justify-between align-items-center mb-2">
                            <h3 class="card-title m-0">Margens</h3>
                            <div>
                                <ul class="tabs transparent d-none d-md-block">
                                    <li class="tab col s3">
                                        <a role="button" class="active"
                                            href="https://statusinvest.com.br/acoes/itsa4#margin-0" data-type="0">
                                            5 anos
                                        </a>
                                    </li>
                                    <li class="tab col s3">
                                        <a role="button" href="https://statusinvest.com.br/acoes/itsa4#margin-1"
                                            data-type="1">
                                            10 anos
                                        </a>
                                    </li>
                                    <li class="tab col s3">
                                        <a role="button" href="https://statusinvest.com.br/acoes/itsa4#margin-2"
                                            data-type="2">
                                            Max.
                                        </a>
                                    </li>
                                    <li class="indicator" style="left: 0px; right: 153px;"></li>
                                </ul>
                                <div class="d-block d-md-none">

                                    <a class="bg-main-green-dark btn btn-xsmall dropdown-trigger"
                                        href="https://statusinvest.com.br/acoes/itsa4#!" data-target="dropdown-margin">
                                        <span>5 anos</span>
                                        <i style="max-width:18px" class="material-icons right ml-1">arrow_drop_down</i>
                                    </a>
                                    <ul id="dropdown-margin" class="dropdown-content" tabindex="0">
                                        <li tabindex="0"><a role="button" data-type="0">5 anos</a></li>
                                        <li tabindex="0"><a role="button" data-type="1">10 anos</a></li>
                                        <li tabindex="0"><a role="button" data-type="2">máx.</a></li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div id="margin-0" tabindex="0" role="region"
                            aria-label="Gráfico com as margens  da  ITAUSA dos últimos 5 anos"
                            class="chart-container active">
                            <div class="main-charts"></div>
                        </div>
                        <div id="margin-1" tabindex="0" role="region"
                            aria-label="Gráfico com as margens  da  ITAUSA dos últimos 10 anos" class="chart-container"
                            style="display:none">
                            <div class="main-charts"></div>
                        </div>
                        <div id="margin-2" tabindex="0" role="region"
                            aria-label="Gráfico com as margens  da  ITAUSA (máximo disponível)" class="chart-container"
                            style="display:none">
                            <div class="main-charts"></div>
                        </div>
                        <span class="graph-empty fs-4 fw-100 grey-text text-center text-darken-1 uppercase"
                            style="display:none">Não
                            há dados neste período</span>
                    </div>
                </div>
            </div>
            <div class="container advertising ads-lazy-group
                pl-sm-0 pr-sm-0
                pt-5
         ">
                <div class="a_x_d_x_s-banner
                    pt-1 pb-1 pl-0 pl-md-1 pr-0 pr-md-1
             " style="overflow: hidden;" data-id="banner-5">
                    <pubguru data-pg-ad="statusinvest_desktop_banner"></pubguru>
                </div>
            </div>
        </div>
        <div class="pb-7 pt-7 white">
            <div class="container ">
                <div class=" company accounting">
                    <h2 class="fs-4 fs-xs-5 mt-0 mb-5 fw-900 text-main">BALANÇO PATRIMONIAL</h2>
                    <div data-balance-actives-chart="" data-code="ITSA4"
                        class="card chart-and-list rounded pt-3 pb-3 mb-5 show-empty-callback">
                        <div class="d-flex justify-between align-items-center mb-2">
                            <h3 class="card-title m-0">Ativos/Passivos</h3>
                            <div>
                                <ul class="tabs transparent d-none d-md-block">
                                    <li class="tab col s3">
                                        <a role="button" class="active"
                                            href="https://statusinvest.com.br/acoes/itsa4#balance-actives-0"
                                            data-type="0">
                                            5 anos
                                        </a>
                                    </li>
                                    <li class="tab col s3">
                                        <a role="button"
                                            href="https://statusinvest.com.br/acoes/itsa4#balance-actives-1"
                                            data-type="1">
                                            10 anos
                                        </a>
                                    </li>
                                    <li class="tab col s3">
                                        <a role="button"
                                            href="https://statusinvest.com.br/acoes/itsa4#balance-actives-2"
                                            data-type="2">
                                            Max.
                                        </a>
                                    </li>
                                    <li class="indicator" style="left: 0px; right: 153px;"></li>
                                </ul>
                                <div class="d-block d-md-none">

                                    <a class="bg-main-green-dark btn btn-xsmall dropdown-trigger"
                                        href="https://statusinvest.com.br/acoes/itsa4#!"
                                        data-target="dropdown-balance-actives">
                                        <span>5 anos</span>
                                        <i style="max-width:18px" class="material-icons right ml-1">arrow_drop_down</i>
                                    </a>
                                    <ul id="dropdown-balance-actives" class="dropdown-content" tabindex="0">
                                        <li tabindex="0"><a role="button" data-type="0">5 anos</a></li>
                                        <li tabindex="0"><a role="button" data-type="1">10 anos</a></li>
                                        <li tabindex="0"><a role="button" data-type="2">máx.</a></li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div id="balance-actives-0" tabindex="0"
                            label="Gráfico com o balanço patrimonial  da  ITAUSA dos últimos 5 anos"
                            class="chart-container active">
                            <div class="main-charts"></div>
                        </div>
                        <div id="balance-actives-1" tabindex="0"
                            label="Gráfico com o balanço patrimonial  da  ITAUSA dos últimos 10 anos"
                            class="chart-container" style="display:none">
                            <div class="main-charts"></div>
                        </div>
                        <div id="balance-actives-2" tabindex="0"
                            label="Gráfico com o balanço patrimonial  da  ITAUSA (máximo disponível)"
                            class="chart-container" style="display:none">
                            <div class="main-charts"></div>
                        </div>
                        <span class="graph-empty fs-4 fw-100 grey-text text-center text-darken-1 uppercase"
                            style="display:none">Não
                            há dados neste período</span>
                    </div>
                    <div data-balanco-grid="" data-asset-id="427" data-code="ITSA4" data-category="1"
                        data-loadstalker="true" data-length="20" class="BS table-info card-panel mb-0">
                        <header role="heading" aria-level="2"
                            class="d-flex justify-end align-items-center flex-wrap flex-lg-nowrap"
                            title="Demonstração contábil destinada a evidenciar, qualitativa e quantitativamente, numa determinada data, a posição patrimonial e financeira">
                            <div class="card-title w-100 d-flex align-items-center mb-2 mb-lg-0">
                                <i class="material-icons v-align-middle d-inline-block">attach_money</i>
                                <h3 title="" class="m-0 d-inline-block v-align-middle  mb-sm-0">Balanço Patrimonial</h3>
                                <i data-position="top" class="material-icons help-icon tooltipped tooltipped-html mr-2"
                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;Análise horizontal (AH):&lt;/span&gt; Compara um ano/trimestre com a informação do período anterior.
&lt;br&gt;
&lt;br&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;Análise vertical (AV):&lt;/span&gt; Cada célula representa o % do valor sobre o &#39;Ativo Total&#39; e &#39;Passivo Total&#39;.
&lt;/div&gt;
">
                                    help_outline

                                </i>
                            </div>
                            <div
                                class="d-flex justify-between flex-wrap flex-md-nowrap align-items-center w-100 w-md-auto">
                                <div class="cover-estimates card w-100 w-xs-45 mb-1 mb-md-0 mr-xs-2 switch "
                                    style="background-color: #565656;padding: 0.3rem 0.5rem;">
                                    <label role="switch" aria-checked="false"
                                        class="fw-100 fs-3 grey-text text-darken-1 d-flex justify-start align-items-center">
                                        <input type="checkbox" name="set-future-data">
                                        <span class="v-align-middle lever m-0"></span>
                                        <span class="v-align-middle d-block fs-3 lh-3 ml-2 white-text">
                                            ESTIMATIVAS
                                        </span>
                                        &nbsp;
                                        <span class="d-block fs-3_5 lh-3_5">
                                            <i data-position="top"
                                                class="material-icons help-icon tooltipped tooltipped-html lh-3 fs-3 white-text"
                                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
&lt;div class=&quot;white-text&quot;&gt;
&lt;div class=&quot;d-flex justify-start align-items-center fs-4&quot;&gt;
&lt;div class=&quot;ml-1 uppercase fs-3 lh-3&quot;&gt;
Estimativa do balanço patrimonial
&lt;span class=&quot;d-block fs-2 lh-3&quot;&gt;
 &lt;span class=&quot;fw-100&quot;&gt;MÓDULO&lt;/span&gt; &lt;strong class=&quot;fw-900&quot;&gt;FORECAST&lt;/strong&gt;
&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;d-flex align-items-center justify-end white-text mt-1&quot;&gt;
&lt;div class=&quot;fs-2 lh-2 fw-600&quot;&gt;POR&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;lh-2&quot;&gt;
&lt;img width=&quot;54&quot; height=&quot;12&quot; alt=&quot;Logo da FACTSET&quot; src=&quot;/img/partners/integration/factset-w.png&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
">
                                                help_outline

                                            </i>
                                        </span>
                                    </label>
                                    <div class="need-login-cover" data-position="top"
                                        data-tooltip="&lt;span&gt;Faça o login para ver a estimativa dos próximos anos&lt;/span&gt;">
                                    </div>
                                </div>
                                <div class="si-dropdown dropdown-mode-grid w-50 mb-xs-1 mb-md-0 w-md-auto">

                                    <a class="btn btn-secondary btn-xsmall dropdown-trigger d-flex justify-between"
                                        href="https://statusinvest.com.br/acoes/itsa4#!"
                                        data-target="dropdown-balanco-grid">
                                        <span>ANUAL</span>
                                        <i style="max-width:18px" class="material-icons right ml-1">arrow_drop_down</i>
                                    </a>
                                    <ul id="dropdown-balanco-grid" class="dropdown-content" tabindex="0">
                                        <li tabindex="0"><a role="button" data-type="0">ANUAL</a></li>
                                        <li tabindex="0"><a role="button" data-type="1">TRIMESTRAL</a></li>
                                        <li class="optgroup" tabindex="0">
                                            <label class="d-block pt-1 fs-2 grey-text pl-1">
                                                VISÃO POR TRIMESTRE
                                            </label>
                                        </li>
                                        <li tabindex="0"><a role="button" data-type="3">1º trimestre</a></li>
                                        <li tabindex="0"><a role="button" data-type="4">2º trimestre</a></li>
                                        <li tabindex="0"><a role="button" data-type="5">3º trimestre</a></li>
                                        <li tabindex="0"><a role="button" data-type="6">4º trimestre</a></li>
                                    </ul>
                                </div>
                                <div class="bg-main-green-dark input-field si-dropdown si-col-view multiple tooltipped ml-0 ml-md-2 btn btn-small pl-1
                             w-45 w-xs-45  w-md-auto" data-position="top"
                                    data-tooltip="Apresentar/esconder colunas do grid">
                                    <div class="select-wrapper"><input class="select-dropdown dropdown-trigger"
                                            type="text" readonly="true"
                                            data-target="select-options-79f9713d-7807-1345-7410-5ab2b4731ada"
                                            aria-label="null">
                                        <ul id="select-options-79f9713d-7807-1345-7410-5ab2b4731ada"
                                            class="dropdown-content select-dropdown multiple-select-dropdown"
                                            tabindex="0">
                                            <li id="select-options-79f9713d-7807-1345-7410-5ab2b4731ada0" tabindex="0"
                                                class="selected">
                                                <span><label><input
                                                            type="checkbox" "=""><span>DATA</span></label></span></li><li id="
                                                            select-options-79f9713d-7807-1345-7410-5ab2b4731ada1"
                                                            tabindex="0" class="selected"><span><label><input
                                                                    type="checkbox" "=""><span>AH</span></label></span></li><li id="
                                                                    select-options-79f9713d-7807-1345-7410-5ab2b4731ada2"
                                                                    tabindex="0"><span><label><input
                                                                            type="checkbox" "=""><span>AV</span></label></span></li></ul><svg class="
                                                                            caret" height="24" viewBox="0 0 24 24"
                                                                            width="24"
                                                                            xmlns="http://www.w3.org/2000/svg">
                                                                        <path d="M7 10l5 5 5-5z"></path>
                                                                        <path d="M0 0h24v24H0z" fill="none"></path>
                                                                        </svg><select id="grid-col-view" multiple=""
                                                                            data-formselect="" data-itens="DATA|AH|AV"
                                                                            class="" tabindex="-1">
                                                                            <option title="Data de referência"
                                                                                value="DATA" selected="">DATA</option>
                                                                            <option title="Análise horizontal"
                                                                                value="AH" selected="">AH</option>
                                                                            <option title="Análise vertical" value="AV">
                                                                                AV</option>
                                                                        </select>
                                    </div>
                                </div>
                                <div class="si-dropdown single d-flex align-items-center si-group-date border-1 border-grey ml-md-3 mt-3 mt-xs-0
                             w-100 w-xs-50 w-md-auto">
                                    <div class="select-wrapper"><input class="select-dropdown dropdown-trigger"
                                            type="text" readonly="true"
                                            data-target="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a"
                                            aria-label="null">
                                        <ul id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a"
                                            class="dropdown-content select-dropdown" tabindex="0">
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a0" tabindex="0">
                                                <span>2021</span>
                                            </li>
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a1" tabindex="0">
                                                <span>2020</span>
                                            </li>
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a2" tabindex="0">
                                                <span>2019</span>
                                            </li>
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a3" tabindex="0">
                                                <span>2018</span>
                                            </li>
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a4" tabindex="0"
                                                class="selected">
                                                <span>2017</span>
                                            </li>
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a5" tabindex="0">
                                                <span>2016</span>
                                            </li>
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a6" tabindex="0">
                                                <span>2015</span>
                                            </li>
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a7" tabindex="0">
                                                <span>2014</span>
                                            </li>
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a8" tabindex="0">
                                                <span>2013</span>
                                            </li>
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a9" tabindex="0">
                                                <span>2012</span>
                                            </li>
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a10" tabindex="0">
                                                <span>2011</span>
                                            </li>
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a11" tabindex="0">
                                                <span>2010</span>
                                            </li>
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a12" tabindex="0">
                                                <span>2009</span>
                                            </li>
                                            <li id="select-options-e4774c10-abe4-f6c6-402f-20dc2845fd2a13" tabindex="0">
                                                <span>2008</span>
                                            </li>
                                        </ul><svg class="caret" height="24" viewBox="0 0 24 24" width="24"
                                            xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10l5 5 5-5z"></path>
                                            <path d="M0 0h24v24H0z" fill="none"></path>
                                        </svg><select id="grid-year-min" data-formselect="" title="De" class=""
                                            tabindex="-1">
                                            <option title="2021" value="2021">2021</option>
                                            <option title="2020" value="2020">2020</option>
                                            <option title="2019" value="2019">2019</option>
                                            <option title="2018" value="2018">2018</option>
                                            <option title="2017" selected="" value="2017">2017</option>
                                            <option title="2016" value="2016">2016</option>
                                            <option title="2015" value="2015">2015</option>
                                            <option title="2014" value="2014">2014</option>
                                            <option title="2013" value="2013">2013</option>
                                            <option title="2012" value="2012">2012</option>
                                            <option title="2011" value="2011">2011</option>
                                            <option title="2010" value="2010">2010</option>
                                            <option title="2009" value="2009">2009</option>
                                            <option title="2008" value="2008">2008</option>
                                        </select>
                                    </div>
                                    <strong>até</strong>
                                    <div class="select-wrapper"><input class="select-dropdown dropdown-trigger"
                                            type="text" readonly="true"
                                            data-target="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff0"
                                            aria-label="null">
                                        <ul id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff0"
                                            class="dropdown-content select-dropdown" tabindex="0">
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff00" tabindex="0"
                                                class="selected">
                                                <span>2021</span>
                                            </li>
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff01" tabindex="0">
                                                <span>2020</span>
                                            </li>
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff02" tabindex="0">
                                                <span>2019</span>
                                            </li>
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff03" tabindex="0">
                                                <span>2018</span>
                                            </li>
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff04" tabindex="0">
                                                <span>2017</span>
                                            </li>
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff05" tabindex="0">
                                                <span>2016</span>
                                            </li>
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff06" tabindex="0">
                                                <span>2015</span>
                                            </li>
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff07" tabindex="0">
                                                <span>2014</span>
                                            </li>
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff08" tabindex="0">
                                                <span>2013</span>
                                            </li>
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff09" tabindex="0">
                                                <span>2012</span>
                                            </li>
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff010" tabindex="0">
                                                <span>2011</span>
                                            </li>
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff011" tabindex="0">
                                                <span>2010</span>
                                            </li>
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff012" tabindex="0">
                                                <span>2009</span>
                                            </li>
                                            <li id="select-options-baa14300-18c3-fd4f-40c5-53beb8117ff013" tabindex="0">
                                                <span>2008</span>
                                            </li>
                                        </ul><svg class="caret" height="24" viewBox="0 0 24 24" width="24"
                                            xmlns="http://www.w3.org/2000/svg">
                                            <path d="M7 10l5 5 5-5z"></path>
                                            <path d="M0 0h24v24H0z" fill="none"></path>
                                        </svg><select id="grid-year-max" data-formselect="" title="Até" class=""
                                            tabindex="-1">
                                            <option title="2021" selected="" value="2021">2021</option>
                                            <option title="2020" value="2020">2020</option>
                                            <option title="2019" value="2019">2019</option>
                                            <option title="2018" value="2018">2018</option>
                                            <option title="2017" value="2017">2017</option>
                                            <option title="2016" value="2016">2016</option>
                                            <option title="2015" value="2015">2015</option>
                                            <option title="2014" value="2014">2014</option>
                                            <option title="2013" value="2013">2013</option>
                                            <option title="2012" value="2012">2012</option>
                                            <option title="2011" value="2011">2011</option>
                                            <option title="2010" value="2010">2010</option>
                                            <option title="2009" value="2009">2009</option>
                                            <option title="2008" value="2008">2008</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </header>
                        <div class="scroll" data-scroll-spy="1350" tabindex="0"
                            aria-label="Grid com o Balanço Patrimonial">
                            <input type="hidden" name="showchart" value="true">
                            <div class="table-info-body small" style="overflow: hidden;height: 380px;min-width:1250px">
                                <table>
                                    <thead class="uppercase">
                                        <tr>
                                            <th class="level-0   " title="">
                                                #
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2021
                                            </th>
                                            <th class="level-0 text-right   AH " title="Análise horizontal">
                                                AH
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right d-none  AV " title="Análise vertical">
                                                AV
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2020
                                            </th>
                                            <th class="level-0 text-right   AH " title="Análise horizontal">
                                                AH
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right d-none  AV " title="Análise vertical">
                                                AV
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2019
                                            </th>
                                            <th class="level-0 text-right   AH " title="Análise horizontal">
                                                AH
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right d-none  AV " title="Análise vertical">
                                                AV
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2018
                                            </th>
                                            <th class="level-0 text-right   AH " title="Análise horizontal">
                                                AH
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right d-none  AV " title="Análise vertical">
                                                AV
                                                <small class="fw-600">%</small>
                                            </th>
                                            <th class="level-0 text-right   DATA " title="Data de referência">
                                                2017
                                            </th>
                                            <th class="level-0 text-right d-none  AV " title="Análise vertical">
                                                AV
                                                <small class="fw-600">%</small>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Ativo Total - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-1  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/a/ativo-circulante"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Ativo Circulante - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-2  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Aplicações Financeiras - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-2  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Caixa e Equivalentes de Caixa - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-2  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Contas a Receber - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-2  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Estoque - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-1  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/a/ativo-nao-circulante"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Ativo Não Circulante - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-2  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Ativo Realizável a Longo Prazo - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-2  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Investimentos - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-2  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <a href="https://statusinvest.com.br/termos/a/ativo-imobilizado"
                                                        title="Ler artigo detalhado sobre este termo" target="_blank"
                                                        rel="noopener"
                                                        class="term-indicator-link d-flex align-items-center">
                                                        <span class="">Imobilizado - (R$)</span>
                                                        <span class="material-icons">format_quote</span>
                                                    </a>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-2  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Intangível - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-0  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Passivo Total - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-1  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Passivo Circulante - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-1  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Passivo Não Circulante - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-1  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Patrimônio Líquido Consolidado - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-2  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Capital Social Realizado - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-2  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Reserva Capital - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-2  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Reserva Lucros - (R$)</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                        <tr class="  ">
                                            <td class="level-2  value      " title="">
                                                <span class="d-flex align-items-center justify-between">
                                                    <span>Participação dos Não Controladores</span>
                                                    <button type="button" title="" data-key="" data-name=""
                                                        data-prefix="" data-suffix=""
                                                        class="btn-chart btn btn-xsmall btn-main-green btn-outline btn-flat ml-2">
                                                        <i style="max-width: 18px;"
                                                            class="material-icons">show_chart</i>
                                                    </button>
                                                </span>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <span class="grid-empty fs-4 fw-100 grey-text text-center text-darken-1 uppercase mb-6"
                                    style="display:none">NÃO HÁ INFORMAÇÕES</span>
                            </div>
                        </div>
                        <div class="action text-center">
                            <button title="Ver tudo" type="button" class="btn btn-show btn-secondary waves-effect">
                                ver mais
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="container advertising ads-lazy-group
                pl-sm-0 pr-sm-0
                pt-5
         ">
            <div class="a_x_d_x_s-banner
                    pt-1 pb-1 pl-0 pl-md-1 pr-0 pr-md-1
             " style="overflow: hidden;" data-id="banner-6">
                <pubguru data-pg-ad="statusinvest_desktop_banner"></pubguru>
            </div>
        </div>
        <div data-asset-document-list="" id="document-section" class="pb-7 pt-7">
            <div class="container">
                <h2 class="fs-4 fs-xs-5 mb-5 mt-0 fw-900 text-main">COMUNICADOS DO ITSA4</h2>
                <div class="d-flex align-items-center justify-center w-100 w-lg-50 m-auto">
                    <div class="input-field w-25 w-xs-20">
                        <div class="select-wrapper"><input class="select-dropdown dropdown-trigger" type="text"
                                readonly="true" data-target="select-options-6ac38a2c-8b9c-5ac3-f140-d06bde98c96e"
                                aria-label="null">
                            <ul id="select-options-6ac38a2c-8b9c-5ac3-f140-d06bde98c96e"
                                class="dropdown-content select-dropdown" tabindex="0">
                                <li id="select-options-6ac38a2c-8b9c-5ac3-f140-d06bde98c96e0" tabindex="0"
                                    class="selected">
                                    <span>2023</span>
                                </li>
                                <li id="select-options-6ac38a2c-8b9c-5ac3-f140-d06bde98c96e1" tabindex="0">
                                    <span>2022</span>
                                </li>
                                <li id="select-options-6ac38a2c-8b9c-5ac3-f140-d06bde98c96e2" tabindex="0">
                                    <span>2021</span>
                                </li>
                                <li id="select-options-6ac38a2c-8b9c-5ac3-f140-d06bde98c96e3" tabindex="0">
                                    <span>2020</span>
                                </li>
                                <li id="select-options-6ac38a2c-8b9c-5ac3-f140-d06bde98c96e4" tabindex="0">
                                    <span>2019</span>
                                </li>
                            </ul><svg class="caret" height="24" viewBox="0 0 24 24" width="24"
                                xmlns="http://www.w3.org/2000/svg">
                                <path d="M7 10l5 5 5-5z"></path>
                                <path d="M0 0h24v24H0z" fill="none"></path>
                            </svg><select data-formselect="" name="Year" <option="" value="" tabindex="-1">
                                <option value="2023">2023</option>
                                <option value="2022">2022</option>
                                <option value="2021">2021</option>
                                <option value="2020">2020</option>
                                <option value="2019">2019</option>
                            </select>
                        </div>
                        <label class="grey-text text-darken-3">ANO</label>
                    </div>
                    <div title="Busque pelo nome do comunicados" class="input-field w-75 w-xs-80 ml-3">
                        <input id="Filter" name="Filter" type="text" class="validate"
                            placeholder="ex. AGE, jcp, ata, etc.">
                        <label for="Filter" class="grey-text text-darken-3 active">nome do comunicado</label>
                    </div>
                </div>
                <div class=" bg-secondary white-text card p-1 mb-4">
                    <div class="fs-3 lh-3">
                        Caso o link não abra corretamente, clique no botão <i style="max-width: 14px;"
                            class="material-icons fs-3">content_copy</i> para copiar o link e abrir em uma aba do seu
                        navegador
                    </div>
                    <div class="fs-2">
                        Em uma recente atualização, alguns navegadores passaram a <span class="fw-700">impedir
                            sites</span>
                        com protocolo de segurança <span class="fw-900">(HTTPS)</span> a <span class="fw-700">abrir ou
                            redirecionar</span>
                        o acesso a sites <span class="fw-700">sem este protocolo</span> (sendo apenas HTTP)
                    </div>
                </div>
                <div class="documents card">
                    <div class="list" data-category="Acoes" data-controller="acao" data-code="ITSA4"
                        data-empty="NÃO HÁ DOCUMENTOS">
                    </div>
                    <ul class="pagination mb-0 mt-0">
                        <li class="disabled"><a href="https://statusinvest.com.br/acoes/itsa4#!"><i
                                    class="material-icons">chevron_left</i></a></li>
                        <li class="disabled"><a href="https://statusinvest.com.br/acoes/itsa4#!"><i
                                    class="material-icons">chevron_right</i></a></li>
                    </ul>
                    <div id="document-template" style="display:none">
                        <div class="align-items-center d-flex flex-wrap flex-md-nowrap justify-between">
                            <div class="lh-3 mb-2 mb-sm-0 w-100 w-sm-65 w-lg-80">
                                <span class="d-block fs-3 lh-3 fw-600">{_tipo}</span>
                                <span class="d-block fs-3 lh-3 ">{_assunto}</span>
                            </div>
                            <div class="w-30 w-sm-15 w-lg-10 fw-700">
                                {dataReferencia_F}
                            </div>
                            <div>
                                <div class=" d-flex justify-between flex-wrap justify-end flex-xs-nowrap">
                                    <a href="https://statusinvest.com.br/acoes/%7BlinkPdf%7D"
                                        rel="noopener noreferrer nofollow" target="_blank"
                                        class="d-flex btn btn-outline btn-flat btn-main-green btn-xsmall pl-1 pr-1 waves-effect waves-light"
                                        title="">
                                        <strong class="d-sm-none d-md-inline-block value">ABRIR </strong>
                                        <i class="ml-3 ml-sm-0 ml-md-3 material-icons">arrow_forward</i>
                                    </a>
                                    <button type="button" title="Copiar link" data-href="{linkPdf}"
                                        class="btn btn-main-green btn-outline ml-1 btn-flat btn-xsmall pl-1 pr-1 waves-effect waves-light btn-copy mt-xs-0">
                                        <i class="material-icons ">content_copy</i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="movements-section" class=" pb-7 pt-7 white">
            <div class="container">
                <h2 class="fs-4 fs-xs-5 mt-0 mb-5 fw-900 text-main">MOVIMENTAÇÕES</h2>
                <div title="Informações sobre as negociações da empresa em Dezembro de 2022"
                    class="negotiations card white mb-5">
                    <div class="d-flex justify-between ">
                        <div class="card-title ">
                            <i class="material-icons v-align-middle d-inline-block ">compare_arrows</i>
                            <h3 class="m-0 d-inline-block v-align-middle">NEGOCIAÇÕES</h3>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="d-lg-flex justify-between align-items-center">
                            <div
                                class="w-lg-40 text-main d-md-flex d-lg-block justify-between align-items-center text-center text-align-md-left text-align-lg-center">
                                <div class="fs-4 fs-md-5 mt-2 mt-lg-0 mb-2 mb-lg-4">
                                    <span class="fw-900 uppercase">Dezembro</span> / <b class="fw-100">2022</b>
                                </div>
                                <div class="d-flex w-md-55 w-lg-100 fw-100 fs-3 fs-md-4 justify-around">
                                    <div title="Total de ações negociadas" class="">
                                        <b class="d-block fs-2 fw-900 uppercase">Total</b>
                                        <span>932.510</span>
                                    </div>
                                    <div title="Volume total em reais das negociações" class="">
                                        <b class="d-block fs-2 fw-900 uppercase">Volume (R$)</b>
                                        <span>4.924.965.430,00</span>
                                    </div>
                                </div>
                            </div>
                            <div class="w-lg-60 mt-3 mt-lg-0 scroll" data-scroll-spy="440" tabindex="0" role="region"
                                aria-label="Movimentações   da  ITAUSA">
                                <div class="mw-450">
                                    <table class="striped">
                                        <thead>
                                            <tr class="text-main uppercase">
                                                <th title="Tipo da negociação">Mercado</th>
                                                <th title="Total de negociações" class="text-right">Negociações</th>
                                                <th title="Volume em reais das negociações" class="text-right">Volume
                                                    (R$)</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td>Lote Padrão</td>
                                                <td class="text-right">597.969</td>
                                                <td class="text-right">4.423.651.960,00</td>
                                            </tr>
                                            <tr>
                                                <td>Mercado Termo</td>
                                                <td class="text-right">333</td>
                                                <td class="text-right">29.298.532,51</td>
                                            </tr>
                                            <tr>
                                                <td>Opção Compra</td>
                                                <td class="text-right">56.541</td>
                                                <td class="text-right">17.035.433,96</td>
                                            </tr>
                                            <tr>
                                                <td>Opção Venda</td>
                                                <td class="text-right">35.328</td>
                                                <td class="text-right">44.950.388,02</td>
                                            </tr>
                                            <tr>
                                                <td>Mercado Fracionário</td>
                                                <td class="text-right">241.091</td>
                                                <td class="text-right">29.298.532,51</td>
                                            </tr>
                                            <tr>
                                                <td>Outros</td>
                                                <td class="text-right">1.248</td>
                                                <td class="text-right">380.730.583,00</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="buyback card">
                    <div class="d-flex justify-between ">
                        <div class="card-title ">
                            <i class="material-icons v-align-middle d-inline-block ">settings_backup_restore</i>
                            <h3 class="m-0 d-inline-block v-align-middle">PROGRAMA DE RECOMPRA</h3>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="line pt-2 pb-2 d-md-flex flex-wrap  justify-between align-items-center">
                            <div class="w-100 w-lg-50  d-flex flex-wrap justify-around align-items-center">
                                <div class="w-100 w-xs-15">
                                    <span class="d-block text-center mb-1 mb-md-0">
                                        <span class="badge main-badge white-text darken-3 grey">Finalizado</span>
                                    </span>
                                </div>
                                <div>
                                    <span class="d-block fs-2 ">APROVADO EM</span>
                                    <span class="d-block fw-700">22/02/2021</span>
                                </div>
                                <div>
                                    <span class="d-block fs-2 ">DATA DE INÍCIO</span>
                                    <span class="d-block fw-700">23/02/2021</span>
                                </div>
                                <div>
                                    <span class="d-block fs-2 ">DATA DE FIM</span>
                                    <span class="d-block fw-700">23/08/2022</span>
                                </div>
                            </div>
                            <div class="w-100 w-lg-50 mt-2 mb-3 mb-sm-2 d-xs-flex justify-center align-items-center">
                                <div class="type mb-2 mb-sm-0">
                                    <div class="d-flex justify-center text-left">
                                        <div class="pr-3">
                                            <span class="d-block fs-2 ">TIPO</span>
                                            <span class="d-block fs-4 lh-4 fw-700">ON</span>
                                        </div>
                                        <div>
                                            <span class="d-block fs-2 ">QUANTIDADE</span>
                                            <span class="d-block fs-4 lh-4 fw-700">50.000.000</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="type mb-2 mb-sm-0">
                                    <div class="d-flex justify-center text-left">
                                        <div class="pr-3">
                                            <span class="d-block fs-2 ">TIPO</span>
                                            <span class="d-block fs-4 lh-4 fw-700">PN</span>
                                        </div>
                                        <div>
                                            <span class="d-block fs-2 ">QUANTIDADE</span>
                                            <span class="d-block fs-4 lh-4 fw-700">200.000.000</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="pt-5">
                    <div class="card p-2 p-xs-3">
                        <div class="card-title d-flex align-items-center justify-start">
                            <i class="material-icons v-align-middle d-inline-block ">record_voice_over</i>&nbsp;<h3
                                class="m-0 d-inline-block v-align-middle">SUBSCRIÇÃO</h3>
                            <i data-position="top" class="material-icons help-icon tooltipped tooltipped-html ml-1"
                                data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;Negociação:&lt;/span&gt; período de negociação dos direitos de subscrição na BM&amp;amp;FBOVESPA
&lt;br&gt;
&lt;br&gt;
&lt;span class=&quot;fw-900 text-main-secondary-light&quot;&gt;Fim de subscrição:&lt;/span&gt; prazo final para o exercício da preferência junto ao emissor.
&lt;/div&gt;
">
                                help_outline

                            </i>
                        </div>
                        <div class="card-body">
                            <div class="mt-3">
                                <div class="d-flex justify-between align-items-center flex-wrap flex-lg-nowrap">
                                    <div class="w-50 w-xs-25 w-lg-20">
                                        <small class="d-block fs-2 uppercase">Anúncio</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">19/02/2018</strong>
                                    </div>
                                    <div class="w-50 w-xs-25 w-lg-20 ">
                                        <small class="d-block fs-2 uppercase">DATA COM</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">22/02/2018</strong>
                                    </div>
                                    <div class="w-100 w-xs-50 w-lg-30  mt-1">
                                        <small class="d-block fs-2 uppercase">Negociação</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">28/02/2018 a 22/03/2018</strong>
                                    </div>
                                    <div class="w-50 w-xs-25 w-lg-20 mt-1">
                                        <small class="d-block fs-2 uppercase">Fim <span
                                                class="d-xs-none d-sm-inline-block">de
                                            </span>subscrição</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">29/03/2018</strong>
                                    </div>
                                    <div class="w-50 w-xs-25 w-lg-20 mt-1">
                                        <small class="d-block fs-2 uppercase">Incorporação</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">30/05/2018</strong>
                                    </div>
                                    <div class="w-50 w-xs-25 w-lg-20 mt-1">
                                        <small class="d-block fs-2 uppercase">Valor base</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">R$ 7,80</strong>
                                    </div>
                                    <div class="w-50 w-xs-25 w-lg-20 mt-1">
                                        <small class="d-block fs-2 uppercase">Percentual</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">2,35%</strong>
                                    </div>
                                    <div class="w-xs-30 w-sm-33 w-md-auto">
                                        <small class="d-block fs-2 uppercase">Ativo emitido</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">
                                            <a class="text-main-green-dark" itemtype="https://schema.org/Thing"
                                                itemprop="item" href="https://statusinvest.com.br/acoes/itsa4">
                                                <span itemprop="name">ITSA4</span>
                                            </a>
                                        </strong>
                                    </div>
                                </div>
                                <hr class="border-grey-lighten-1 border-top-1 mt-2 mb-2 ">
                                <div class="d-flex justify-between align-items-center flex-wrap flex-lg-nowrap">
                                    <div class="w-50 w-xs-25 w-lg-20">
                                        <small class="d-block fs-2 uppercase">Anúncio</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">13/02/2017</strong>
                                    </div>
                                    <div class="w-50 w-xs-25 w-lg-20 ">
                                        <small class="d-block fs-2 uppercase">DATA COM</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">20/02/2017</strong>
                                    </div>
                                    <div class="w-100 w-xs-50 w-lg-30  mt-1">
                                        <small class="d-block fs-2 uppercase">Negociação</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">02/03/2017 a 31/03/2017</strong>
                                    </div>
                                    <div class="w-50 w-xs-25 w-lg-20 mt-1">
                                        <small class="d-block fs-2 uppercase">Fim <span
                                                class="d-xs-none d-sm-inline-block">de
                                            </span>subscrição</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">31/03/2017</strong>
                                    </div>
                                    <div class="w-50 w-xs-25 w-lg-20 mt-1">
                                        <small class="d-block fs-2 uppercase">Incorporação</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">06/04/2017</strong>
                                    </div>
                                    <div class="w-50 w-xs-25 w-lg-20 mt-1">
                                        <small class="d-block fs-2 uppercase">Valor base</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">R$ 6,10</strong>
                                    </div>
                                    <div class="w-50 w-xs-25 w-lg-20 mt-1">
                                        <small class="d-block fs-2 uppercase">Percentual</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">1,64%</strong>
                                    </div>
                                    <div class="w-xs-30 w-sm-33 w-md-auto">
                                        <small class="d-block fs-2 uppercase">Ativo emitido</small>
                                        <strong class="d-block lh-3 fs-3 fw-700">
                                            <a class="text-main-green-dark" itemtype="https://schema.org/Thing"
                                                itemprop="item" href="https://statusinvest.com.br/acoes/itsa4">
                                                <span itemprop="name">ITSA4</span>
                                            </a>
                                        </strong>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="indice-section" class="pb-4 pt-7 ">
            <div class="container">
                <h2 class="fs-4 fs-xs-5 mt-0 mb-4 fw-900 text-main"><span>ÍNDICES COM O ITSA4</span></h2>
                <div class="indice-list d-flex flex-wrap justify-center pb-3">
                    <div class="indice-item w-100 w-sm-50 w-lg-33">
                        <a title="Ir até o índice &#39;Índice Financeiro&#39;" class="waves-effect waves-on-white-bg"
                            href="https://statusinvest.com.br/indices/indice-financeiro">
                            <div class="d-flex align-items-center ">
                                <span title="Código do índice"
                                    class="code  bg-main-green-dark white-text fs-3 rounded fw-900">
                                    IFNC
                                </span>
                                <div title="Nome do índice" class="ml-1 w-100">
                                    <strong class="d-block lh-3">Índice Financeiro</strong>
                                </div>
                                <i style="min-width: 20px;" class="material-icons fs-4 ml-1">arrow_forward</i>
                            </div>
                            <div class="mt-2 d-flex justify-around">
                                <div title="Quantidade teórica do ativo dentro do índice">
                                    <small class="d-block">QTDE. TEÓRICA</small>
                                    <strong class="d-block fs-4 fw-700">5.233.076.295</strong>
                                </div>
                                <div title="Participação em porcentagem do ativo dentro do índice" class="text-main">
                                    <small class="d-block">PARTICIPAÇÃO</small>
                                    <strong class="d-block fs-4 fw-900">10,416%</strong>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="indice-item w-100 w-sm-50 w-lg-33">
                        <a title="Ir até o índice &#39;Índice Valor&#39;" class="waves-effect waves-on-white-bg"
                            href="https://statusinvest.com.br/indices/indice-valor">
                            <div class="d-flex align-items-center ">
                                <span title="Código do índice"
                                    class="code  bg-main-green-dark white-text fs-3 rounded fw-900">
                                    IVBX
                                </span>
                                <div title="Nome do índice" class="ml-1 w-100">
                                    <strong class="d-block lh-3">Índice Valor</strong>
                                </div>
                                <i style="min-width: 20px;" class="material-icons fs-4 ml-1">arrow_forward</i>
                            </div>
                            <div class="mt-2 d-flex justify-around">
                                <div title="Quantidade teórica do ativo dentro do índice">
                                    <small class="d-block">QTDE. TEÓRICA</small>
                                    <strong class="d-block fs-4 fw-700">5.233.076.295</strong>
                                </div>
                                <div title="Participação em porcentagem do ativo dentro do índice" class="text-main">
                                    <small class="d-block">PARTICIPAÇÃO</small>
                                    <strong class="d-block fs-4 fw-900">6,473%</strong>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="indice-item w-100 w-sm-50 w-lg-33">
                        <a title="Ir até o índice &#39;Índice Dividendos&#39;" class="waves-effect waves-on-white-bg"
                            href="https://statusinvest.com.br/indices/indice-dividendos">
                            <div class="d-flex align-items-center ">
                                <span title="Código do índice"
                                    class="code  bg-main-green-dark white-text fs-3 rounded fw-900">
                                    IDIV
                                </span>
                                <div title="Nome do índice" class="ml-1 w-100">
                                    <strong class="d-block lh-3">Índice Dividendos</strong>
                                </div>
                                <i style="min-width: 20px;" class="material-icons fs-4 ml-1">arrow_forward</i>
                            </div>
                            <div class="mt-2 d-flex justify-around">
                                <div title="Quantidade teórica do ativo dentro do índice">
                                    <small class="d-block">QTDE. TEÓRICA</small>
                                    <strong class="d-block fs-4 fw-700">1.846.291.862</strong>
                                </div>
                                <div title="Participação em porcentagem do ativo dentro do índice" class="text-main">
                                    <small class="d-block">PARTICIPAÇÃO</small>
                                    <strong class="d-block fs-4 fw-900">3,093%</strong>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="indice-item w-100 w-sm-50 w-lg-33">
                        <a title="Ir até o índice &#39;Índice Brasil 50&#39;" class="waves-effect waves-on-white-bg"
                            href="https://statusinvest.com.br/indices/indice-brasil-50">
                            <div class="d-flex align-items-center ">
                                <span title="Código do índice"
                                    class="code  bg-main-green-dark white-text fs-3 rounded fw-900">
                                    IBXL
                                </span>
                                <div title="Nome do índice" class="ml-1 w-100">
                                    <strong class="d-block lh-3">Índice Brasil 50</strong>
                                </div>
                                <i style="min-width: 20px;" class="material-icons fs-4 ml-1">arrow_forward</i>
                            </div>
                            <div class="mt-2 d-flex justify-around">
                                <div title="Quantidade teórica do ativo dentro do índice">
                                    <small class="d-block">QTDE. TEÓRICA</small>
                                    <strong class="d-block fs-4 fw-700">5.233.076.295</strong>
                                </div>
                                <div title="Participação em porcentagem do ativo dentro do índice" class="text-main">
                                    <small class="d-block">PARTICIPAÇÃO</small>
                                    <strong class="d-block fs-4 fw-900">2,452%</strong>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="indice-item w-100 w-sm-50 w-lg-33">
                        <a title="Ir até o índice &#39;Ibovespa&#39;" class="waves-effect waves-on-white-bg"
                            href="https://statusinvest.com.br/indices/ibovespa">
                            <div class="d-flex align-items-center ">
                                <span title="Código do índice" class="code  bg-main white-text fs-3 rounded fw-900">
                                    IBOV
                                </span>
                                <div title="Nome do índice" class="ml-1 w-100">
                                    <strong class="d-block lh-3">Ibovespa</strong>
                                </div>
                                <i style="min-width: 20px;" class="material-icons fs-4 ml-1">arrow_forward</i>
                            </div>
                            <div class="mt-2 d-flex justify-around">
                                <div title="Quantidade teórica do ativo dentro do índice">
                                    <small class="d-block">QTDE. TEÓRICA</small>
                                    <strong class="d-block fs-4 fw-700">5.233.076.295</strong>
                                </div>
                                <div title="Participação em porcentagem do ativo dentro do índice" class="text-main">
                                    <small class="d-block">PARTICIPAÇÃO</small>
                                    <strong class="d-block fs-4 fw-900">2,288%</strong>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="indice-item w-100 w-sm-50 w-lg-33">
                        <a title="Ir até o índice &#39;Índice MidLarge Cap&#39;" class="waves-effect waves-on-white-bg"
                            href="https://statusinvest.com.br/indices/indice-midlarge-cap">
                            <div class="d-flex align-items-center ">
                                <span title="Código do índice"
                                    class="code  bg-main-green-dark white-text fs-3 rounded fw-900">
                                    MLCX
                                </span>
                                <div title="Nome do índice" class="ml-1 w-100">
                                    <strong class="d-block lh-3">Índice MidLarge Cap</strong>
                                </div>
                                <i style="min-width: 20px;" class="material-icons fs-4 ml-1">arrow_forward</i>
                            </div>
                            <div class="mt-2 d-flex justify-around">
                                <div title="Quantidade teórica do ativo dentro do índice">
                                    <small class="d-block">QTDE. TEÓRICA</small>
                                    <strong class="d-block fs-4 fw-700">5.233.076.295</strong>
                                </div>
                                <div title="Participação em porcentagem do ativo dentro do índice" class="text-main">
                                    <small class="d-block">PARTICIPAÇÃO</small>
                                    <strong class="d-block fs-4 fw-900">2,257%</strong>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="indice-item w-100 w-sm-50 w-lg-33">
                        <a title="Ir até o índice &#39;Índice de Sustentabilidade Empresarial&#39;"
                            class="waves-effect waves-on-white-bg"
                            href="https://statusinvest.com.br/indices/indice-de-sustentabilidade-empresarial">
                            <div class="d-flex align-items-center ">
                                <span title="Código do índice"
                                    class="code  bg-main-green-dark white-text fs-3 rounded fw-900">
                                    ISEE
                                </span>
                                <div title="Nome do índice" class="ml-1 w-100">
                                    <strong class="d-block lh-3">Índice de Sustentabilidade Empresarial</strong>
                                </div>
                                <i style="min-width: 20px;" class="material-icons fs-4 ml-1">arrow_forward</i>
                            </div>
                            <div class="mt-2 d-flex justify-around">
                                <div title="Quantidade teórica do ativo dentro do índice">
                                    <small class="d-block">QTDE. TEÓRICA</small>
                                    <strong class="d-block fs-4 fw-700">1.932.413.050</strong>
                                </div>
                                <div title="Participação em porcentagem do ativo dentro do índice" class="text-main">
                                    <small class="d-block">PARTICIPAÇÃO</small>
                                    <strong class="d-block fs-4 fw-900">2,223%</strong>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="indice-item w-100 w-sm-50 w-lg-33">
                        <a title="Ir até o índice &#39;Índice de Ações com Tag Along Diferenciado&#39;"
                            class="waves-effect waves-on-white-bg"
                            href="https://statusinvest.com.br/indices/indice-de-acoes-com-tag-along-diferenciado">
                            <div class="d-flex align-items-center ">
                                <span title="Código do índice"
                                    class="code  bg-main-green-dark white-text fs-3 rounded fw-900">
                                    ITAG
                                </span>
                                <div title="Nome do índice" class="ml-1 w-100">
                                    <strong class="d-block lh-3">Índice de Ações com Tag Along Diferenciado</strong>
                                </div>
                                <i style="min-width: 20px;" class="material-icons fs-4 ml-1">arrow_forward</i>
                            </div>
                            <div class="mt-2 d-flex justify-around">
                                <div title="Quantidade teórica do ativo dentro do índice">
                                    <small class="d-block">QTDE. TEÓRICA</small>
                                    <strong class="d-block fs-4 fw-700">5.233.076.295</strong>
                                </div>
                                <div title="Participação em porcentagem do ativo dentro do índice" class="text-main">
                                    <small class="d-block">PARTICIPAÇÃO</small>
                                    <strong class="d-block fs-4 fw-900">2,215%</strong>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="indice-item w-100 w-sm-50 w-lg-33">
                        <a title="Ir até o índice &#39;Índice Brasil 100&#39;" class="waves-effect waves-on-white-bg"
                            href="https://statusinvest.com.br/indices/indice-brasil-100">
                            <div class="d-flex align-items-center ">
                                <span title="Código do índice"
                                    class="code  bg-main-green-dark white-text fs-3 rounded fw-900">
                                    IBRX
                                </span>
                                <div title="Nome do índice" class="ml-1 w-100">
                                    <strong class="d-block lh-3">Índice Brasil 100</strong>
                                </div>
                                <i style="min-width: 20px;" class="material-icons fs-4 ml-1">arrow_forward</i>
                            </div>
                            <div class="mt-2 d-flex justify-around">
                                <div title="Quantidade teórica do ativo dentro do índice">
                                    <small class="d-block">QTDE. TEÓRICA</small>
                                    <strong class="d-block fs-4 fw-700">5.233.076.295</strong>
                                </div>
                                <div title="Participação em porcentagem do ativo dentro do índice" class="text-main">
                                    <small class="d-block">PARTICIPAÇÃO</small>
                                    <strong class="d-block fs-4 fw-900">2,103%</strong>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="indice-item w-100 w-sm-50 w-lg-33">
                        <a title="Ir até o índice &#39;Índice de Governança Corporativa Trade&#39;"
                            class="waves-effect waves-on-white-bg"
                            href="https://statusinvest.com.br/indices/indice-de-governanca-corporativa-trade">
                            <div class="d-flex align-items-center ">
                                <span title="Código do índice"
                                    class="code  bg-main-green-dark white-text fs-3 rounded fw-900">
                                    IGCT
                                </span>
                                <div title="Nome do índice" class="ml-1 w-100">
                                    <strong class="d-block lh-3">Índice de Governança Corporativa Trade</strong>
                                </div>
                                <i style="min-width: 20px;" class="material-icons fs-4 ml-1">arrow_forward</i>
                            </div>
                            <div class="mt-2 d-flex justify-around">
                                <div title="Quantidade teórica do ativo dentro do índice">
                                    <small class="d-block">QTDE. TEÓRICA</small>
                                    <strong class="d-block fs-4 fw-700">5.233.076.295</strong>
                                </div>
                                <div title="Participação em porcentagem do ativo dentro do índice" class="text-main">
                                    <small class="d-block">PARTICIPAÇÃO</small>
                                    <strong class="d-block fs-4 fw-900">2,078%</strong>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="indice-item w-100 w-sm-50 w-lg-33">
                        <a title="Ir até o índice &#39;Índice Brasil Amplo&#39;" class="waves-effect waves-on-white-bg"
                            href="https://statusinvest.com.br/indices/indice-brasil-amplo">
                            <div class="d-flex align-items-center ">
                                <span title="Código do índice"
                                    class="code  bg-main-green-dark white-text fs-3 rounded fw-900">
                                    IBRA
                                </span>
                                <div title="Nome do índice" class="ml-1 w-100">
                                    <strong class="d-block lh-3">Índice Brasil Amplo</strong>
                                </div>
                                <i style="min-width: 20px;" class="material-icons fs-4 ml-1">arrow_forward</i>
                            </div>
                            <div class="mt-2 d-flex justify-around">
                                <div title="Quantidade teórica do ativo dentro do índice">
                                    <small class="d-block">QTDE. TEÓRICA</small>
                                    <strong class="d-block fs-4 fw-700">5.233.076.295</strong>
                                </div>
                                <div title="Participação em porcentagem do ativo dentro do índice" class="text-main">
                                    <small class="d-block">PARTICIPAÇÃO</small>
                                    <strong class="d-block fs-4 fw-900">1,980%</strong>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="indice-item w-100 w-sm-50 w-lg-33">
                        <a title="Ir até o índice &#39;Índice de Ações com Governança Corporativa Diferenciada&#39;"
                            class="waves-effect waves-on-white-bg"
                            href="https://statusinvest.com.br/indices/indice-de-acoes-com-governanca-corporativa-diferenciada">
                            <div class="d-flex align-items-center ">
                                <span title="Código do índice"
                                    class="code  bg-main-green-dark white-text fs-3 rounded fw-900">
                                    IGCX
                                </span>
                                <div title="Nome do índice" class="ml-1 w-100">
                                    <strong class="d-block lh-3">Índice de Ações com Governança Corporativa
                                        Diferenciada</strong>
                                </div>
                                <i style="min-width: 20px;" class="material-icons fs-4 ml-1">arrow_forward</i>
                            </div>
                            <div class="mt-2 d-flex justify-around">
                                <div title="Quantidade teórica do ativo dentro do índice">
                                    <small class="d-block">QTDE. TEÓRICA</small>
                                    <strong class="d-block fs-4 fw-700">5.233.076.295</strong>
                                </div>
                                <div title="Participação em porcentagem do ativo dentro do índice" class="text-main">
                                    <small class="d-block">PARTICIPAÇÃO</small>
                                    <strong class="d-block fs-4 fw-900">1,236%</strong>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="indice-item w-100 w-sm-50 w-lg-33">
                        <a title="Ir até o índice &#39;Índice Carbono Eficiente&#39;"
                            class="waves-effect waves-on-white-bg"
                            href="https://statusinvest.com.br/indices/indice-carbono-eficiente">
                            <div class="d-flex align-items-center ">
                                <span title="Código do índice"
                                    class="code  bg-main-green-dark white-text fs-3 rounded fw-900">
                                    ICO2
                                </span>
                                <div title="Nome do índice" class="ml-1 w-100">
                                    <strong class="d-block lh-3">Índice Carbono Eficiente</strong>
                                </div>
                                <i style="min-width: 20px;" class="material-icons fs-4 ml-1">arrow_forward</i>
                            </div>
                            <div class="mt-2 d-flex justify-around">
                                <div title="Quantidade teórica do ativo dentro do índice">
                                    <small class="d-block">QTDE. TEÓRICA</small>
                                    <strong class="d-block fs-4 fw-700">786.321.419</strong>
                                </div>
                                <div title="Participação em porcentagem do ativo dentro do índice" class="text-main">
                                    <small class="d-block">PARTICIPAÇÃO</small>
                                    <strong class="d-block fs-4 fw-900">0,440%</strong>
                                </div>
                            </div>
                        </a>
                    </div>
                </div>
                <div class="container advertising ads-lazy-group
                pl-sm-0 pr-sm-0
                pt-5
         ">
                    <div class="a_x_d_x_s-banner
                    pt-1 pb-1 pl-0 pl-md-1 pr-0 pr-md-1
             " style="overflow: hidden;" data-id="banner-7">
                        <pubguru data-pg-ad="statusinvest_desktop_banner"></pubguru>
                    </div>
                </div>
            </div>
        </div>
        <div class=" pb-7 pt-7 white">
            <div class="container">
                <h2 class="fs-4 fs-xs-5 mt-0 mb-5 fw-900 text-main">EVENTOS DA ITAUSA</h2>
                <div class=" company">
                    <div class="">
                        <div class="d-md-flex" calendar-component="" data-unitsign="R$" data-datebase="Data COM"
                            data-country="Brasil" data-type="Acoes" data-typeid="1" data-companyid=""
                            data-companyname="itausa" data-year="2023" data-month="1" data-loadstalker="true">
                            <input name="showOnclick" type="hidden">
                            <div class="w-100 w-md-50">
                                <div class="calendar">
                                    <input name="months" type="hidden"
                                        value="{&quot;1&quot;:&quot;JANEIRO&quot;,&quot;2&quot;:&quot;FEVEREIRO&quot;,&quot;3&quot;:&quot;MARÇO&quot;,&quot;4&quot;:&quot;ABRIL&quot;,&quot;5&quot;:&quot;MAIO&quot;,&quot;6&quot;:&quot;JUNHO&quot;,&quot;7&quot;:&quot;JULHO&quot;,&quot;8&quot;:&quot;AGOSTO&quot;,&quot;9&quot;:&quot;SETEMBRO&quot;,&quot;10&quot;:&quot;OUTUBRO&quot;,&quot;11&quot;:&quot;NOVEMBRO&quot;,&quot;12&quot;:&quot;DEZEMBRO&quot;}">
                                    <div class="text-center">
                                        <ul class="pagination month-pagination m-0">
                                            <li class=" waves-effect" title="Mês anterior"><a class="before lh-3"
                                                    role="button" tabindex="0"><i
                                                        class="material-icons">chevron_left</i></a></li>
                                            <li class="active"><span
                                                    class="month-year d-block fw-700 lh-3 p-1 white-text">JANEIRO,
                                                    2023</span></li>
                                            <li class="waves-effect" title="Próximo mês"><a class="after lh-3"
                                                    role="button" tabindex="0"><i
                                                        class="material-icons">chevron_right</i></a></li>
                                        </ul>
                                    </div>
                                    <div class="days d-flex flex-wrap">
                                        <div class="name" title="Domingo"><b>D</b></div>
                                        <div class="name" title="Segunda-feira"><b>S</b></div>
                                        <div class="name" title="Terça-feira"><b>T</b></div>
                                        <div class="name" title="Quarta-feira"><b>Q</b></div>
                                        <div class="name" title="Quinta-feira"><b>Q</b></div>
                                        <div class="name" title="Sexta-feira"><b>S</b></div>
                                        <div class="name" title="Sábado"><b>S</b></div>
                                    </div>
                                    <div class="legend white">
                                        <span class="report"
                                            title="Comunicado criado pela empresa direcionado ao mercado">COMUNICADOS</span>
                                        <span class="dividend"
                                            title="Data com do provento declarado pela empresa">PROVENTO</span>
                                        <span class="dividend-payed"
                                            title="Data de pagamento de provento">PAGAMENTO</span>
                                        <span class="meeting"
                                            title="Evento realizado pela empresa. Desde reunião com diretoria até assembleias">EVENTOS</span>
                                        <span class="ipo"
                                            title="Data que uma empresa nova abrirá capital e estará disponível na bolsa de valores">IPO</span>
                                        <span class="holiday" title="Feriados que a bolsa não irá operar">FERIADO</span>
                                    </div>
                                </div>
                            </div>
                            <div class="w-100 w-md-50 pl-md-6 d-flex justify-center align-items-center">
                                <div class="event-list w-100">
                                    <input name="results" type="hidden"
                                        value="{&quot;LoadStalker&quot;:true,&quot;type&quot;:1,&quot;companyId&quot;:null,&quot;companyName&quot;:&quot;itausa&quot;,&quot;Loaded&quot;:true,&quot;manuais&quot;:[],&quot;iPOs&quot;:[],&quot;provents&quot;:[],&quot;proventsPayment&quot;:[{&quot;resultAbsoluteValue&quot;:&quot;0,0235&quot;,&quot;dateCom&quot;:&quot;30/11/2022&quot;,&quot;paymentDividend&quot;:&quot;02/01/2023&quot;,&quot;code&quot;:&quot;ITSA3&quot;,&quot;companyName&quot;:&quot;ITAUSA&quot;,&quot;normalizedName&quot;:&quot;itausa&quot;,&quot;companyId&quot;:345,&quot;type&quot;:3,&quot;group&quot;:null,&quot;typeDesc&quot;:&quot;JCP&quot;,&quot;day&quot;:2,&quot;date&quot;:&quot;02/01/2023&quot;,&quot;url&quot;:&quot;/acoes/itsa3&quot;,&quot;CategoryType&quot;:0},{&quot;resultAbsoluteValue&quot;:&quot;0,0235&quot;,&quot;dateCom&quot;:&quot;30/11/2022&quot;,&quot;paymentDividend&quot;:&quot;02/01/2023&quot;,&quot;code&quot;:&quot;ITSA4&quot;,&quot;companyName&quot;:&quot;ITAUSA&quot;,&quot;normalizedName&quot;:&quot;itausa&quot;,&quot;companyId&quot;:345,&quot;type&quot;:3,&quot;group&quot;:null,&quot;typeDesc&quot;:&quot;JCP&quot;,&quot;day&quot;:2,&quot;date&quot;:&quot;02/01/2023&quot;,&quot;url&quot;:&quot;/acoes/itsa4&quot;,&quot;CategoryType&quot;:0}],&quot;reports&quot;:[{&quot;description&quot;:&quot;Outros Comunicados Não Considerados Fatos Relevantes (Comunicado ao Mercado)&quot;,&quot;code&quot;:&quot;ITSA4&quot;,&quot;companyName&quot;:&quot;ITAUSA&quot;,&quot;normalizedName&quot;:&quot;itausa&quot;,&quot;companyId&quot;:345,&quot;type&quot;:1,&quot;group&quot;:null,&quot;typeDesc&quot;:&quot;Relatório&quot;,&quot;day&quot;:4,&quot;date&quot;:&quot;04/01/2023&quot;,&quot;url&quot;:&quot;https://www.rad.cvm.gov.br/ENET/frmDownloadDocumento.aspx?Tela=ext&amp;numSequencia=571311&amp;numVersao=1&amp;numProtocolo=1046581&amp;descTipo=IPE&amp;CodigoInstituicao=1&quot;,&quot;CategoryType&quot;:0},{&quot;description&quot;:&quot;Outros avisos (Aviso aos Acionistas)&quot;,&quot;code&quot;:&quot;ITSA4&quot;,&quot;companyName&quot;:&quot;ITAUSA&quot;,&quot;normalizedName&quot;:&quot;itausa&quot;,&quot;companyId&quot;:345,&quot;type&quot;:1,&quot;group&quot;:null,&quot;typeDesc&quot;:&quot;Relatório&quot;,&quot;day&quot;:3,&quot;date&quot;:&quot;03/01/2023&quot;,&quot;url&quot;:&quot;https://www.rad.cvm.gov.br/ENET/frmDownloadDocumento.aspx?Tela=ext&amp;numSequencia=570858&amp;numVersao=1&amp;numProtocolo=1046128&amp;descTipo=IPE&amp;CodigoInstituicao=1&quot;,&quot;CategoryType&quot;:0}],&quot;meetings&quot;:[],&quot;eventDays&quot;:[{&quot;Day&quot;:2,&quot;Month&quot;:1,&quot;Year&quot;:2023,&quot;Types&quot;:[1,2,3]},{&quot;Day&quot;:4,&quot;Month&quot;:1,&quot;Year&quot;:2023,&quot;Types&quot;:[1]},{&quot;Day&quot;:3,&quot;Month&quot;:1,&quot;Year&quot;:2023,&quot;Types&quot;:[1]}],&quot;holidays&quot;:[],&quot;Months&quot;:{&quot;1&quot;:&quot;JANEIRO&quot;,&quot;2&quot;:&quot;FEVEREIRO&quot;,&quot;3&quot;:&quot;MARÇO&quot;,&quot;4&quot;:&quot;ABRIL&quot;,&quot;5&quot;:&quot;MAIO&quot;,&quot;6&quot;:&quot;JUNHO&quot;,&quot;7&quot;:&quot;JULHO&quot;,&quot;8&quot;:&quot;AGOSTO&quot;,&quot;9&quot;:&quot;SETEMBRO&quot;,&quot;10&quot;:&quot;OUTUBRO&quot;,&quot;11&quot;:&quot;NOVEMBRO&quot;,&quot;12&quot;:&quot;DEZEMBRO&quot;},&quot;TotalEvents&quot;:4}">
                                    <div class="w-100">
                                        <div class="list">
                                        </div>
                                        <div class="pagination-control d-flex justify-center align-items-center mt-3">
                                            <div class="select-wrapper"><input class="select-dropdown dropdown-trigger"
                                                    type="text" readonly="true"
                                                    data-target="select-options-42102e97-0e3f-fcb8-1885-4a574562a036"
                                                    aria-label="Páginação dos eventos do calendário">
                                                <ul id="select-options-42102e97-0e3f-fcb8-1885-4a574562a036"
                                                    class="dropdown-content select-dropdown" tabindex="0"></ul><svg
                                                    class="caret" height="24" viewBox="0 0 24 24" width="24"
                                                    xmlns="http://www.w3.org/2000/svg">
                                                    <path d="M7 10l5 5 5-5z"></path>
                                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                                </svg><select aria-label="Páginação dos eventos do calendário"
                                                    id="total-page-d6c0c8c7-67da-47a2-94c9-6dbe90857413" class=" small"
                                                    data-formselect="" tabindex="-1">
                                                </select>
                                            </div>
                                            <ul class="pagination m-0 w-auto"
                                                data-total-page="#total-page-d6c0c8c7-67da-47a2-94c9-6dbe90857413"></ul>
                                        </div>
                                    </div>
                                    <div class="no-events-msg grey darken-1 m-auto p-4 rounded text-center w-sm-70 white-text mt-4 mb-4"
                                        style="display:none">
                                        <span class="fs-5 fw-100_">Não há eventos para este dia</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class=" pt-7">
            <div class="container img-lazy-group">
                <h2 class="fs-4 fs-xs-5 mt-0 mb-5 fw-900 text-main">MAIS VISUALIZADOS</h2>
                <div class="w-100 most-viewd d-flex flex-wrap flex-lg-nowrap">
                    <div class="
                            w-50 w-xs-33 w-lg-16_6
                            pl-1 pr-1
                            mb-3
                            ">
                        <a title="Ir até o detalhe do fundo &#39;PETRO RIO&#39;"
                            aria-label="Ir até o detalhe do fundo &#39;PETRO RIO&#39;"
                            href="https://statusinvest.com.br/acoes/prio3">
                            <span class="logo bg-lazy waves-effect waves-light"
                                data-img="url(/img/company/square/406.jpg?v=8?v=8)"></span>
                            <div class="desc">
                                <div>
                                    <span class="code">PRIO3</span>
                                    <h3 class="name fs-3 m-0 m-n mt-0 truncate" title="PETRO RIO">PETRO RIO</h3>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="
                            w-50 w-xs-33 w-lg-16_6
                            pl-1 pr-1
                            mb-3
                            ">
                        <a title="Ir até o detalhe do fundo &#39;BANCO BRASIL&#39;"
                            aria-label="Ir até o detalhe do fundo &#39;BANCO BRASIL&#39;"
                            href="https://statusinvest.com.br/acoes/bbas3">
                            <span class="logo bg-lazy waves-effect waves-light"
                                data-img="url(/img/company/square/331.jpg?v=8?v=8)"></span>
                            <div class="desc">
                                <div>
                                    <span class="code">BBAS3</span>
                                    <h3 class="name fs-3 m-0 m-n mt-0 truncate" title="BANCO BRASIL">BANCO BRASIL</h3>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="
                            w-50 w-xs-33 w-lg-16_6
                            pl-1 pr-1
                            mb-3
                            ">
                        <a title="Ir até o detalhe do fundo &#39;IRB&#39;"
                            aria-label="Ir até o detalhe do fundo &#39;IRB&#39;"
                            href="https://statusinvest.com.br/acoes/irbr3">
                            <span class="logo bg-lazy waves-effect waves-light"
                                data-img="url(/img/company/square/360.jpg?v=8?v=8)"></span>
                            <div class="desc">
                                <div>
                                    <span class="code">IRBR3</span>
                                    <h3 class="name fs-3 m-0 m-n mt-0 truncate" title="IRB">IRB</h3>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="
                            w-50 w-xs-33 w-lg-16_6
                            pl-1 pr-1
                            mb-3
                            ">
                        <a title="Ir até o detalhe do fundo &#39;COGNA ON&#39;"
                            aria-label="Ir até o detalhe do fundo &#39;COGNA ON&#39;"
                            href="https://statusinvest.com.br/acoes/cogn3">
                            <span class="logo bg-lazy waves-effect waves-light"
                                data-img="url(/img/company/square/253.jpg?v=8?v=8)"></span>
                            <div class="desc">
                                <div>
                                    <span class="code">COGN3</span>
                                    <h3 class="name fs-3 m-0 m-n mt-0 truncate" title="COGNA ON">COGNA ON</h3>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="
                            w-50 w-xs-33 w-lg-16_6
                            pl-1 pr-1
                            mb-3
                            ">
                        <a title="Ir até o detalhe do fundo &#39;ITAUSA&#39;"
                            aria-label="Ir até o detalhe do fundo &#39;ITAUSA&#39;"
                            href="https://statusinvest.com.br/acoes/itsa4">
                            <span class="logo bg-lazy waves-effect waves-light"
                                data-img="url(/img/company/square/345.jpg?v=8?v=8)"></span>
                            <div class="desc">
                                <div>
                                    <span class="code">ITSA4</span>
                                    <h3 class="name fs-3 m-0 m-n mt-0 truncate" title="ITAUSA">ITAUSA</h3>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="
                            w-50 w-xs-33 w-lg-16_6
                            pl-1 pr-1
                            mb-3
                            ">
                        <a title="Ir até o detalhe do fundo &#39;PETROBRAS&#39;"
                            aria-label="Ir até o detalhe do fundo &#39;PETROBRAS&#39;"
                            href="https://statusinvest.com.br/acoes/petr4">
                            <span class="logo bg-lazy waves-effect waves-light"
                                data-img="url(/img/company/square/408.jpg?v=8?v=8)"></span>
                            <div class="desc">
                                <div>
                                    <span class="code">PETR4</span>
                                    <h3 class="name fs-3 m-0 m-n mt-0 truncate" title="PETROBRAS">PETROBRAS</h3>
                                </div>
                            </div>
                        </a>
                    </div>
                </div>
            </div>
        </div>
        <div style="display:none" class="ignore">
            <div id="main-search-modal-template">
                <div class="main-search-modal-container d-flex flex-column">
                    <div>
                        <div class="input-field m-0 ">
                            <i class="material-icons prefix">search</i>
                            <input type="text" name="search-asset" class="input" placeholder="">
                        </div>
                    </div>
                    <div class="items-container w-100 pl-md-3"></div>
                    <ul class="search-result collection"></ul>
                    <div class="modal-footer p-0 pt-2 m-0 ">
                        <button type="button"
                            class="btn-continue waves-effect btn btn-main btn-xsmall modal-close pl-1 pr-1 pl-sm-2 pr-sm-2 m-0">CONTINUAR</button>
                    </div>
                </div>
            </div>
            <ul id="main-search-modal-result-template">
                <li class="collection-item pl-3 pr-3" data-item="{_code}">
                    <div title="Ir até o ativo &#39;{code}&#39;" class="line-avatar-name-variation">
                        <div class="d-flex align-items-center">
                            <div>
                                <div class="avatar"
                                    style="background-image:url(/img/company/{categoryPath}avatar/{parentId}.jpg?v=8)">
                                </div>
                            </div>
                            <div class="info w-100">
                                <div class="">
                                    <div class="truncate lh-3">
                                        <span class="code text-main-green" title="ticker/código do ativo">{code}
                                            -</span>
                                        <span class="name" title="Nome do ativo"> {name}</span>
                                    </div>
                                    <div class="align-items-center d-flex values">
                                        <span class="value mb-0 value-1 mr-1" title="Preço atual do ativo">
                                            <small class="mark price fw-100">R$</small>
                                            <span>{price}</span>
                                        </span>
                                        <span class="value mb-0 value-2 mr-1" title="Valor atual">
                                            <small class="mark fw-100"></small>
                                            <span>{price} %</span>
                                            <span class="d-inline-block ml-1" title="">{helper}</span>
                                        </span>
                                        <span class="d-inline-block mr-1 variation variation-1"
                                            title="Variação atual no preço do ativo">
                                            <span class="other-value d-flex">
                                                <i class="icon material-icons {variationColor} fs-6">{variationIcon}</i>
                                                <span>{variation}</span>
                                                <span class="mark fs-6 fw-100">%</span>
                                            </span>
                                        </span>
                                        <span class="d-inline-block mr-1 variation variation-2"
                                            title="Variação atual no preço do ativo">
                                            <span class="other-value d-flex">
                                                <span>{variation}</span>
                                                <span class="mark fs-6 fw-100">%</span>
                                                <span class="fs-2 ml-1 fw-600">(12m)</span>
                                            </span>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <button type="button" data-id="{id}" data-code="{code}" data-category="{type}"
                                    data-normalizedname="{normalizedName}"
                                    class="btn-item-add btn-small btn btn-secondary-dark btn-xsmall pl-1 pr-1 pl-ms-2 pr-md-2">
                                    <span class="d-none d-sm-block">ADICIONAR</span>
                                    <span class="d-block d-sm-none"><i class="material-icons">add</i></span>
                                </button>
                                <button type="button" data-code="{_code}" data-category="{type}"
                                    class="btn-small btn-item-remove btn-secondary-dark btn-xsmall btn-outline btn-flat pl-1 pr-1 pl-ms-2 pr-md-2">
                                    <span class="d-none d-sm-block">REMOVER</span>
                                    <span class="d-block d-sm-none"><i class="material-icons">close</i></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </li>
            </ul>
            <ul id="assetmain-search-modal-result-template">
                <li class="collection-item pl-3 pr-3 assetmain-search-modal-result" data-item="{_code}">
                    <div title="Ir até o ativo &#39;{code}&#39;" class="line-avatar-name-variation">
                        <div class="d-flex align-items-center">
                            <div>
                                <div class="avatar"
                                    style="background-image:url(/img/company/{categoryPath}avatar/{parentId}.jpg?v=8)">
                                </div>
                            </div>
                            <div class="info w-100">
                                <div class="">
                                    <div class="truncate lh-3">
                                        <span class="name" title="Nome do ativo"> {name}</span>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <button type="button" data-id="{id}" data-code="{code}" data-category="{type}"
                                    data-normalizedname="{normalizedName}"
                                    class="btn-item-add btn-small btn btn-secondary-dark btn-xsmall pl-1 pr-1 pl-ms-2 pr-md-2">
                                    <span class="d-none d-sm-block">ADICIONAR</span>
                                    <span class="d-block d-sm-none"><i class="material-icons">add</i></span>
                                </button>
                                <button type="button" data-code="{_code}" data-category="{type}"
                                    class="btn-small btn-item-remove btn-secondary-dark btn-xsmall btn-outline btn-flat pl-1 pr-1 pl-ms-2 pr-md-2">
                                    <span class="d-none d-sm-block">REMOVER</span>
                                    <span class="d-block d-sm-none"><i class="material-icons">close</i></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </li>
            </ul>
            <ul id="main-search-inside-modal-result-template">
                <li class="collection-item p-1" data-item="{_code}">
                    <div title="Ir até o ativo &#39;{code}&#39;" class="line-avatar-name-variation">
                        <div class="d-flex align-items-center">
                            <div>
                                <div class="avatar"
                                    style="background-image:url(/img/company/{categoryPath}avatar/{parentId}.jpg?v=8)">
                                </div>
                            </div>
                            <div class="info w-100">
                                <div class="">
                                    <div class="truncate lh-3">
                                        <span class="code text-main-green" title="ticker/código do ativo">{code}
                                            -</span>
                                        <span class="name" title="Nome do ativo"> {name}</span>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <button type="button" data-id="{id}" data-code="{code}" data-category="{type}"
                                    data-normalizedname="{normalizedName}"
                                    class="btn-select btn-small btn btn-secondary-dark btn-xsmall pl-1 pr-1">
                                    <span class=""><i class="material-icons">add</i></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </li>
            </ul>
            <ul id="main-search-modal-sugestion-template">
                <li class="collection-item pl-3 pr-3" data-item="{_code}">
                    <div title="Ir até o ativo &#39;{code}&#39;" class="line-avatar-name-variation">
                        <div class="d-flex align-items-center">
                            <div>
                                <div class="avatar"
                                    style="background-image:url(/img/company/{categoryPath}avatar/{parentId}.jpg?v=8)">
                                </div>
                            </div>
                            <div class="info w-100">
                                <div class="">
                                    <div class="truncate lh-3">
                                        <span class="code text-main-green d-block"
                                            title="ticker/código do ativo">{code}</span>
                                        <span class="name" title="Nome do ativo"> {name}</span>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <button type="button" data-id="{id}" data-code="{code}" data-category="{type}"
                                    data-normalizedname="{normalizedName}"
                                    class="btn-item-add btn-small btn btn-secondary-dark btn-xsmall pl-1 pr-1 pl-ms-2 pr-md-2">
                                    <span class="d-none d-sm-block">ADICIONAR</span>
                                    <span class="d-block d-sm-none"><i class="material-icons">add</i></span>
                                </button>
                                <button type="button" data-code="{_code}" data-category="{type}"
                                    class="btn-small btn-item-remove btn-secondary-dark btn-xsmall btn-outline btn-flat pl-1 pr-1 pl-ms-2 pr-md-2">
                                    <span class="d-none d-sm-block">REMOVER</span>
                                    <span class="d-block d-sm-none"><i class="material-icons">close</i></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </li>
            </ul>
            <div id="main-search-item-template">
                <div class="chip" data-item="{code}">
                    {title}
                    <i class="close material-icons" data-code="{code}" data-category="{category}">close</i>
                </div>
            </div>
            <div id="assetmain-search-item-template">
                <div class="chip" data-item="{code}">
                    {title}
                    <i class="close material-icons" data-code="{code}" data-category="{category}">close</i>
                </div>
            </div>
        </div>
        <div id="template" style="display:none">
            <div id="indicators-historical-modal-template">
                <div class=" ">
                    <div class="header-value d-md-flex align-items-center justify-between w-100 pr-md-3">
                        <div class="w-100 ">
                            <div
                                class="values d-flex flex-wrap justify-center justify-md-between flex-sm-nowrap align-items-center w-100 w-lg-85">
                                <div class="w-50 w-sm-auto">
                                    <span class="title">Média</span>
                                    <strong class="">{avg_F}</strong>
                                </div>
                                <div class="w-50 w-sm-auto">
                                    <span class="title">Atual</span>
                                    <strong class="">{actual_F} <small
                                            class="d-block d-sm-inline-block">({avgDifference_F})</small></strong>
                                </div>
                                <div class="w-50 w-sm-auto">
                                    <span class="title">Menor valor</span>
                                    <strong class="">{minValue_F} <small>({minValueRank_F})</small></strong>
                                </div>
                                <div class="w-50 w-sm-auto">
                                    <span class="title">Maior valor</span>
                                    <strong class="">{maxValue_F} <small>({maxValueRank_F})</small></strong>
                                </div>
                            </div>
                            <div class="assets pl-md-3 pr-md-3">
                                <table class="fs-2 w-100">
                                    <tbody>
                                        <tr>
                                            <th></th>
                                            <th>MÉDIA</th>
                                            <th>ATUAL</th>
                                            <th>MENOR VALOR</th>
                                            <th>MAIOR VALOR</th>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div
                            class="btn-toggle btn-indicator-chart-type d-flex justify-center pt-1 pb-2 w-100 w-md-auto">
                            <button title="Gráfico de linha" type="button" data-value="0"
                                class="pl-1 pr-1 btn-small btn btn-main btn-flat active">
                                <i class="material-icons fs-4">show_chart</i>
                            </button>
                            <button title="Gráfico de barra" type="button" data-value="1"
                                class="pl-1 pr-1 btn-small btn btn-main btn-flat  ">
                                <i class="material-icons fs-4">bar_chart</i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="show-empty-callback show-initial-callback">
                    <div id="indicators-historical-chart-{id}" tabindex="0" role="region" class="chart-container">
                        <div class="main-charts"></div>
                    </div>
                    <span class="graph-empty fs-4 fw-100 grey-text text-center text-darken-1 uppercase"
                        style="display:none">
                        Não há informações
                    </span>
                </div>
            </div>
        </div>
    </main>
    <div class="term container pl-0 pr-0 pt-7 pb-7 mt-md-4 mb-md-4">
        <div class="text-align-center fs-5 text-main-green-dark">
            <span class="fw-900">TERMOS</span> DO MERCADO
        </div>
        <div class="letters d-flex flex-wrap justify-center mt-2">
            <a href="https://statusinvest.com.br/termos/#">#</a>
            <a title="Ver artigos que iniciam com a letra &#39;a&#39;" href="https://statusinvest.com.br/termos/a">A</a>
            <a title="Ver artigos que iniciam com a letra &#39;b&#39;" href="https://statusinvest.com.br/termos/b">B</a>
            <a title="Ver artigos que iniciam com a letra &#39;c&#39;" href="https://statusinvest.com.br/termos/c">C</a>
            <a title="Ver artigos que iniciam com a letra &#39;d&#39;" href="https://statusinvest.com.br/termos/d">D</a>
            <a title="Ver artigos que iniciam com a letra &#39;e&#39;" href="https://statusinvest.com.br/termos/e">E</a>
            <a title="Ver artigos que iniciam com a letra &#39;f&#39;" href="https://statusinvest.com.br/termos/f">F</a>
            <a title="Ver artigos que iniciam com a letra &#39;g&#39;" href="https://statusinvest.com.br/termos/g">G</a>
            <a title="Ver artigos que iniciam com a letra &#39;h&#39;" href="https://statusinvest.com.br/termos/h">H</a>
            <a title="Ver artigos que iniciam com a letra &#39;i&#39;" href="https://statusinvest.com.br/termos/i">I</a>
            <a title="Ver artigos que iniciam com a letra &#39;j&#39;" href="https://statusinvest.com.br/termos/j">J</a>
            <a title="Ver artigos que iniciam com a letra &#39;k&#39;" href="https://statusinvest.com.br/termos/k">K</a>
            <a title="Ver artigos que iniciam com a letra &#39;l&#39;" href="https://statusinvest.com.br/termos/l">L</a>
            <a title="Ver artigos que iniciam com a letra &#39;m&#39;" href="https://statusinvest.com.br/termos/m">M</a>
            <a title="Ver artigos que iniciam com a letra &#39;n&#39;" href="https://statusinvest.com.br/termos/n">N</a>
            <a title="Ver artigos que iniciam com a letra &#39;o&#39;" href="https://statusinvest.com.br/termos/o">O</a>
            <a title="Ver artigos que iniciam com a letra &#39;p&#39;" href="https://statusinvest.com.br/termos/p">P</a>
            <a title="Ver artigos que iniciam com a letra &#39;q&#39;" href="https://statusinvest.com.br/termos/q">Q</a>
            <a title="Ver artigos que iniciam com a letra &#39;r&#39;" href="https://statusinvest.com.br/termos/r">R</a>
            <a title="Ver artigos que iniciam com a letra &#39;s&#39;" href="https://statusinvest.com.br/termos/s">S</a>
            <a title="Ver artigos que iniciam com a letra &#39;t&#39;" href="https://statusinvest.com.br/termos/t">T</a>
            <a title="Ver artigos que iniciam com a letra &#39;u&#39;" href="https://statusinvest.com.br/termos/u">U</a>
            <a title="Ver artigos que iniciam com a letra &#39;v&#39;" href="https://statusinvest.com.br/termos/v">V</a>
            <a title="Ver artigos que iniciam com a letra &#39;w&#39;" href="https://statusinvest.com.br/termos/w">W</a>
            <a title="Ver artigos que iniciam com a letra &#39;x&#39;" href="https://statusinvest.com.br/termos/x">X</a>
            <a title="Ver artigos que iniciam com a letra &#39;y&#39;" href="https://statusinvest.com.br/termos/y">Y</a>
            <a title="Ver artigos que iniciam com a letra &#39;z&#39;" href="https://statusinvest.com.br/termos/z">Z</a>
        </div>
    </div>
    <footer role="contentinfo" id="main-footer" class="img-lazy-group-now">
        <div class="container white-text">
            <div role="navigation" aria-label="Footer" class="social pb-5 pt-5 text-center">
                <a href="https://www.youtube.com/channel/UC7k3dDEfclcB07Deoy41D6g" title="Ir para perfil no YouTube">
                    <img src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/dot-30.png" height="30" width="30"
                        data-img="/img/social/youtube-w.png" class="m-1" style="width:30px" alt="Perfil do YouTube">
                </a>
                <a href="https://www.instagram.com/status.invest/" class="ml-3 mr-4"
                    title="Ir para perfil no Instagram">
                    <img src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/dot-30.png" height="30" width="30"
                        data-img="/img/social/instagram-w.png" class="m-1" style="width:30px" alt="Perfil do Instagram">
                </a>
                <a href="https://twitter.com/statusInvestBR" title="Ir para perfil no Twitter">
                    <img src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/dot-30.png" height="30" width="30"
                        data-img="/img/social/twitter-w.png" class="m-1" style="width:30px" alt="Perfil do Twitter">
                </a>
            </div>
            <p class="warning-text">
                Todas as informações apresentadas tem caráter
                informativo e são provenientes de fontes públicas como <a rel="noopener noreferrer nofollow"
                    target="_blank" href="http://www.b3.com.br/pt_br/">B3</a>, <a rel="noreferrer" target="_blank"
                    href="http://www.cvm.gov.br/">CVM</a>, <a rel="noreferrer" target="_blank"
                    href="https://tesouro.fazenda.gov.br/">Tesouro Nacional</a>, etc.
                e de dados calculados a partir das informações coletadas. O StatusInvest não tem o objetivo de fazer
                sugestão de
                compra ou venda de ativos, sendo assim, não se responsabiliza pelas decisões e caminhos tomados a partir
                da
                análise das informações aqui apresentadas.
            </p>
            <div class="site-links d-sm-flex justify-center fw-100 pb-3 pb-sm-5 fs-3 lh-3 ">
                <div class="">
                    <strong class="title mb-3 fw-700">ASSINATURAS</strong>
                    <a class="white-text" href="https://lp.statusinvest.com.br/planos/">
                        PLANO <strong>BULL</strong>
                    </a>
                    <a class="white-text" href="https://lp.statusinvest.com.br/planos/modulo/forecast">
                        MÓDULO <strong>FORECAST</strong>
                    </a>
                </div>
                <div class="">
                    <strong class="title mb-3 fw-700">STATUS INVEST</strong>
                    <a href="https://statusinvest.com.br/politica-de-privacidade" class="white-text"
                        title="Ir para Política de privacidade">
                        Política de privacidade
                    </a>
                    <a href="https://statusinvest.com.br/condicoes-de-uso" class="white-text"
                        title="Ir para Termos de uso">
                        Termos de&nbsp;uso
                    </a>
                    <a class="user-report-message d-flex align-items-center white-text c-pointer" role="button"
                        data-name="" data-email="">
                        Fale conosco
                        <i style="max-width:23px" class="material-icons fs-3_5 lh-3 ml-1">bug_report</i>
                    </a>
                </div>
            </div>
            <span class="d-block text-center pb-0  fs-3 fw-100">
                <span class="">
                    Copyright © 2023 <b class="fw-900">StatusInvest</b>. Todos os direitos reservados
                </span>
            </span>
            <span class="d-block text-center pb-5  fs-3 fw-100">
                <span>
                    Copyright © 2023 <b class="fw-900">FactSet</b>
                </span>
            </span>
        </div>
    </footer>
    <div id="cei-report-aviso-modal" class="modal" style="display:none">
        <div class="modal-content bg-main-gd p-2">
            <div class="header d-flex justify-end">
                <button type="button" class="waves-effect modal-close btn btn-flat btn-floating btn-main  ">
                    <i class="material-icons">close</i>
                </button>
            </div>
            <div class="white-text ">
                <div class="text-center d-block fs-3_5 fs-sm-4 uppercase fw-100 mb-3">
                    <b class="fw-600">Importante:</b> Limitações do CEI
                </div>
                <ul class="collection">
                    <li class="collection-item bg-secondary-color-gd-h">
                        <div class="fw-700 uppercase">1 - O CEI mantem as transações de apenas 18 meses</div>
                        <div class="mt-1 lh-3_5">
                            <div>
                                Nos baseamos nas transações para compor sua carteira, então os ativos que tiveram algum
                                tipo de transação antes deste período terá a <b>'quantidade' divergindo com o CEI.</b>
                            </div>
                            <div class="mt-1 mb-1">
                                <b>Está assim por um motivo: </b> precisamos de todas as transações para calcular de
                                forma precisa sua
                                carteira, desde seu preço médio por ativo até a rentabilidade.
                            </div>
                            <div>
                                <b>Solução: </b>Nesta situação, o ideal é cadastrar estas transações antigas via
                                importação de arquivo.
                            </div>
                        </div>
                    </li>
                    <li class="transparent collection-item">
                        <div class="fw-700 uppercase">2 - Não registra transação de IPO e subscrição </div>
                        <div class="lh-3_5">
                            Nesta situação, é necessário cadastrar estas transações manualmente.
                        </div>
                    </li>
                    <li class="transparent collection-item">
                        <div class="fw-700 uppercase">3 - Não informa total de taxas, corretagens e impostos</div>
                        <div class="lh-3_5">
                            Necessários para ter o real valor por transação feita, assim como no calculo de IR
                        </div>
                    </li>
                    <li class="transparent collection-item">
                        <div class="fw-700 uppercase">4 - Delay de 2 dias para os ativos estarem disponíveis</div>
                        <div class="lh-3_5">
                            As compras/vendas feitas irão estar disponíveis somente após este tempo
                        </div>
                    </li>
                </ul>
                <span class="d-block text-center fs-3_5 fw-100 mb-4 lh-4 ">
                    Caso queira ter sua <b class="fw-600">carteira</b> sempre <b class="fw-600">atualizada</b>
                    praticamente
                    <b class="fw-600">em tempo real</b> com base nas suas transações, faça a <b class="fw-600">adição
                        manual</b>
                    das transações
                </span>
                <hr>
                <div class="text-align-center pb-3">
                    <div class="fs-4  mb-3">A explicação acima resolveu seu problema?</div>
                    <div>
                        <button class="btn-sim btn btn-secondary btn-small" type="button"><strong>SIM!</strong>
                            o/</button>
                        <button class="btn-nao btn btn-white btn-outline btn-small"
                            type="button"><strong>Não</strong></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="plano-invalido-modal" class="modal" style="display:none">
        <div class="modal-content bg-main-gd-h p-2 p-sm-3">
            <div class="header d-flex justify-end">
                <button type="button" class="waves-effect modal-close btn btn-flat btn-floating btn-main  ">
                    <i class="material-icons">close</i>
                </button>
            </div>
            <div>
                <a role="button" data-href="https://lp.statusinvest.com.br/planos/">
                    <div class="plano">
                    </div>
                </a>
            </div>
        </div>
    </div>
    <div id="plano-entrega-modal" class="modal full-height" style="display:none">
        <div class="header d-flex justify-end">
            <button type="button" class="waves-effect modal-close btn btn-flat btn-floating btn-main  ">
                <i class="material-icons">close</i>
            </button>
        </div>
        <div class="modal-content  p-2 p-sm-3">
            <div>
                <div class="forecast">
                </div>
            </div>
        </div>
    </div>
    <div style="display:none">
        <div id="modal-resume-item-wallet-template">
            <div>
                <div class="card p-1  w-100 ">
                    <div class="input-field m-0 mt-2 control-small">
                        <select id="modalWallet" class="input-small">
                        </select>
                        <label>Carteira</label>
                    </div>
                </div>
                <div class="main-cards mt-4">
                    <div class="d-flex flex-wrap justify-between align-items-center">
                        <div class="w-50  w-sm-auto pt-2 pb-2 pl-1 pr-1">
                            <span class="d-block uppercase lh-3 fs-2 fw-600">Preço médio</span>
                            <div class="d-flex align-items-center fw-700 lh-3">
                                <span class="" data-item="unitValue_F">-</span>
                            </div>
                            <div class="small mt-1">
                                <span class="d-block uppercase lh-3 fs-2 fw-600">Preço atual</span>
                                <div class="d-flex align-items-center fw-700 lh-3">
                                    <span class="" data-item="price_F">-</span>
                                </div>
                            </div>
                        </div>
                        <div class="separador d-none d-sm-block"></div>
                        <div class="w-50 w w-sm-auto pt-2 pb-2 pl-1 pr-1">
                            <span class="d-block uppercase lh-3 fs-2 fw-600">Quantidade</span>
                            <div class="d-flex align-items-center fw-700 lh-3">
                                <span class="" data-item="quantity_F">-</span>
                            </div>
                            <div class="small mt-1">
                                <span class="d-block uppercase lh-3 fs-2 fw-600">Patrimônio</span>
                                <div class="d-flex align-items-center fw-700 lh-3">
                                    <span class="" data-item="currentValue_F">-</span>
                                </div>
                            </div>
                        </div>
                        <div class="separador d-none d-sm-block"></div>
                        <div class="w-50  w-sm-auto pt-2 pb-2 pl-1 pr-1">
                            <span class="d-block uppercase lh-3 fs-2 fw-600">Variação HOJE</span>
                            <div class="d-flex align-items-center fw-700 lh-3">
                                <div class="variation_icon d-flex align-items-center fw-700 lh-3">
                                    <span class="icon"></span>
                                    <span class="" data-item="variation_F">-</span><span class="fw-100">%</span>
                                </div>
                            </div>
                            <div class="small mt-1">
                                <span class="d-block uppercase lh-3 fs-2 fw-600">Valor</span>
                                <div class="d-flex align-items-center fw-700 lh-3">
                                    <span class="" data-item="dayValue_F">-</span>
                                </div>
                            </div>
                        </div>
                        <div class="separador d-none d-sm-block"></div>
                        <div class="w-50  w-sm-auto pt-2 pb-2 pl-1 pr-1">
                            <span class="d-block uppercase lh-3 fs-2 fw-600">Variação total</span>
                            <div class="d-flex align-items-center fw-700 lh-3">
                                <span class="profitabilityPercent_icon">
                                    <span class="icon"></span>
                                    <span class="" data-item="profitabilityPercent_F">-</span><span
                                        class="fw-100">%</span>
                                </span>
                            </div>
                            <div class="small mt-1">
                                <span class="d-block uppercase lh-3 fs-2 fw-600">Valor</span>
                                <div class="d-flex align-items-center fw-700 lh-3">
                                    <span class="" data-item="profitabilityValue_F">-</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="resumes">
                    <div class="profitability">
                        <div class="d-flex justify-between align-items-center mb-2">
                            <div class="m-0 h3">
                                Rentabilidade
                                <i data-position="top"
                                    class="ml-1 v-align-middle material-icons help-icon tooltipped tooltipped-html fs-3"
                                    data-tooltip="
&lt;div class=&quot;tooltipped-html-template fw-100&quot;&gt;
Se o ativo tem menos de 2 anos na carteira, será com base na data que ele iniciou, caso contrário será no máximo 2 anos.
&lt;br&gt;
&lt;br&gt;
&lt;strong class=&quot;fw-700 text-main-secondary&quot;&gt;Ativo carteira:&lt;/strong&gt;
Rentabilidade com base nas transações feitas na carteira
&lt;br&gt;
&lt;strong class=&quot;fw-700 text-main-secondary&quot;&gt;Ativo mercado:&lt;/strong&gt;
Rentabilidade com base no ativo com base nas variações do mercado
 &lt;/div&gt;
">
                                    help_outline

                                </i>
                            </div>
                            <a title="Ir para a tela de rentabilidade"
                                href="https://statusinvest.com.br/carteira/rentabilidade"
                                class="link btn btn-secondary btn-xsmall btn-outline btn-flat pl-1 pr-1">
                                <i class="material-icons">arrow_forward</i>
                            </a>
                        </div>
                        <div class="chart-container p-relative">
                            <div class="main-charts">
                            </div>
                        </div>
                    </div>
                    <div class="provents ">
                        <div class="d-flex justify-between align-items-center mb-2">
                            <div class="m-0 h3">
                                Proventos <small class="d-block d-sm-inline-block">(semestral, últ. 5 anos)</small>
                            </div>
                            <a title="Ir para a tela de proventos" href="https://statusinvest.com.br/carteira/proventos"
                                class="link btn btn-secondary btn-xsmall btn-outline btn-flat pl-1 pr-1">
                                <i class="material-icons">arrow_forward</i>
                            </a>
                        </div>
                        <div class="chart-container p-relative">
                            <div class="main-charts ">
                            </div>
                        </div>
                    </div>
                    <div class="transitions">
                        <div class="d-flex justify-between align-items-center mb-2">
                            <div class="m-0 h3">
                                Transações
                            </div>
                            <a title="Ir para a tela de Transações"
                                href="https://statusinvest.com.br/carteira/transacao"
                                class="link btn btn-secondary btn-xsmall btn-outline btn-flat pl-1 pr-1">
                                <i class="material-icons">arrow_forward</i>
                            </a>
                        </div>
                        <div class="groups-container p-relative">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="main-search" style="display:none;" class="closed-main-search">
        <div role="search" class="input-form">
            <span class="twitter-typeahead" style="position: relative; display: inline-block;"><input type="text"
                    class="Typeahead-input input tt-hint" readonly="" autocomplete="off" spellcheck="false"
                    tabindex="-1" dir="ltr"
                    style="position: absolute; top: 0px; left: 0px; border-color: transparent; box-shadow: none; opacity: 1; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);"><input
                    type="text" class="Typeahead-input input tt-input"
                    placeholder="Busque ações, FIIs, índices, ETFs, etc" autocomplete="off" spellcheck="false"
                    dir="auto" style="position: relative; vertical-align: top; background-color: transparent;">
                <pre aria-hidden="true"
                    style="position: absolute; visibility: hidden; white-space: pre; font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen-Sans, Ubuntu, Cantarell, &quot;Helvetica Neue&quot;, sans-serif; font-size: 21px; font-style: normal; font-variant: normal; font-weight: 400; word-spacing: 0px; letter-spacing: 0px; text-indent: 0px; text-rendering: auto; text-transform: none;"></pre>
            </span>
            <span class="icon">
                <i class="load text-main-secondary material-icons prefix">sync</i>
            </span>
            <span class="close">
                <i class="material-icons">close</i>
            </span>
        </div>
        <div class="Typeahead-menu">
            <div class="tt-dataset tt-dataset-0"></div>
        </div>
        <div class="advanced-search-link">
            <span class="or d-block fw-900 mt-1 mt-md-3 text-center">OU</span>
            <div class="d-flex justify-between align-items-center bg-main-gd-h">
                <div class="h4">
                    BUSCA <span class="fw-900">AVANÇADA</span>
                </div>
                <div class="d-flex justify-between">
                    <a href="https://statusinvest.com.br/acoes/busca-avancada"
                        class="waves-effect btn btn-white fw-900 text-main-green">Ações</a>
                    <a href="https://statusinvest.com.br/fundos-imobiliarios/busca-avancada"
                        class="waves-effect btn btn-white fw-900 ml-1 ml-md-3 text-main-secondary">FIIs</a>
                </div>
            </div>
        </div>
        <div class="back">
        </div>
    </div>
    <div class="auth-things" style="display:none">
        <div id="auth-modal" class="modal as-login">
            <div class="modal-content">
                <div class="header d-flex justify-end">
                    <button type="button" class="waves-effect btn-modal-close btn btn-flat btn-floating btn-main  ">
                        <i class="material-icons">close</i>
                    </button>
                </div>
                <div class="logo" style="background-image: url(/img/logo/si.4.0_400x400_sm.png)"></div>
                <div class="to-login">
                    <button id="btn-google" type="button"
                        class="waves-effect btn-block btn btn-google d-flex align-items-center justify-center w-100">
                        <div class="img mr-1" style="background-image: url(/img/social/google.png)"></div>
                        <span>Entrar com o <b>Google</b></span>
                    </button>
                    <div class="divisor fw-900 mb-2 mb-sm-4 mt-2 mb-sm-4 text-center text-main-secondary">
                        <span>OU</span>
                    </div>
                </div>
                <form data-login="" novalidate="">
                    <div class="input-field to-register mt-0">
                        <i class="material-icons prefix">perm_identity</i>
                        <input name="Name" id="Name" type="text" class="validate" required=""
                            placeholder="ex. João da Silva">
                        <label for="Name" class="active">Nome</label>
                    </div>
                    <div class="input-field to-login to-register to-forgot-password">
                        <i class="material-icons prefix">email</i>
                        <input name="Email" id="Email" type="email" class="validate" required=""
                            placeholder="ex. joao.silva@email.com.br">
                        <label for="Email" class="active">E-mail</label>
                    </div>
                    <div class="input-field to-login to-register">
                        <i class="material-icons prefix">lock</i>
                        <input name="Password" id="Password" type="password" class="validate" required=""
                            placeholder="ex. *******">
                        <label for="Password" class="active">Senha</label>
                    </div>
                    <div class="input-field to-register">
                        <i class="material-icons prefix">local_phone</i>
                        <input name="Phone" id="Phone" type="tel" class="validate" placeholder="ex. (99) 99999-9999">
                        <label for="Phone" class="active">Telefone</label>
                    </div>
                    <div class="to-register mb-4">
                        <div class="d-flex align-items-center">
                            <div class="switch">
                                <label class="d-flex align-items-center">
                                    <input id="AcceptTerms" name="AcceptTerms" type="checkbox">
                                    <span class="lever ml-0 mr-2"></span>
                                </label>
                            </div>
                            <span class="fs-3 lh-3 ">
                                Li e aceito os <a href="https://statusinvest.com.br/condicoes-de-uso"
                                    class="fw-600 waves-green termos text-main-secondary btn-politica">termos de uso e
                                    políticas de
                                    privacidade do site</a>
                            </span>
                        </div>
                    </div>
                    <div class="to-login">
                        <div class="d-flex justify-between align-items-center">
                            <button type="button"
                                class="btn-forgot-password waves-effect btn btn-small btn-flat btn-main-green">
                                <b>ESQUECEU</b> A SENHA?
                            </button>
                            <button type="submit" id="btn-login"
                                class="waves-effect btn btn-main  pl-3 pl-xs-6 pr-3 pr-xs-6 fw-700">
                                ENTRAR
                            </button>
                        </div>
                        <div class="divisor fw-100 mb-2 mb-sm-4 mt-2 mb-sm-4 text-center ">
                            <span class="fs-2 fw-600 grey-text text-darken-3">AINDA NÃO TEM UMA CONTA?</span>
                        </div>
                        <button type="button"
                            class="btn-show-register waves-effect btn-block btn btn-outline btn-flat d-flex align-items-center justify-between w-100 btn-main">
                            <span>Faça o seu <b>cadastro</b></span> <i class="material-icons">arrow_forward</i>
                        </button>
                    </div>
                    <div class="to-register">
                        <div class="d-flex justify-between align-items-center">
                            <button type="button"
                                class="btn-back-to-login waves-effect btn btn-small btn-flat btn-main-green pl-1 pr-1 pr-sm-3 pl-sm-3">
                                <i class="material-icons left">arrow_back</i> VOLTAR
                            </button>
                            <button type="submit" id="btn-register"
                                class="waves-effect btn btn-main-green pl-3 pl-xs-6 pr-3 pr-xs-6 fw-700">
                                CADASTRAR
                            </button>
                        </div>
                    </div>
                    <div class="to-forgot-password">
                        <div class="d-flex justify-between align-items-center">
                            <button type="button"
                                class="btn-back-to-login waves-effect btn btn-small btn-flat btn-main-green pl-1 pr-1 pr-sm-3 pl-sm-3">
                                <i class="material-icons left">arrow_back</i> VOLTAR
                            </button>
                            <button type="submit" class="waves-effect btn btn-secondary-dark pl-1 pl-xs-6 pr-1 pr-xs-6">
                                <b class="fw-700">RECUPERAR</b> SENHA
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div id="registered-modal" class="modal">
            <div class="modal-content bg-main-gd">
                <div class="header d-flex justify-end">
                    <button type="button" class="waves-effect modal-close btn btn-flat btn-floating btn-main  ">
                        <i class="material-icons">close</i>
                    </button>
                </div>
                <div class="register-cheers" style="background-image: url(/img/pages/auth/modal-register-cheers.png)">
                </div>
                <div class="white-text text-center">
                    <span class="text-center d-block fs-4 lh-4 fw-100_ mb-3 mt-5">
                        Obrigado por se cadastrar no
                        <span class="d-block fs-5 lh-5 fw-900">Status Invest!</span>
                    </span>
                    <span class="d-block fs-4 fw-100_ mt-4 mb-4">
                        Por <span class="fw-600">segurança</span>, enviamos um
                        <span class="d-block d-sm-inline-block"></span>
                        e-mail de <span class="fw-600">confirmação</span> para verificar seu <span
                            class="fw-600">cadastro</span>
                    </span>
                    <span class="d-block fs-3 fw-600 ">
                        Pode ter caido no spam. . .
                        <span class="d-block d-sm-inline-block"></span>dá uma olhada lá ;D
                    </span>
                </div>
            </div>
        </div>
        <div id="recover-password-modal" class="modal">
            <div class="modal-content bg-secondary">
                <div class="header d-flex justify-end">
                    <button type="button" class="waves-effect modal-close btn btn-flat btn-floating btn-main  ">
                        <i class="material-icons">close</i>
                    </button>
                </div>
                <div class="modal-password-img" style=" background-image: url(/img/pages/auth/modal-password.png)">
                </div>
                <div class="white-text text-center">
                    <span class="d-block fs-4 fw-100_ mt-5 mb-4">
                        <b>Enviamos</b> para seu <b>e-mail</b> o passo a passo de como <b>restaurar</b> a sua
                        <b>senha</b>!
                    </span>
                    <span class="d-block fs-3 fw-600 ">
                        Pode ter caido no spam. . .
                        <span class="d-block d-sm-inline-block"></span>dá uma olhada lá ;D
                    </span>
                </div>
            </div>
        </div>
        <div id="politica-modal" class="modal modal-fixed-footer">
            <div class="modal-content ">
                <div class="header d-flex justify-end">
                    <button type="button" class="waves-effect modal-close btn btn-flat btn-floating btn-main  ">
                        <i class="material-icons">close</i>
                    </button>
                </div>
                <div class="content">
                </div>
            </div>
            <div class="modal-footer d-sm-flex W-100 justify-between align-items-center">
                <div class="mt-xs-1 mt-sm-0 d-flex align-items-center text-left w-sm-60 w-md-auto">
                </div>
                <div class="d-flex justify-center w-sm-40 w-md-auto">
                    <button type="button"
                        class="btn-accept waves-effect btn btn-main modal-close pl-1 pr-1 pl-sm-2 pr-sm-2">ACEITO OS
                        TERMOS</button>
                    &nbsp;
                    <a href="https://statusinvest.com.br/acoes/itsa4#!"
                        class="modal-close waves-effect waves-green btn btn-main-green pl-1 pr-1">fechar</a>
                </div>
            </div>
        </div>
    </div>
    <div class="main-loading" style="display:none">
    </div>
    <div id="main-modal" class="modal" tabindex="0">
        <div class="modal-header d-flex align-items-center justify-between p-2">
            <div class="title fs-4 text-main lh-4 fw-700"></div>
            <button type="button" class="waves-effect modal-close btn btn-floating btn-main  ">
                <i class="material-icons">close</i>
            </button>
        </div>
        <div class="modal-content ">
            <div class="">
            </div>
        </div>
    </div>
    <aside id="left-menu-initial" class="d-lg-none">
        <ul class="">
            <li class="mercado">
                <a class="d-flex justify-between align-items-center " href="https://statusinvest.com.br/"
                    title="Mercado nacional">
                    <div class="d-flex align-items-center">
                        <div class="img-flag" style="background-image: url(/img/icon/bra.png)"></div>&nbsp;<span>MERCADO
                            NACIONAL</span>
                    </div>
                    <div>
                        <i class="material-icons">home</i>
                    </div>
                </a>
            </li>
            <li class="sub-menu">
                <a role="none" title="Ações">AÇÕES</a>
                <ul id="">
                    <li>
                        <a href="https://statusinvest.com.br/acoes"
                            title="Tudo sobre as ações listadas na bolsa de valores">
                            <b>Tudo</b> sobre ações
                        </a>
                    </li>
                    <li>
                        <a href="https://statusinvest.com.br/acoes/busca-avancada"
                            title="Pesquisa de ações a partir de suas características">
                            Busca <b>avançada</b>
                        </a>
                    </li>
                    <li>
                        <a href="https://statusinvest.com.br/ipo/acoes"
                            title="Lista dos próximos ipos da bolsa de valores">
                            Próximos <b>IPOs</b>
                        </a>
                    </li>
                    <li>
                        <a href="https://statusinvest.com.br/acoes/agenda-de-resultados" class="fs-3 novo"
                            title="Lista com a agenda de resultados das empresas">
                            AGENDA DE RESULTADOS
                        </a>
                    </li>
                </ul>
            </li>
            <li class="sub-menu">
                <a role="none" title="Fundos imobiliários">FIIs</a>
                <ul id="">
                    <li>
                        <a href="https://statusinvest.com.br/fundos-imobiliarios"
                            title="Tudo sobre os fundos imobiliários listados na bolsa de valores">
                            <b>Tudo</b> sobre FIIs
                        </a>
                    </li>
                    <li>
                        <a href="https://statusinvest.com.br/fundos-imobiliarios/busca-avancada"
                            title="Pesquisa de fundos imobiliários a partir de suas características">
                            Busca <b>avançada</b>
                        </a>
                    </li>
                </ul>
            </li>
            <li class="sub-menu">
                <a role="none" title="Fundos">Fundos</a>
                <ul id="">
                    <li>
                        <a href="https://statusinvest.com.br/fundos-de-investimento" title="Fundo de Investimento">
                            Fundo de Investimento
                        </a>
                    </li>
                    <li>
                        <a href="https://statusinvest.com.br/fiagros" title="Fiagros">
                            <b>Tudo</b> sobre Fiagros
                        </a>
                    </li>
                    <li>
                        <a href="https://statusinvest.com.br/fias" class="novo" title="FIA">
                            FIA
                        </a>
                    </li>
                    <li>
                        <a href="https://statusinvest.com.br/fidcs" class="novo" title="FIDC">
                            FIDC
                        </a>
                    </li>
                    <li>
                        <a href="https://statusinvest.com.br/fips" class="novo" title="FIP">
                            FIP
                        </a>
                    </li>
                    <li>
                        <a href="https://statusinvest.com.br/fiinfras" class="novo" title="FI-INFRA">
                            FI-INFRA
                        </a>
                    </li>
                </ul>
            </li>
            <li><a class="" href="https://statusinvest.com.br/bdrs" title="Brazilian Depositary Receipts">BDRs</a></li>
            <li><a class="" href="https://statusinvest.com.br/criptomoedas" title="Crypto">Crypto</a></li>
            <li><a href="https://statusinvest.com.br/#tesouro-section" data-goto="#tesouro-section"
                    title="Informações relevantes do tesouro direto">TESOURO</a></li>
        </ul>
        <hr class="separador">
        <ul class="">
            <li class="mercado">
                <a class="d-flex justify-between align-items-center " href="https://statusinvest.com.br/internacional"
                    title="Mercado internacional">
                    <div class="d-flex align-items-center">
                        <div class="img-flag" style="background-image: url(/img/icon/usa.png)"></div>&nbsp;<span>MERCADO
                            INTERNACIONAL</span>
                    </div>
                    <div>
                        <i class="material-icons">home</i>
                    </div>
                </a>
            </li>
            <li class="sub-menu ">
                <a role="none" title="Ações">STOCKs</a>
                <ul id="">
                    <li>
                        <a href="https://statusinvest.com.br/acoes/eua" title="Tudo sobre as stocks as ações dos eua">
                            <b>Tudo</b> sobre ações
                        </a>
                    </li>
                    <li>
                        <a href="https://statusinvest.com.br/acoes/eua/busca-avancada"
                            title="Pesquisa de stocks a partir de suas características">
                            Busca <b>avançada</b>
                        </a>
                    </li>
                </ul>
            </li>
            <li class="sub-menu ">
                <a role="none" title="Ações">REITs</a>
                <ul id="">
                    <li>
                        <a href="https://statusinvest.com.br/reits"
                            title="tudo sobre os reits: os fundos imobiliários americanos">
                            <b>Tudo</b> sobre reits
                        </a>
                    </li>
                    <li>
                        <a href="https://statusinvest.com.br/reits/busca-avancada"
                            title="Pesquisa de reits a partir de suas características">
                            Busca <b>avançada</b>
                        </a>
                    </li>
                </ul>
            </li>
            <li class="">
                <a class=" " href="https://statusinvest.com.br/etf/eua" title="Tudo sobre os ETFs americanos">
                    <b>Tudo</b> sobre ETFs
                </a>
            </li>
        </ul>
    </aside>
    <div class="aside-background d-md-none">
    </div>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/jquery-3.6.0.min.js.download"></script>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/typeahead.bundle.min.js.download" async=""></script>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/siteV2.min.js.download"></script>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/a_x_d_x_s.min.js.download" async=""></script>
    <script data-load-after="" data-src="/lib/echarts/echarts.custom.min.js?v=2.0.698.ERFTJH" async=""></script>
    <script data-load-after="" data-src="/js/components/asset/rent.history.min.js?v=2.0.698.ERFTJH" async=""></script>
    <script data-load-after="" data-src="/js/components/content.show.moreless.min.js?v=2.0.698.ERFTJH"
        async=""></script>
    <script data-load-after="" data-src="/js/components/calendar.events.min.js?v=2.0.698.ERFTJH" async=""></script>
    <script data-load-after="" data-src="/js/components/news/resume.asset.min.js?v=2.0.698.ERFTJH" async=""></script>

    <script data-load-after="" data-src="/js/components/grid.min.js?v=2.0.698.ERFTJH" async=""></script>


    <script data-load-after="" data-src="/js/components/asset/resume.compare.min.js?v=2.0.698.ERFTJH" async=""></script>


    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/resume.base.min.js.download"></script>


    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/earning.list.min.js.download"></script>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/chart.variation.min.js.download" async=""></script>
    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/chart.inline-gauge.min.js.download" async=""></script>


    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/item.wallet.min.js.download" async=""></script>


    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/acao.resume.min.js.download"></script>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>


    <script src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/loadComponents.min.js.download" async=""></script>

    <script>(function () { var js = "window['__CF$cv$params']={r:'785865c7bcfd1abf',m:'LQLrAbiIWYsPzjwxLTri2RyAKaLMmCMJ9fIzhJFgI.0-1673049463-0-AdHvYURkepBvI6mJFTPgYya9nHqIR1dETtC7nw1WXIyRW8bSVCjbMqlKuRySvtgrPcQEFnEReb6v+MDZ4bTDpXa77ryBJ/Wk/5cwuM8yBNby3xNtEeTqmO5TTqvVnl1raA==',s:[0xf220697786,0xe70a2cf35b],u:'/cdn-cgi/challenge-platform/h/b'};var now=Date.now()/1000,offset=14400,ts=''+(Math.floor(now)-Math.floor(now%offset)),_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/h/b/scripts/alpha/invisible.js?ts='+ts,document.getElementsByTagName('head')[0].appendChild(_cpo);"; var _0xh = document.createElement('iframe'); _0xh.height = 1; _0xh.width = 1; _0xh.style.position = 'absolute'; _0xh.style.top = 0; _0xh.style.left = 0; _0xh.style.border = 'none'; _0xh.style.visibility = 'hidden'; document.body.appendChild(_0xh); function handler() { var _0xi = _0xh.contentDocument || _0xh.contentWindow.document; if (_0xi) { var _0xj = _0xi.createElement('script'); _0xj.nonce = ''; _0xj.innerHTML = js; _0xi.getElementsByTagName('head')[0].appendChild(_0xj); } } if (document.readyState !== 'loading') { handler(); } else if (window.addEventListener) { document.addEventListener('DOMContentLoaded', handler); } else { var prev = document.onreadystatechange || function () { }; document.onreadystatechange = function (e) { prev(e); if (document.readyState !== 'loading') { document.onreadystatechange = prev; handler(); } }; } })();</script>
    <iframe height="1" width="1" style="position: absolute; top: 0px; left: 0px; border: none; visibility: hidden;"
        src="./ITSA4 - ITAUSA PN_ cotação e indicadores_files/saved_resource.html"></iframe>

    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
    <div class="material-tooltip">
        <div class="tooltip-content"></div>
    </div>
</body>

</html>
